 Last weeks I am making headway with the project.

(The REV 0.9 board has no known flaws. The LT3080 voltage regulator is more than
capable to power the W5500.) I was wrong!

I made 2 simple (piping) utilities to upload/download data between Linux
and UniFLEX.

Linux:   nc -l  -p 32100 >UniFLEX-file
UniFLEX: w2sock <UniFLEX-file

or the other way

Linux:   cat UniFLEX-file |nc -l -p 32100 -q0
UniFLEX: sock2r >UniFLEX-file

One big advantage is the UniFLEX (6X09) has already the bytes
in network order. (big endian).

One major thing I hope to achieve with the UDP implementation is:

TNFS

This should allow 'mounting' an UniFLEX directory node onto a Linux 
tnfs server. From there I believe I would be able to access the exposed
UniFLEX filesystem part from Linux.

There are a few implementations of tnfsd, most binary, one is a Perl version.

To give an idea of the effort I am going through I posted LIST which is the code
for the GPP up to now. (one error in unused code)

The kernel code organization is:  socket.t ===> wzdrvr.t ===> fio_han.t to
reach the dual port RAM, where the GPP CPU sits at the other side.

2024-02-24:

I found out the hard way that the design had a flaw though. Some boards worked
perfect while others distorted the transferred data either by dropping data 
or with adding external data. During my excercises with the scope and hardware
sometimes the clock train would change its length. So I thought it is cross-talk.

I made a new design where all the high frequency tracks were short. When I had
received these boards and put all components on one of them, it did not work.

After a lot of measuring, testing and experimenting with GAL formulas I found
the real culprit. The expected method of resetting the bit counter did not work.
The parallel load was simply in the wrong state for that.

I changed the wiring a bit and changed the GAL G1 a bit. After applying that 
fix to all my 4 boards, they all worked flawlesly after that.

2024-03-10:

Added a way to check the SPI operation. As of the ROM version of 2024-03-10
One can check if the W5500 is properly set. With 'tools-assembly'  tsconf.t
when run, it triggers reading back the basic settings from the W5500/

With prm +0 you can check that. The upper data is as supplied with ifconfig.

The lower data is as read back from the W5500 after running 'tsconf'. 

-->e
start address :eb00
end address :ebff

eb00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
eb10  00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  ................
eb20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
eb30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
eb40  00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00  ................
eb50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
eb60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
eb70  c0 a8 01 b1 ff ff ff 00 c0 a8 01 96 54 53 43 55  ............TSCU   <<
eb80  46 01 ff 00 00 00 00 00 00 00 00 00 00 00 00 00  F...............   << as set with ifconfig
eb90  c0 a8 01 b1 ff ff ff 00 c0 a8 01 96 54 53 43 55  ............TSCU   <-
eba0  46 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  F...............   <- as returned from the W5500
ebb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................   The 'FF' flag is ommitted!
ebc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
ebd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
ebe0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
ebf0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................

 
