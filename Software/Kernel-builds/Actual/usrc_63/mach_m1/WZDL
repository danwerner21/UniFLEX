                                          *                     * configuration file which determines the final                     * kernel drivers contents                     *                                          *                     * the next 3 devices are declared FIXED as /dev                     *                     * is set up for these already               0001  IDE       set    1         (*) IDE support                     * loopdrvr has major 1               0001  LOOP      set    1         (*) LOOP device                     * ram disk               0001  RAMDSK    set    1         (*)                                                               *                     * set 1 for ONLY console CPU09MON                     *               0000  NOACIA    set    0                     *               0000  IOP       set    0         IO Processor                     *               0000  ROMDBG    set    0                     *                     * flpdrvr has own GPP type driver present maj 2                     *               0000  FLP       set    0         GPP/FLP                     *               0000  ECN       set    0                     *               0001  NET       set    1         IN DEVELOPMENT!                     *               0000  SPI       set    0                     *               0000  UIO       set    0         user IO                     *               0000  VID       set    0         VIDEO driver                                          * debug for GPP via dbgio               0001  GPPDBG    set    1                                          * set here if debug acia is present               0000  DBGA      set    0         0=no debug acia, 1= debug acia present                     *               0000  DBG       set    DBGA                                                          04:08:23  Sep 12, 2023   Page    1Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                                                          04:08:23  Sep 12, 2023   Page    2Macro Definitions                                                                             *                     * lsr a 4 times and increment it                     * used in taskcon.t                     *                                          lsr4p     macro  no        args                               lsra                               lsra                               lsra                               lsra                               inca                               endm                                          *                     * debug macro                     *                                          dbugm     macro  output_character                               lda    #'&1                               lbsr   syspch                               endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     ldwd      macro                               fdb    $1096                               fcb    &1&0xff                               endm                                          * load W indexed                     *ldwx    macro                     *        fdb     $10A6                     *        fcb     &1,&2                     *        endm                                          * load W extended                     ldwe      macro                                     04:08:23  Sep 12, 2023   Page    3Macro Definitions                                                                  fdb    $10b6                               fdb    &1                               endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm   [                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048                               endm                                     04:08:24  Sep 12, 2023   Page    4Macro Definitions                                                                             * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084                               fdb    &1                                     04:08:24  Sep 12, 2023   Page    5Macro Definitions                                                                  endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                                     04:08:24  Sep 12, 2023   Page    6Macro Definitions                                                        eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endm                                     04:08:24  Sep 12, 2023   Page    7System     Parameters                                                                         *                     * System Parameters - adjust accordingly                     *                                    0003  DSKADS    equ    3         disk address size in bytes               000E  DIRSIZ    equ    14        directory entry size (name)               000C  SIGCNT    equ    12        number of system signals               000D  MAPSIZ    equ    13        file map size in fdn               1000  PAGSIZ    equ    4096      smallest allocated memory page               0200  BUFSIZ    equ    512       buffer size               0100  MAXPAG    equ    256       max 4K segments in mainframe               0100  PRCSIZ    equ    256       max size of terminal line               0100  SMAPSZ    equ    256       size of swap allocation area               0032  CFDN      equ    50        max in core fdns               0064  CDBLKS    equ    100       max in core disk blocks               0010  MAXPAGES  equ    16        Max 4K Pages in 64K               0009  RESTM     equ    9         max system residence time (ticks)               1000  MAXPIP    equ    4096      max data in a pipe (don't go over 5120!)               000A  DPLCNT    equ    10        data pool buffer count               0009  DPLSIZ    equ    9         data pool buffer size               0008  EXCSIZ    equ    8         size of exec name entry               0010  UNFILS    equ    16        max open files / user                                                          04:08:24  Sep 12, 2023   Page    8System     Parameters                                                                         * memory associated values                                    0000  SYSPAG    equ    $00       system page               0000  SYSLOC    equ    $00       system segment in system space               0001  STABPG    equ    $01       system table page               0005  SYSTXT    equ    $05       system text start               0009  DRVPAG    equ    $09       drivers segment               000B  USRLOC    equ    $0B       user segment in system space               000C  SBUF      equ    $0C       system buffer segment               000D  XBUF      equ    $0D       cross buffer segment               D000  XBUFFR    equ    XBUF<<12  cross buffer begin               C000  SBUFFR    equ    SBUF<<12  system buffer begin                     * check ust.h !               0F38  STKOFS    equ    $F38      offset to usp/sysstk               BF38  USERBL    equ    (USRLOC<<12)+STKOFS user block location               0E00  USTKO     equ    $E00      user stack offset in ublock               BF38  SYSSTK    equ    (USRLOC<<12)+STKOFS system stack per task               000F  SYSBLK    equ    $0F       system page 0                                    00F8  NONRAM    equ    $F8       pages F8 up to FF are NO RAM                                          * character definitions                                    0009  TABCH     equ    $9        tab character               0020  SPACE     equ    $20       space character               000A  NL        equ    $a        new line               000D  CR        equ    $d        carriage return               001B  HOLDC     equ    $1b       ESC - suspend output               0011  XONC      equ    $11       XON - restart output               0013  XOFFC     equ    $13       XOFFF - suspend output               001C  QUITC     equ    $1c       FS character               0003  INTRC     equ    $03       DEL character               0004  EOTCH     equ    $04       EOT character               007F  BSPCH     equ    $7f       back space character               0018  CNCLC     equ    $18       line cancel char                                          * Constants                                    0080  EBIT      equ    %10000000 entire state status bit (cc)               0001  CBIT      equ    %00000001 carry bit in cc (error bit)               0008  REGSIZ    equ    8         space: CC, D, X, PC, PB               FFFF  NODEV     equ    -1        no device specifier               0002  BADBFD    equ    2         fdn for .badblocks (should be!)                                                          04:08:25  Sep 12, 2023   Page    9System     Parameters                                                                         * Register offset to SP for parameters                                    0000  UCC       equ    0         condition codes               0001  UA        equ    1         a register               0002  UB        equ    2         b register               0003  UX        equ    3         x register               0005  UPC       equ    5         pc register               0007  UPB       equ    7         os call post byte               0001  UD        equ    UA        d register                                          * signals                                    0001  HANGS     equ    1         hangup signal               0002  INTS      equ    2         interrupt signal               0003  QUITS     equ    3         quit signal               0004  EMTS      equ    4         emt trap signal (swi)               0005  KILLS     equ    5         kill signal               0006  WPIPES    equ    6         illegal pipe write signal                     * SWTPC vii special               0007  FALTS     equ    7         memory fault               0008  EMT2S     equ    8         emt2 trap (swi2)                     * non SWTPC vii               0007  BARGS     equ    7         bad argument signal               0008  TRACS     equ    8         trace job signal                     *               0009  TIMES     equ    9         time limit signal               000A  ALARMS    equ    10        alarm signal               000B  TERMS     equ    11        termination interrupt               000C  USERS     equ    12        user defined interrupt                                                               * priorities                                    0078  SWAPPR    equ    120       swap task               0064  FDNPR     equ    100       fdn update               0050  NFDNPR    equ    80        fdn wait priority               0032  BUFPR     equ    50        block io task               001E  WBUFPR    equ    30        buffer wait               FFFB  PIPEPR    equ    -5        pipe i/o               FFFB  WMEMPR    equ    -5        wait memory               FFF6  TTYIPR    equ    -10       tty wait               FFEC  TTYOPR    equ    -20       tty wait output               FFD8  WAITPR    equ    -40       task wait               FFB0  SLEPPR    equ    -80       sleeping               FFA6  USERPR    equ    -90       max user priority                                                                               04:08:25  Sep 12, 2023   Page   10System     Parameters                                                                         * errors                                    0001  EIO       equ    1         io error               0002  EFAULT    equ    2         system fault               0003  EDTOF     equ    3         data section overflow               0004  ENDR      equ    4         not a directory               0005  EDFUL     equ    5         disk full               0006  ETMFL     equ    6         too many files               0007  EBADF     equ    7         bad file               0008  ENOFL     equ    8         no file               0009  EMSDR     equ    9         missing directory               000A  EPRM      equ    10        file permission               000B  EFLX      equ    11        file exists               000C  EBARG     equ    12        bad argument               000D  ESEEK     equ    13        seek error               000E  EXDEV     equ    14        crossed devices               000F  ENBLK     equ    15        not a block special file               0010  EBSY      equ    16        device is busy               0011  ENMNT     equ    17        file not mounted               0012  EBDEV     equ    18        bad device specified               0013  EARGC     equ    19        too many arguments               0014  EISDR     equ    20        file is a directory               0015  ENOTB     equ    21        file not binary               0016  EBBIG     equ    22        binary file too big               0017  ESTOF     equ    23        stack overflow               0018  ENCHD     equ    24        no children living               0019  ETMTS     equ    25        too mant tasks active               001A  EBDCL     equ    26        bad system call               001B  EINTR     equ    27        interrupted system call               001C  ENTSK     equ    28        no task found               001D  ENTTY     equ    29        not a tty               001E  EPIPE     equ    30        write to broken pipe               001F  ELOCK     equ    31        record locking error                     *               0020  ESOCK     equ    32        socket error                     *                     * detailed socket errors passed in hibyte of D on return                     * but ONLY if the primary error is ESOCK !!                     *               0021  EBAL      equ    33        buffer alignment error, address overlaps pagesize                                          *                     * System Parameters - adjust accordingly                     *               18A5  CPUID     set    6309                                    0003  CPUTYP    equ    $03       6309               000E  STKREG    equ    14                                                         0001  SSIZE     equ    1         initial stack size (*PAGSIZ)                                     04:08:25  Sep 12, 2023   Page   11System     Parameters                                              0014  MAXJOB    equ    20        maximum simult user tasks               0010  NBLKS     equ    16        Accessable pages in address space               000F  USRHIP    equ    NBLKS-1   User's highest addressable page               00F0  USRHIP_4  equ    USRHIP<<4               00FC  USRHIP_FC equ    USRHIP_4+$C largest absolute program size                                          * terminal i/o constants                                    0077  OQHI      equ    119       outq upper limit               000F  OQLO      equ    15        outq lower limit               00FE  CHRLIM    equ    254       max characters on q                                          *               F006  LIGHTS    equ    $f006                                    0080  LB_FIO0   equ    %10000000               0008  LB_BLKIO  equ    %00001000               0004  LB_SWOUT  equ    %00000100               0002  LB_SWPIN  equ    %00000010               0001  LB_IDLE   equ    %00000001                                          *                     * Machine constants                     *                                    F400  DATBOX    equ    $F400     memory mapper regs               F004  CLOCK     equ    $F004     CPU09 clock base               F005  CLKSEL    equ    CLOCK+1   clock select and status register               F004  CLKLAT    equ    CLOCK     clock timer latch               0001  CLKCON    equ    %00000001 clock control (gimix)               0080  CLKMSK    equ    %10000000 clock interrupt mask               0009  HZTIM     equ    100/10-1  interrupt rate (50Hz)                                          *                     *  Special device addresses                     *                                    F000  BASACI    equ    $F000                                                               *                     * PIA on MONitor card serves also for                     * timer control (100Hz) on port A                     * and memory trap signalling on port B                     *               F005  timctrl   equ    $F005     control register               F004  timdata   equ    $F004     data register               F007  trpctrl   equ    $F007     control register               F006  trpdata   equ    $F006     dataregister                                          *               FE00  uisctr    equ    $FE00     interrupt depth counter (read)                                     04:08:26  Sep 12, 2023   Page   12System     Parameters                                              FE01  cuddwn    equ    $FE01     interrupt nest counter        (write)               FE02  k_u_map   equ    $FE02     user/kernel map and vectors   (write)               FE03  tlatch    equ    $FE03     task select latch             (write)                     *                                          *                     * IOP and GPP boards                     *                     *               F200  IOP0BASE  equ    $f200     IOP device                     *               F300  UIO0BASE  equ    $f300     UIO device                     *               E000  SPI0BASE  equ    $E000     1Kx8 dualport RAM               E000  FLP0BASE  equ    $E000     1Kx8 dual port RAM Floppy interface                     *               E800  NWP0BASE  equ    $E800     1kx8 dual port RAM NETWORK CPU                     *               EC00  RAM0BASE  equ    $EC00     HW: 512 byte buffer and 512 (2) control locations                     *                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          * wzfsta bits               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0080  WZBUSY    equ    %10000000 sock is busy               0040  WZGPPI    equ    %01000000 sock interrupt GPP=>>CPU               0020  WZCPUI    equ    %00100000 sock interrupt CPU+>>GPP               0002  WZSKIO    equ    %00000010 io mode               0004  WZSKIS    equ    %00000100 sock is sending                                          * wzcmd values               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                                          04:08:26  Sep 12, 2023   Page   13System     Parameters                                              0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     * wzstat values               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMCRW    equ    $42       sock mac raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               0080  WSSPEC    equ    $80       special combined commands               0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                       0000                         base   0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzfifo    rmb    1         [*] (pre= $00)  sock has fifo allocated  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003                         rmb    1         [*]                     *  0004               wzcmd     rmb    1         command  0005               wzstat    rmb    1         status  0006               wzflag    rmb    1         flags                     *  0007               wzsize    rmb    2         transfer size  0009               wzxfrd    rmb    2         tranferred  000B               wzrems    rmb    2         remaining size  000D                         rmb    5                     * unix socket info  0012               wzport    rmb    2         port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     * open parameters  001A               wzprot    rmb    2         protocol          for check  001C               wzfaml    rmb    2         family            for check  001E               wztype    rmb    2         type              for check                                    0020  WZSIZE    equ    *-wzenum                       0000                         base   0                     *                     * holds the local IP info                     *                                     04:08:26  Sep 12, 2023   Page   14System     Parameters                                 0000               wzgwad    rmb    4  0004               wzsbnm    rmb    4  0008               wzhwad    rmb    6  000E               wzmyip    rmb    4                     *  0012               wzanyp    rmb    2         wz any port  0014               wzflck    rmb    2         wz fifo lock  0016                         rmb    2                                    0018  WZLCSZ    equ    *-wzgwadFIO Simulation Structure             04:08:26  Sep 12, 2023   Page   15System     Parameters                                                                         *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         base   $0000     pointer addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             04:08:27  Sep 12, 2023   Page   16System     Parameters                                 0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************                                          *                     * FIO Task Priority                     *   -- Set to make task uninterruptable while                     *   -- actually using the FIO                     *               000F  FIOPRI    set    15                                          *                     * FIO Control structures                     *                                          * Transaction slots  0000                         base   0  0000               tran_val  rmb    1         Transaction specific value (returned character, etc)  0001               tran_resp rmb    1         Transaction response code  0002               tran_oval rmb    1         Output specific value  0003               tran_msg  rmb    1         Message code sent  0004               tran_seq  rmb    2         Transaction sequence #  0006               tran_dev  rmb    2         Device code                     *               0008  TRAN_SIZ  equ    *                                            0000                         base   0                     * FIO Control  0000               fio_mbx   rmb    2         Mailbox interlock - Task id of locker  0002               fio_fifo  rmb    2         FIFO interlock - Task id of locker  0004               fio_dba   rmb    2         FIFO base address of device  0006               fio_fsz   rmb    2         FIFO data size  0008               fio_dsz   rmb    2         FIFO device size  000A               fio_mxtr  rmb    1         FIFO max transactions  000B               fio_ict   rmb    1         Set non-zero if message interrupt was missed  000C               fio_tflg  rmb    1         Waiting on transaction slot semaphore  000D               fio_tran  rmb    2         transaction slots                     *               000F  FIO_SIZE  equ    *                     FIO Simulation Structure             04:08:27  Sep 12, 2023   Page   17Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *  0000                         base   0                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  0240               wzsk7     rmb    WZSIZE    sock  0260               wzsk6     rmb    WZSIZE    sock  0280               wzsk5     rmb    WZSIZE    sock  02A0               wzsk4     rmb    WZSIZE    sock  02C0               wzsk3     rmb    WZSIZE    sock  02E0               wzsk2     rmb    WZSIZE    sock  0300               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0320  WZNETOF   equ    *  0320               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * NWP ROM version                     *               0001  ROM_VERSION equ  $01       first issue                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 error/reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 NWP saturated               0083  E_NOTOPN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device               0085  E_DEVBSY  equ    REJECT+$05 Device already openFIO Simulation Structure             04:08:27  Sep 12, 2023   Page   18Dual_Port RAM Structure                                            0086  E_IOERR   equ    REJECT+$06 some sort of IO error               0087  E_INTRPT  equ    REJECT+$07 interrupt from socket               0088  E_ABORT   equ    REJECT+$08 transaction aborted by CPU                                          *                     * Normal responses                     *               0001  R_RESET   equ    $01       systen reset & functioning               0002  R_OPEN    equ    $02       socket open successful               0003  R_CLOSE   equ    $03       socket close successful               0004  R_REQOK   equ    $04       socket write request granted               0005  R_WRITE   equ    $05       socket write data complete               0006  R_RDOK    equ    $06       socket read data available               0007  R_SNDNC   equ    $07       socket read data in fifo (no remaining data)               0008  R_SNDMC   equ    $08       socket read data in fifo (mre data)               0009  R_INTRPT  equ    $09       interrupt (NET -> CPU)                                          *                     * request codes (form Main CPU) is index in SOCK_XXX table at NWIOP                     *               0010  O_OPEN    equ    $10       open socket               0020  O_CLOSE   equ    $20       close socket               0030  O_RQWR    equ    $30       request write to socket               0040  O_SEND    equ    $40       write data to socket               0050  O_RQRD    equ    $50       request read data from socket               0060  O_RECV    equ    $60       read data from socket               0070  O_INTRPT  equ    $70       interrupt socket               0080  O_CONNECT equ    $80       connect socket               0090  O_BIND    equ    $90       bind socket               00A0  O_LISTEN  equ    $a0       listen on socket               00B0  O_ACCEPT  equ    $b0       accept connection on socket               00C0  O_DISCON  equ    $c0       disconnect socket               00D0  O_SNDMAC  equ    $d0       send mac               00E0  O_SNDKEP  equ    $e0       send keep                     *                     * socket errors passed in hibyte on return                     * but ONLY if the primary error is ESOCK !!                     *                     * normal error return D = 00,error and CC has carry set                     *                     * socket error return D = xx,SE and CC has carry set                     *               0001  SESKNUM   equ    1         invalid socket number               0002  SESKOPT   equ    2         invalid socket option               0003  SESKINI   equ    3         socket not initialized/SIPR=0 for TCP               0004  SESKCLS   equ    4         unexpectedly closed               0005  SESKMOD   equ    5         invalid mode for socket operation               0006  SESKFLG   equ    6         invalid socket flag               0007  SESKSTA   equ    7         invalid status               000A  SESKARG   equ    10        invalid argument               000B  SESKPZR   equ    11        port number is zero               000C  SESKIPI   equ    12        invalid IP addressFIO Simulation Structure             04:08:28  Sep 12, 2023   Page   19Dual_Port RAM Structure                                            000D  SESKTIM   equ    13        timeout occurred               000E  SESKDAL   equ    14        data len >buffer size               000F  SESKBUF   equ    15        socket buffer i not enough for data comm                                    0015  SESKNTF   equ    21        no free socket found                                    0001  SOCKOK    equ    1               0000  SOCKBSY   equ    0                                    00FF  SEFATPL   equ    255       fatal packet length                                          *                     * Task Table                     *                     * One entry per active task.  All information                     * pertaining to an active task needed while the                     * task may be swapped out is contained in this                     * table entry.  All other per task data is in                     * the per user table (User Table).  There is a max                     * number of entries to this table (fixed size).                     *                       0000                         base   0                                          * struct task                       0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsutop    rmb    1         physical user top mem page  0005               tsstat    rmb    1         * see below *  0006               tsmode    rmb    1         * see below *  0007               tsprir    rmb    1         priority - negative is low  0008               tsuid     rmb    2         user id  000A               tstid     rmb    2         unique task id  000C               tstidp    rmb    2         parent's task id  000E               tstty     rmb    2         controlling terminal  0010               tssgnl    rmb    1         signal number sent to task  0011               tsprb     rmb    1         task priority bias  0012               tsact     rmb    1         task activity counter  0013               tsage     rmb    1         task residency age  0014               tsevnt    rmb    2         event task is waiting on  0016               tstext    rmb    2         pointer to text table entry  0018               tsswap    rmb    2         swap address of image  001A               tssize    rmb    1         swap image size  001B               tsalrm    rmb    2         seconds til alarm                                    001D  TSKSIZ    equ    *         task structure sizeFIO Simulation Structure             04:08:28  Sep 12, 2023   Page   20Dual_Port RAM Structure                                                  * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TCREAT    equ    4         creating task               0005  TTERM     equ    5         terminating task               0006  TTRACE    equ    6         tracing task                     * mode codes                                    0001  TCORE     equ    %00000001 task in core               0002  TLOCK     equ    %00000010 task locked in core               0004  TSYSTM    equ    %00000100 scheduling task               0008  TTRACP    equ    %00001000 task being traced               0010  TSWAPO    equ    %00010000 swapping out task               0020  TARGX     equ    %00100000 expand for args swap               0040  TNOMAP    equ    %01000000 task map invalidFIO Simulation Structure             04:08:28  Sep 12, 2023   Page   21Dual_Port RAM Structure                               0000                         data                                                    global wattch,wskcl,wskcn,nw_int                               global wskrd,wskwr,wskop,wskbi,wskli,wskac                                    FFB0  WZPRIO    equ    -80       wz socket prio                                          *                     * wzdrvr.t driver for w5500 module via CPU09GPP                     * at return U = wzsock address                     *+              0000  wattch    equ    *  0000 34   36                 pshs   d,x,yX 0002 108E 0000               ldy    #NWP0  0006 EE   24                 ldu    fio_dba,y  0008 AE   C8 18              ldx    fifo_us0,u first wzsock  000B                         addr   U,X       U + X -> X  000E 5F                      clrb  000F 6D   02       03        tst    wzfsta,x  0011 27   0A                 beq    01f       is free  0013 30   88 20              leax   WZSIZE,x  0016 5C                      incbX 0017 C1   00                 cmpb   #MAX_WZ  0019 25   F4                 blo    03b  001B 20   23                 bra    04f                       001D A6   02       01        lda    wzfsta,x  001F 8A   80                 ora    #WZBUSY  0021 A7   02                 sta    wzfsta,x                     *  0023 1F   13                 tfr    x,u       sock address  0025 34   70       02        pshs   x,y,u  0027 C6   10                 ldb    #O_OPENX 0029 BD   0000               jsr    fio_msg   wz fio handler  002C 35   70                 puls   x,y,u  002E C1   82                 cmpb   #E_SYSBSY  0030 27   F3                 beq    02b  0032 C1   84                 cmpb   #E_BADDEV  0034 27   04                 beq    03f  0036 1A   04                 sez  0038 35   B6                 puls   d,x,y,pc                     *  003A               03  003A A6   02                 lda    wzfsta,x  003C 84   7F                 anda   #$7f      unbusy  003E A7   02                 sta    wzfsta,x  0040 86   12       04        lda    #EBDEVX 0042 B7   0000               sta    uerror  0045 1C   FB                 clz  0047 35   B6                 puls   d,x,y,pc                                          FIO Simulation Structure             04:08:28  Sep 12, 2023   Page   22Dual_Port RAM Structure                                                  * U = sock address+              0049  wskcl     equ    *  0049 34   76                 pshs   d,x,y,uX 004B 108E 0000               ldy    #NWP0                       004F C6   20       06        ldb    #O_CLOSEX 0051 BD   0000               jsr    fio_msg  0054 C1   82                 cmpb   #E_SYSBSY  0056 27   F7                 beq    06b  0058 A6   42                 lda    wzfsta,u  005A 84   7F                 anda   #$7f      unbusy  005C A7   42                 sta    wzfsta,u  005E 35   F6                 puls   d,x,y,u,pc                                          * U = wzsock address                     * wzsock already updated with connection info+              0060  wskcn     equ    *  0060 34   76                 pshs   d,x,y,uX 0062 108E 0000               ldy    #NWP0                       0066 C6   80                 ldb    #O_CONNECTX 0068 BD   0000               jsr    fio_msg  006B 5D                      tstb  006C 27   05                 beq    01f  006E A6   45                 lda    wzstat,uX 0070 BD   0000               jsr    sockerr  0073 35   F6       01        puls   d,x,y,u,pc                                                                                                                              * U = sock address+              0075  wskdi     equ    *  0075 86   08                 lda    #WCDISC  0077 20   0E                 bra    wskcm                                          * U = wzsock address+              0079  wskop     equ    *  0079 86   01                 lda    #WCOPEN  007B 20   0A                 bra    wskcm                                          * U = wzsock address+              007D  wskac     equ    *  007D 86   86                 lda    #WCACCP  007F 20   06                 bra    wskcm                                          * U = wzsock address+              0081  wskbi     equ    *  0081 86   85                 lda    #WCBIND  0083 20   02                 bra    wskcm                     FIO Simulation Structure             04:08:29  Sep 12, 2023   Page   23Dual_Port RAM Structure                                                  * U = sock address+              0085  wskli     equ    *  0085 86   02                 lda    #WCLIST                                          * common for open, connect  0087 86   01       wskcm     lda    #EIOX 0089 B7   0000               sta    uerror  008C 39                      rts                                          * U = sock address+              008D  wskrd     equ    *  008D 34   76                 pshs   d,x,y,uX 008F 108E 0000               ldy    #NWP0                     X 0093 FC   0000               ldd    uistrt    check alignment  0096                         bitdi  $01ff     512 byte boundary  009A 26   58                 bne    07f                     X 009C FC   0000     00        ldd    uicnt     data to read  009F 27   4A                 beq    90f                       00A1 C6   50                 ldb    #O_RQRDX 00A3 BD   0000               jsr    fio_msgX 00A6 BD   0000               jsr    get_F_S   allocate slot + fifo                     X 00A9 FC   0000               ldd    uicnt     how much  00AC 10A3 26                 cmpd   fio_fsz,y  00AF 25   02                 blo    05f  00B1 EC   26                 ldd    fio_fsz,y  00B3 ED   47       05        std    wzsize,u  00B5 A6   C4                 lda    wzenum,u  socket#  00B7 C6   60                 ldb    #O_RECVX 00B9 BD   0000               jsr    fio_msg   data to fifo  00BC 34   04                 pshs   b         result                     *  00BE EC   49                 ldd    wzxfrd,u  00C0 27   24                 beq    20f       EOF?                     *  00C2 34   76                 pshs   d,x,y,u   save regs  00C4                         trfr   D,W       count  00C6 EE   24                 ldu    fio_dba,y  00C8 33   C8 20              leau   fifo,u    fifo addressX 00CB BE   0000               ldx    uistrt    user memory addressX 00CE BD   0000               jsr    mapbpt    map in  00D1                         tfm1   U,X  00D4 35   76                 puls   d,x,y,u                     *X 00D6 BD   0000               jsr    FIFO_unlock  00D9 10A3 27                 cmpd   wzsize,y  we got all  00DC 35   04                 puls   b  00DE 26   0B                 bne    90f  00E0 C1   08                 cmpb   #R_SNDMC  more there?FIO Simulation Structure             04:08:29  Sep 12, 2023   Page   24Dual_Port RAM Structure                               00E2 27   B8                 beq    00b  00E4 20   05                 bra    90f                     *X 00E6 BD   0000     20        jsr    FIFO_unlock  00E9 35   02                 puls   a         cleanup                     *X 00EB 10BE 0000     90        ldy    utask  00EF 6F   A8 12              clr    tsact,y  00F2 35   F6       99        puls   d,x,y,u,pc                     * buffer alignment error  00F4 86   21       07        lda    #EBAL     errorX 00F6 B7   0000               sta    uerror  00F9 35   F6                 puls   d,x,y,u,pc                                                                                    * U = sock address+              00FB  wskwr     equ    *  00FB 34   76                 pshs   d,x,y,uX 00FD 108E 0000               ldy    #NWP0                     X 0101 FC   0000     00        ldd    uicnt     # to write  0104 27   E5                 beq    90b       zero                       0106 C6   30                 ldb    #O_RQWR   tell NWP we have dataX 0108 BD   0000               jsr    fio_msg  010B C1   86                 cmpb   #E_IOERR  wrong?  010D 27   37                 beq    80f  010F C1   82                 cmpb   #E_SYSBSY  0111 27   EE                 beq    00b                     *X 0113 BD   0000               jsr    get_F_S   allocate FIFO + transaction slot                     *X 0116 FC   0000               ldd    uicnt     how much  0119 10A3 26                 cmpd   fio_fsz,y  011C 25   02                 blo    05f  011E EC   26                 ldd    fio_fsz,y  0120 ED   47       05        std    wzsize,u  0122 34   76                 pshs   d,x,y,u   save regs  0124                         trfr   D,W       count  0126 EE   24                 ldu    fio_dba,y  0128 33   C8 20              leau   fifo,u    fifo addressX 012B BE   0000               ldx    uistrt    user memory addressX 012E BD   0000               jsr    mapbpt    map in  0131                         tfm1   X,U  0134 35   76                 puls   d,x,y,u                     *  0136 A6   C4       25        lda    wzenum,u  socket#  0138 C6   40                 ldb    #O_SENDX 013A BD   0000               jsr    fio_msg   transfer  013D C1   82                 cmpb   #E_SYSBSY  013F 27   F5                 beq    25bFIO Simulation Structure             04:08:29  Sep 12, 2023   Page   25Dual_Port RAM Structure                                                  X 0141 BD   0000               jsr    FIFO_unlock  0144 20   A5                 bra    90b                       0146 86   01       80        lda    #EIOX 0148 B7   0000               sta    uerror  014B 12                      nop  014C 35   F6                 puls   d,x,y,u,pc                                                               *                     * nw_int, send signal to socket task                     *+              014E  nw_int    equ    *  014E 86   FF                 lda    #$ff  0150 39                      rts                                                               0 Error(s) detectedLength of Text Segment: 0000Length of Data Segment: 0151Length of Bss Segment:  0000FIO Simulation Structure             04:08:29  Sep 12, 2023   Page   26Dual_Port RAM Structure                             Symbol Table:Absolute Symbols:A        0008   ALARMS   000A   B        0009   BADBFD   0002   BARGS    0007   BASACI   F000   BSPCH    007F   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CHRLIM   00FE   CLKCON   0001   CLKLAT   F004   CLKMSK   0080   CLKSEL   F005   CLOCK    F004   CNCLC    0018   CPU2DEV  0022   CPUID    18A5   CPUTYP   0003   CR       000D   D        0000   DATBOX   F400   DBG      0000   DBGA     0000   DEV2CPU  0021   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBAL     0021   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   ECN      0000   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESOCK    0020   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   E_ABORT  0088   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 0087   E_IOERR  0086   E_NOTOPN 0083   E_SYSBSY 0082   F        000F   FALTS    0007   FDNPR    0064   FF       0040   FIOPRI   000F   FIO_SIZE 000F   FLP      0000   FLP0BASE E000   GPPDBG   0001   HANGS    0001   HOLDC    001B   HZTIM    0009   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0000   IOP0BASE F200   IS       0003   IU       0002   IX       0000   IY       0001   KILLS    0005   LB_BLKIO 0008   LB_FIO0  0080   LB_IDLE  0001   LB_SWOUT 0004   LB_SWPIN 0002   LIGHTS   F006   LOOP     0001   MAPSIZ   000D   MAXJOB   0014   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   NBLKS    0010   NET      0001   NFDNPR   0050   NL       000A   NOACIA   0000   NODEV    FFFF   NONRAM   00F8   NWP0BASE E800   OQHI     0077   OQLO     000F   O_ACCEPT 00B0   O_BIND   0090   O_CLOSE  0020   O_CONNEC 0080   O_DISCON 00C0   O_INTRPT 0070   O_LISTEN 00A0   O_OPEN   0010   O_RECV   0060   O_RQRD   0050   O_RQWR   0030   O_SEND   0040   O_SNDKEP 00E0   O_SNDMAC 00D0   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAM0BASE EC00   RAMDSK   0001   REGSIZ   0008   REJECT   0080   RESTM    0009   ROMDBG   0000   ROM_VERS 0001   R_CLOSE  0003   R_INTRPT 0009   R_OPEN   0002   R_RDOK   0006   R_REQOK  0004   R_RESET  0001   R_SNDMC  0008   R_SNDNC  0007   R_WRITE  0005   S        0004   SBUF     000C   SBUFFR   C000   SEFATPL  00FF   SESKARG  000A   SESKBUF  000F   SESKCLS  0004   SESKDAL  000E   SESKFLG  0006   SESKINI  0003   SESKIPI  000C   SESKMOD  0005   SESKNTF  0015   SESKNUM  0001   SESKOPT  0002   SESKPZR  000B   SESKSTA  0007   SESKTIM  000D   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SOCKBSY  0000   SOCKOK   0001   SPACE    0020   SPI      0000   SPI0BASE E000   SSIZE    0001   STABPG   0001   STKOFS   0F38   STKREG   000E   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TARGX    0020   TCORE    0001   TCREAT   0004   TERMS    000B   TIMES    0009   TLOCK    0002   TNOMAP   0040   TRACS    0008   TRAN_SIZ 0008   TRUN     0001   TSKSIZ   001D   TSLEEP   0002   TSWAPO   0010   TSYSTM   0004   TTERM    0005   TTRACE   0006   TTRACP   0008   TTYIPR   FFF6   TTYOPR   FFEC   TWAIT    0003   U        0003   UA       0001   UB       0002   UCC      0000   FIO Simulation Structure             04:08:30  Sep 12, 2023   Page   27Dual_Port RAM Structure                             UD       0001   UIO      0000   UIO0BASE F300   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USERS    000C   USRHIP   000F   USRHIP_4 00F0   USRHIP_F 00FC   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VID      0000   W        0006   WAITPR   FFD8   WBUFPR   001E   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WMEMPR   FFFB   WPIPES   0006   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSLACK   001D   WSLIST   0014   WSMCRW   0042   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSXMDD   0082   WZBUSY   0080   WZCPUI   0020   WZGPPI   0040   WZLCSZ   0018   WZNETOF  0320   WZPRIO   FFB0   WZSIZE   0020   WZSKIO   0002   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZWLCK   0010   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   cuddwn   FE01   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dba  0004   fio_dsz  0008   fio_fifo 0002   fio_fsz  0006   fio_ict  000B   fio_mbx  0000   fio_mxtr 000A   fio_tflg 000C   fio_tran 000D   k_u_map  FE02   nwp_strt 0000   timctrl  F005   timdata  F004   tlatch   FE03   tran_dev 0006   tran_msg 0003   tran_ova 0002   tran_res 0001   tran_seq 0004   tran_val 0000   trpctrl  F007   trpdata  F006   tsact    0012   tsage    0013   tsalrm   001B   tsevnt   0014   tslink   0000   tsmode   0006   tsprb    0011   tsprir   0007   tssgnl   0010   tssize   001A   tsslnk   0002   tsstat   0005   tsswap   0018   tstext   0016   tstid    000A   tstidp   000C   tstty    000E   tsuid    0008   tsutop   0004   uisctr   FE00   wlocip   0320   wzanyp   0012   wzcmd    0004   wzenum   0000   wzfaml   001C   wzfifo   0001   wzflag   0006   wzflck   0014   wzfsta   0002   wzgwad   0000   wzhwad   0008   wzipad   0014   wzmyip   000E   wzport   0012   wzprot   001A   wzrems   000B   wzsbnm   0004   wzsflg   0018   wzsize   0007   wzsk1    0300   wzsk2    02E0   wzsk3    02C0   wzsk4    02A0   wzsk5    0280   wzsk6    0260   wzsk7    0240   wzsk8    0220   wzstat   0005   wztype   001E   wzxfrd   0009   Text Segment Symbols:     NoneData Segment Symbols:nw_int   014E   wattch   0000   wskac    007D   wskbi    0081   wskcl    0049   wskcm    0087   wskcn    0060   wskdi    0075   wskli    0085   wskop    0079   wskrd    008D   wskwr    00FB   Bss Segment Symbols:     NoneExternal Symbols:FIO Simulation Structure             04:08:30  Sep 12, 2023   Page   28Dual_Port RAM Structure                             FIFO_unl 0000   MAX_WZ   0000   NWP0     0000   fio_msg  0000   get_F_S  0000   mapbpt   0000   sockerr  0000   uerror   0000   uicnt    0000   uistrt   0000   utask    0000   