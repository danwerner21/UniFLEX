*** UniFLEX RAM disk driver CPU09FLX+09RAMDSK** non interrupt* Major 2*        opt     nol        lib     ./ramdrvr.h        lib     ../include/blktab.h        lib     ./gendrvr.h        opt     lis        if      (RAMDSK=1)        global  ramopn,ramcls,ramio        global  rambdt,mxramd        global  ramcop,ramccl,ramcrd,ramcwr,ramspc        sttl    ramdrvr* Device Tables** dtdfl rmb     2       device buffer fwd link* dtdbl rmb     2       device buffer bwd link* dtqfl rmb     2       device io queue fwd link* dtqbl rmb     2       device io queue bwd link* dtbusy        rmb     1       device busy flag* dtrtry        rmb     1       device error retry count* dtspr rmb     2       device spare byterambdt  rzb     DVTSIZ          device table*RAMtab  fdb     0               Block Device Table addressramoct  rzb     1ramcct  rzb     1mxramd  fdb     MXRAMD  size of ramdisk        sttl    block device**ramopn  equ     *        tstb            one one driver        bne     ramoer        inc     ramoct        rts**ramcls  equ     *        clr     ramoct        rtsramoer  lda     #EBARG        sta     uerror        rts**ramio   equ     *        stx     RAMtab          save block device tabel address        inc     rambdt+dtbusy   mark busy        ldb     bfdvn+1,y       get device #        bne     ramierr*        tst     bfblch,y        BLOCK# H/M/L        bne     ramierr         illegal address        ldd     bfblck,y        cmpd    mxramd          max blocks RAM disk        bhs     ramierr        sta     rambhi        stb     ramblo* fixed sizes only        ldd     bfxfc,y         transfer size        cmpd    #BUFSIZ        bne     ramierr         illegal*        trfr    D,W             W is count        tfr     y,x        jsr     mapbpt          set map        lda     bfflag,y        X is now buf pointer        ldu     #rambuf         U points to RAMDISK buffer        bita    #BFRWF        bne     01f             read* write        exg     u,x01      tfm1    U,X             transfer*02     clr      rambdt+dtbusy   can't go wrong here       clr      rambdt+dtrtry       ldx      RAMtab       jmp      BDioend*ramierr lda     #EBARG        sta     uerror        lda     bfflag,y        ora     #BFERR        sta     bfflag,y        bra     02b        sttl    char device** open character device*ramcop  equ     *        tstb        lbne    ramoer  illegal        inc     ramcct        rts** close character device*ramccl  equ     *        tstb        lbne    ramoer  illegal        clr     ramcct        rts** read from char device*ramcrd  equ     *        pshs    d       save device        ldy     #rchbuf        jsr     blkgtb  get buffer        puls    d        jsr     rchcn   setup and checks        tst     uerror        beq     rrd04rerext  pshs    y        ldy     #rchbuf free buffer        jsr     blkfrb        puls    y,pc*rrd04   pshs    a        orb     #BFRWF        stb     bfflag,y        bra     rchio** write to char device*ramcwr  equ     *        pshs    d       save device        ldy     #rchbuf        jsr     blkgtb        puls    d        jsr     rchcn   setup and checks        tst     uerror        bne     rerext        pshs    archio   ldb     #RMmajor        jmp     blkcio  do remainder of setup and act* first checks and setuprchcn   std     bfdvn,y device        ldd     uicnt   count        std     bfxfc,y        cmpd    #BUFSIZ        bne     05f        tst     bfblch,y        bne     05f        cmpd    mxramd        bhs     05f       to high        jmp     blkcnf05      lda     #EBARG        sta     uerror        rtsramspc  equ     *        tfr     x,y        sty     -2,s        bne     01f* set        nop        rts* get01      ldd     mxramd        std     0,y     tell memory size        beq     09f        lda     ramswt        sta     5,y     pass switches read-out        rts* no hardware09      lda     #EBDEV        sta     uerror        rts        endif        end