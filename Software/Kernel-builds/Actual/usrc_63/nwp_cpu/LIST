               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     20:14:04  Jul 01, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)               0006  PIPES     equ    6         Broken pipe                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                                          * constants for PROT_XLTEOLSWTPc      Intelligent I/O Proce     20:14:04  Jul 01, 2024   Page    2Hardware   Definitions                                             000A  LF        equ    $0a       line feed               000D  CR        equ    $0d       carriage return                                          * NETBLOCK constants               0004  NBRQLN    equ    4         4 bytes for request               0204  NBSIZE    equ    512+NBRQLN                     SWTPc      Intelligent I/O Proce     20:14:05  Jul 01, 2024   Page    3Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     20:14:05  Jul 01, 2024   Page    4Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     20:14:05  Jul 01, 2024   Page    5Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     20:14:05  Jul 01, 2024   Page    6Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     20:14:05  Jul 01, 2024   Page    7Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     20:14:06  Jul 01, 2024   Page    8Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     20:14:06  Jul 01, 2024   Page    9Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * MUST match nwp_codes.h  and MAX_S_NUM !!!!                     *     ==>  wzsockdev.t   <==                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  S_OPEN  0004               D_func2   rmb    2         2  S_CLOSE  0006               D_func3   rmb    2         3  S_RQWR  0008               D_func4   rmb    2         4  S_SEND  000A               D_func5   rmb    2         5  S_RQRD  000C               D_func6   rmb    2         6  S_RECV  000E               D_func7   rmb    2         7  S_INTRPT  0010               D_func8   rmb    2         8  S_CONNECT  0012               D_func9   rmb    2         9  S_BIND  0014               D_funcA   rmb    2         10  S_LISTEN  0016               D_funcB   rmb    2         11  S_ACCEPT  0018               D_funcC   rmb    2         12  S_DISCON  001A               D_funcD   rmb    2         13  S_SNDMAC  001C               D_funcE   rmb    2         14  S_SNDKEP  001E               D_funcF   rmb    2         15  S_SPCL                     *  0020               D_func10  rmb    2         16 S_RRDFRM  0022               D_func11  rmb    2         17 S_RREAD  0024               D_func12  rmb    2         18 S_WRQSTO  0026               D_func13  rmb    2         19 S_WSNDO  0028               D_func14  rmb    2         20 S_WSNDTM  002A               D_func15  rmb    2SWTPc      Intelligent I/O Proce     20:14:06  Jul 01, 2024   Page   10Device     Table Structure                            002C               D_func16  rmb    2  002E               D_func17  rmb    2                       0030               D_func18  rmb    2         24 S_RQSBLK  0032               D_func19  rmb    2         25 S_SNDBLK  0034               D_func1A  rmb    2         26 S_RQRBLK  0036               D_func1B  rmb    2         27 S_RDRBLK                       0038               D_func1C  rmb    2         28  003A               D_func1D  rmb    2         29  003C               D_func1E  rmb    2         30  003E               D_func1F  rmb    2         31                     *  0040               D_inthan  rmb    2         14 Interrupt poller/handler  0042               D_init    rmb    2         15 Device initialization  0044               D_test    rmb    2         16 Test for device present                     *  0046               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     20:14:06  Jul 01, 2024   Page   11History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     20:14:06  Jul 01, 2024   Page   12IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 20:14:06  Jul 01, 2024   Page   13IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 20:14:07  Jul 01, 2024   Page   14IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMRAW    equ    $42       sock mac raw               0032  WSIRAW    equ    $32       sock IP raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commandsTask       Structure                 20:14:07  Jul 01, 2024   Page   15IOP        Memory Layout                                           0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                          * is SOCK_NONBLOCK               0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                     * is SOCK_SIGPIPECLS               0002  WFSPOC    equ    $02       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzdctr    rmb    1         [*] (pre= $00)  delay counter  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, swap busy                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header               0020  wzswap    equ    *         use this with TCP for swap  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parametersTask       Structure                 20:14:07  Jul 01, 2024   Page   16IOP        Memory Layout                                                 *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                                    002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_MRAW   equ    3         mac raw socket               0004  SK_IRAW   equ    4         IP raw socket                     *               0100  SK_NONBLK equ    $0100     non blocking               0200  SK_SPONCL equ    $0200     SIGPIPE on close                                          * protocol familiesTask       Structure                 20:14:07  Jul 01, 2024   Page   17IOP        Memory Layout                                           0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                    8000  PROT_XLTEOL equ  $8000     xlate CR<=>LF (stream only)               0001  PROT_ICMP equ    1               0002  PROT_IGMP equ    2               0008  PROT_EGP  equ    8                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             20:14:08  Jul 01, 2024   Page   18IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             20:14:08  Jul 01, 2024   Page   19IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             20:14:08  Jul 01, 2024   Page   20Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                                    03B0  wnboot    equ    wlocip+64 see netblock.h                                          ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                     FIO Simulation Structure             20:14:08  Jul 01, 2024   Page   21Dual_Port RAM Structure                                                  *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 Socket error,                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  set    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successful               0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  set    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                     *                     *                     * fio_codes.h is the leading file, here areFIO Simulation Structure             20:14:09  Jul 01, 2024   Page   22Dual_Port RAM Structure                                                  * ammendments                     *                     *               0003  R_RQWR    set    $03       [S]  Request for write               0005  R_RQRD    set    $05       [S]  Request for read               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                     *                     * netblock uses a specific interrupt routine                     *               0080  R_RQSBLK  equ    $80               0081  R_SNDBLK  equ    $81               0082  R_RQRBLK  equ    $82               0083  R_RDRBLK  equ    $83               0084  R_ERRBLK  equ    $84       error repsonse                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to mac               0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *FIO Simulation Structure             20:14:09  Jul 01, 2024   Page   23Dual_Port RAM Structure                                            0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *                     * a8                     * b0                     * b8                     *               00C0  S_RQSBLK  equ    $c0       request send extended block               00C8  S_SNDBLK  equ    $c8       send extended block               00D0  S_RQRBLK  equ    $d0       request read extended block               00D8  S_RDRBLK  equ    $d8       read extended block                     *                     * e0                     * e8               00F0  S_NETBOOT equ    $f0       network boot               00F8  S_PG2FIFO equ    $f8       copy memory page to fifo               0020  MAX_S_NUM equ    32        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             20:14:09  Jul 01, 2024   Page   24Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             20:14:09  Jul 01, 2024   Page   25CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0BF                    fdb    rom_trap  Unused  FFF2 E0B8                    fdb    rom_swi3  SWI3  FFF4 E0B1                    fdb    rom_swi2  SWI2  FFF6 E0A4                    fdb    rom_firq  FIRQ  FFF8 E3B2                    fdb    IRQ_han   IRQ  FFFA E0AB                    fdb    rom_swi   SWI  FFFC E09E                    fdb    rom_nmi   Background debug  FFFE E080                    fdb    rom_init  Reset                     *                               info   UniFLEX Networking ROM                               info   for CPU09GPP+09NET                               info   At the start of ROM the locations for preset                               info   the network setting are reserved                               info   0000...0005  MAC ADDRESS                               info   0006...0009  IP address                               info   000A...000D  NETMASK                               info   000E...0011  GATEWAY IP address                               info   avoid any duplicate settings!                                          FIO Simulation Structure             20:14:10  Jul 01, 2024   Page   26System     RESET Code                                                      E000                         org    ROMLOorg                                          * start of ROM                     ***************************************************************                     *                     * contains the MAC ADDRESS to be used, make sure that is unique                     *                     * contains the IP address for the interface                     *                     * contains the NETMASK for the interface                     *                     * contains the IP address of the GATEWAY                     *                     **************************************************************                     *                     * REPLACE the defaults with your specific values                     *                     * this is for the local network device setup                     *                     * mac address 6 bytes                            (Ex00...Ex05)  E000 54 53 43 55   wzifma    fcb    $54,$53,$43,$55,$46,$10 $FF,$FF,$FF,$FF,$FF,$FF                     * IP addres for THIS interface (avoid duplicates!!!)  E006 C0 A8 01 B1   wzifip    fcb    192,168,1,177 255,255,255,255                (Ex06...Ex09)                     * NETMASK  E00A FF FF FF 00   wzifnm    fcb    255,255,255,0 255,255,255,255                (Ex0A...Ex0D)                     * GATEWAY  E00E C0 A8 01 96   wzifga    fcb    192,168,1,150 255,255,255,255                (Ex0E...E011)                     *                     **************************************************************                                          **************************************************************                       E012 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM version:240701',0                     *  E02A 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E04A 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E05E 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          *                     * share settings with kernel driver code                     *               E07B  fio_fsz   equ    *         device fifo size               E07D  fio_dsz   equ    *+2       device RAM size               E07F  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E07B 0200                    fdb    512       fio_fsz FIFO SIZE  E07D 0400                    fdb    1024      fio_dsz DEVICE SIZE  E07F 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONSFIO Simulation Structure             20:14:10  Jul 01, 2024   Page   27System     RESET Code                                                    *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *                     * System RESET code                     *  E080 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E084                         ldmd   3  E084 113D                    fdb    $113d  E086 03                      fcb    3                               endm                      >E087 BD   E0E0     20        jsr    stbinit   go initialize system memory                       E08A 10FE 049C     30        lds    tsktab    Task 0 Stack  E08E 32   E9 00D7            leas   TSKSIZ,s  E092 17   0155               lbsr   fio_reset  E095 BD   E656               jsr    skdvini   set the device itself  E098 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E09B               fio_start  E09B 7E   E4C0     10        jmp    rsched                                          FIO Simulation Structure             20:14:10  Jul 01, 2024   Page   28ROM        Interrupt Fielders                                              E09E 8D   26       rom_nmi   bsr    rom_int  E0A0 4E 4D 49 00             fcc    'NMI',0  E0A4 8D   20       rom_firq  bsr    rom_int  E0A6 46 49 52 51             fcc    'FIRQ',0  E0AB 8D   19       rom_swi   bsr    rom_int  E0AD 53 57 49 00             fcc    'SWI',0  E0B1 8D   13       rom_swi2  bsr    rom_int  E0B3 53 57 49 32             fcc    'SWI2',0  E0B8 8D   0C       rom_swi3  bsr    rom_int  E0BA 53 57 49 33             fcc    'SWI3',0  E0BF 8D   05       rom_trap  bsr    rom_int  E0C1 54 52 41 50             fcc    'TRAP',0                       E0C6 8E   E0D3     rom_int   ldx    #ROM_ERR  E0C9 BD   F3F8               jsr    DB_pdata  E0CC 35   10                 puls   x  E0CE BD   F3F8               jsr    DB_pdata  E0D1 20   FE       rom_bad   bra    *                     *  E0D3 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0                                          *FIO Simulation Structure             20:14:10  Jul 01, 2024   Page   29Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0E0 8E   0000     stbinit   ldx    #0        s  clear all variables  E0E3 CC   0000               ldd    #0  E0E6 ED   81       10        std    ,x++  E0E8 8C   3EFF               cmpx   #end_vars done yet?  E0EB 25   F9                 blo    10b                       E0ED CC   0D04               ldd    #DEBUG  E0F0 FD   0401               std    DB_cntrl                                            E0F3 B6   E07F               lda    max_trn   shared with main CPU  E0F6 48                      asla             *2  E0F7 8B   04                 adda   #4        fixed system tasks  E0F9 B7   0459               sta    NUM_TSK                     * >E0FC 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0FF 8E   040E     15        ldx    #SI_Q     set queue empty  E102 BF   0444               stx    SI_Q_ptr  E105 8E   0447               ldx    #int_buf  reset message in pointer  E108 BF   0453               stx    int_ptr                      >E10B 17   0061     17        lbsr   tskinit   initialize tasks                       E10E 17   1305     18        lbsr   DB_config display configuration  E111 39                      rts                                          *                     * Set up system tables                     *  E112               set_tables  E112 108E 04A0               ldy    #dev_tab  E116 8E   E5F3               ldx    #DEV_SOCK  E119 AF   22                 stx    dev_type,y  E11B AD   98 42              jsr    [D_init,x] (skinit)                                          * Compute configuration  E11E CE   E1D9               ldu    #mod_tbl  tables with module refs  E121 AE   C4       12        ldx    mod_type,u  E123 27   09                 beq    20f       jump if end of module table  E125 AD   98 44              jsr    [D_test,x] check for device  E128 25   04                 bcs    15f       jump if found  E12A 33   44                 leau   MOD_SIZE,u  E12C 20   F3                 bra    12b                     *FIO Simulation Structure             20:14:10  Jul 01, 2024   Page   30Table      Initialization                             E12E               15  E12E               20                     * -- All done setting up configuration                       E12E CC   04C6               ldd    #SYS_TABS start of system tables  E131 1F   03                 tfr    d,u                     * -- Task table  E133 86   D7                 lda    #TSKSIZ  E135 F6   0459               ldb    NUM_TSK  E138 3D                      mul  E139 FF   049C               stu    tsktab >E13C 17   0022               lbsr   sto_chk   check for system table space overflow  E13F FF   049E               stu    tskend                     *                     * -- All done  E142 39            90        rts                     *  E143 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E15A 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E161 33   CB       sto_chk   leau   d,u       compute new end pointer  E163 1183 3EFF               cmpu   #end_vars overflow?  E167 22   03                 bhi    10f       yes - return error  E169 1C   FE                 clc              no         - return OK  E16B 39                      rts  E16C 1A   01       10        sec              ..         bad owies  E16E 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E16F BE   049C     tskinit   ldx    tsktab  E172 BF   0409               stx    utask  E175 F6   0459               ldb    NUM_TSK   # tasks in system  E178 34   04                 pshs   b  E17A 10BE 049C               ldy    tsktab    task 1  E17E 31   A9 00D7            leay   TSKSIZ,y  E182               10                                            E182 86   04       11        lda    #TFREE    mark all tasks free  E184 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             20:14:11  Jul 01, 2024   Page   31Table      Initialization                             E187 26   02                 bne    15f  E189 86   05                 lda    #TSYS     the system task is never free  E18B A7   04       15        sta    tsstat,x  E18D 86   FF                 lda    #$FF      not associated with a terminal  E18F A7   0D                 sta    tsdev,x  E191 A7   0E                 sta    tsdev+1,x  E193 33   89 00D7            leau   TSKSIZ,x  initialize stack  E197 CC   E335               ldd    #IO_han  E19A 34   20                 pshs   y  E19C AC   E1                 cmpx   ,s++      task 1?  E19E 26   03                 bne    20f       no - normal I/O handling task  E1A0 CC   E406               ldd    #SI_HAN   yes - special terminal interrupt handling task  E1A3 36   06       20        pshu   d  E1A5 EF   88 11              stu    usp,x  E1A8 EF   88 13              stu    umark0,x  E1AB 30   89 00D7            leax   TSKSIZ,x  E1AF 6A   E4                 dec    0,s       done?  E1B1 26   CF                 bne    10b  E1B3 32   61                 leas   1,s       clean up stack  E1B5 CC   0000               ldd    #0        nothing running or sleeping  E1B8 FD   0403               std    runlst  E1BB FD   0405               std    slplst  E1BE FD   0407               std    slplst+tsslnk  E1C1 30   A4                 leax   0,y       start interrupt handling task  E1C3 BD   E566               jsr    makrdy  E1C6 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1C7 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1C9 B7   8400               sta    tim_base  interrupt enable  E1CC 39                      rts                                                         E1CD  timerack  equ    *  E1CD 86   01                 lda    #1  E1CF B7   8401               sta    tim_rest  reset interrupt  E1D2 39                      rts                       E1D3 B6   8400     timerchk  lda    tim_base  E1D6 84   80                 anda   #%10000000 interrupt flag  E1D8 39                      rtsFIO Simulation Structure             20:14:11  Jul 01, 2024   Page   32IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1D9  mod_tbl   equ    *  E1D9 E5F3 E1DF               fdb    DEV_SOCK,WZ5_name  E1DD 0000                    fdb    0                     *  E1DF 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             20:14:11  Jul 01, 2024   Page   33FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     * it sets the offsets to the sock array and to the device info                     *  E1EA               fio_reset                     * when here, all storage locations have been erased already                     *  E1EA 8E   0000               ldx    #0  E1ED 9F   14                 stx    fifo_get  set Q pointers  E1EF 9F   16                 stx    fifo_put  E1F1 8E   0370               ldx    #WZNETOF  E1F4 9F   1A                 stx    fifo_us1  E1F6 8E   0220               ldx    #WZSKOFF  E1F9 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1FB 86   08                 lda    #8  E1FD A7   84       01        sta    wzenum,x  E1FF 30   88 2A              leax   WZSIZE,x  to next  E202 4A                      deca  E203 26   F8                 bne    01b                     *  E205 BE   E07D               ldx    fio_dsz  E208 30   1E                 leax   -2,x      one from top  E20A CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E20D C6   FF       fio_wait  ldb    #255      Spin counter                     *  E20F               00  E20F 6D   84                 tst    0,x       fio_cpuF  E211 27   16                 beq    10f                     *  E213 5A                      decb  E214 26   F9                 bne    00b       jump back if not ready                     *  E216 33   5F                 leau   -1,u  E218 1183 0000               cmpu   #0  E21C 26   EF                 bne    fio_wait  E21E 8E   E05E               ldx    #CPU_down  E221 17   11D4               lbsr   DB_pdata  E224 17   11CB               lbsr   DB_main  E227 20   C1                 bra    fio_reset                     * reset OK  E229 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     * for regular NWP and IOP purpose                     *  E22A BE   0453     fio_irq   ldx    int_ptr   input message pointerFIO Simulation Structure             20:14:11  Jul 01, 2024   Page   34FIO        Simulation Routines                        E22D 96   00                 lda    cpu_fio   move REQUEST  E22F A7   80                 sta    ,x+  E231 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E233 ED   81                 std    ,x++  E235 96   03                 lda    cpu_fio2  specific DATA  E237 A7   80                 sta    ,x+  E239 DC   04                 ldd    cpu_fio3  device major/minor  E23B ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E23D FE   E07D               ldu    fio_dsz  E240 33   5F                 leau   -1,u  E242 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E244 BF   0453               stx    int_ptr   update pointer  E247 108E 0447               ldy    #int_buf  get message from buffer  E24B A6   A4                 lda    0,y       -- Send interrupt command?  E24D 81   38                 cmpa   #S_INTRPT  E24F 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E251 10BF 0453               sty    int_ptr   reset pointer  E255 E6   23                 ldb    3,y       signal  E257 AE   24                 ldx    4,y       SOCK reference                     *  E259 BD   E6AE               jsr    sdev_sig  send device signal  E25C 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E25E BE   049C     30        ldx    tsktab    search for an available task  E261 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E264 A6   04       32        lda    tsstat,x  E266 81   04                 cmpa   #TFREE    looking for a "free" task  E268 27   0E                 beq    40f                     *  E26A 30   89 00D7            leax   TSKSIZ,x  E26E 5A                      decb  E26F 26   F3                 bne    32b                     *  E271 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E273 BD   E294               jsr    fio_msg  E276 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E278 108E 0447     40        ldy    #int_buf  get message from bufferFIO Simulation Structure             20:14:12  Jul 01, 2024   Page   35FIO        Simulation Routines                        E27C 10BF 0453               sty    int_ptr   reset pointer  E280 E6   A0                 ldb    ,y+       command byte  REQUEST  E282 E7   09                 stb    tscmd,x   save for task  E284 EC   A1                 ldd    ,y++      sequence #    task ID  E286 ED   0A                 std    tsseq,x  E288 E6   A0                 ldb    ,y+       command specific DATA  E28A E7   0C                 stb    tstval,x  E28C EC   A1                 ldd    ,y++      associate with terminal major/minor  E28E ED   0D                 std    tsdev,x  E290 BD   E566               jsr    makrdy    make task ready to run                     *  E293 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *                     * used for netblock/IOP and NWP purpose                     *  E294 34   54       fio_msg   pshs   b,x,u     save register  E296 FE   E07D               ldu    fio_dsz  E299 33   5E                 leau   -2,u      one off top  E29B D7   09                 stb    fio_cpu   set up mailbox value                     * interrupt location  E29D E7   C4       5         stb    0,u       fio_cpuF, tell the message type                     *  E29F 8E   0000     05        ldx    #0        time-out counter                     *  E2A2 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E2A4 27   06                 beq    20f       jump if consumed                     *  E2A6 30   1F                 leax   -1,x      time-out yet?  E2A8 26   F8                 bne    10b                     *  E2AA 20   F3                 bra    05b       try again                     *  E2AC 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E2AE 34   16       fio_response pshs d,x  E2B0 8D   18                 bsr    FIO_get   access FIO  E2B2 BE   0409               ldx    utask     task IDFIO Simulation Structure             20:14:12  Jul 01, 2024   Page   36FIO        Simulation Routines                        E2B5 EC   0A                 ldd    tsseq,x  E2B7 DD   0A                 std    fio_cpu1  E2B9 EC   0D                 ldd    tsdev,x   device info  E2BB DD   0D                 std    fio_cpu3  E2BD A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2BF 97   0C                 sta    fio_cpu2  E2C1 E6   61                 ldb    1,s       is RESPONSE code >E2C3 BD   E294               jsr    fio_msg  E2C6 8D   17                 bsr    FIO_rel   release FIO  E2C8 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2CA 34   76       FIO_get   pshs   d,x,y,u   save registers  E2CC 108E 0446     10        ldy    #FIO_lock is the device locked  E2D0 6D   A4                 tst    0,y  E2D2 27   07                 beq    20f       no - go get it                     *  E2D4 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2D6 BD   E5A0               jsr    sleep  E2D9 20   F1                 bra    10b       try again                     *  E2DB 6C   A4       20        inc    0,y       mark in use  E2DD 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2DF 34   76       FIO_rel   pshs   d,x,y,u  E2E1 108E 0446               ldy    #FIO_lock  E2E5 6F   A4                 clr    0,y  E2E7 BD   E57C               jsr    wakeup  E2EA 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2EC 34   04       FIFOgeta  pshs   b  E2EE 8D   05                 bsr    FIFO_get  E2F0 35   02                 puls   a  E2F2 1E   89                 exg    a,b  E2F4 39                      rts                     *  E2F5 34   12       FIFO_get  pshs   a,x  E2F7 DC   12                 ldd    fifo_cnt  any data?  E2F9 27   15                 beq    99f       no - exit                     *  E2FB                         decd   yes       - adjust count  E2FB 104A                    fdb    $104aFIO Simulation Structure             20:14:12  Jul 01, 2024   Page   37FIO        Simulation Routines                                                     endm  E2FD DD   12                 std    fifo_cnt  E2FF 9E   14                 ldx    fifo_get  get consumer pointer  E301 E6   88 20              ldb    fifo,x    fetch byte  E304 30   01                 leax   1,x       bump pointer  E306 BC   E07B               cmpx   fio_fsz   end of fifo?  E309 26   03                 bne    10f                     *  E30B 8E   0000               ldx    #0        reset pointer                     *  E30E 9F   14       10        stx    fifo_get                     *  E310 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E312 34   04       FIFOputa  pshs   b  E314 1F   89                 tfr    a,b  E316 8D   02                 bsr    FIFO_put  E318 35   84                 puls   b,pc                     *  E31A 34   16       FIFO_put  pshs   d,x  E31C 9E   16                 ldx    fifo_put  get consumer pointer  E31E E7   88 20              stb    fifo,x    store byte  E321 30   01                 leax   1,x       bump pointer  E323 BC   E07B               cmpx   fio_fsz   end of FIFO?  E326 26   03                 bne    10f                     *  E328 8E   0000               ldx    #0        reset pointer  E32B 9F   16       10        stx    fifo_put                     *  E32D DC   12                 ldd    fifo_cnt  E32F                         incd  E32F 104C                    fdb    $104c                               endm  E331 DD   12                 std    fifo_cnt  E333 35   96       99        puls   d,x,pcFIO Simulation Structure             20:14:13  Jul 01, 2024   Page   38IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E335               IO_han    seti   block     interrupts  E335 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E337               10        clri  E337 1C   AF                 andcc  #!(FF|IF)                               endm  E339 BE   0409               ldx    utask     get task control block address  E33C A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E33E 44                      lsra             isolate    command  E33F 44                      lsra  E340 44                      lsra                     **        lsra  E341 81   20                 cmpa   #MAX_S_NUM  E343 22   69                 bhi    bad_cmd                     *  E345 48                      lsla             --   word index on command  E346 34   10                 pshs   x  E348 8E   04A0               ldx    #dev_tab  E34B AE   02                 ldx    dev_type,x get handler table address  E34D 10AE 86                 ldy    a,x       get processor address  E350 35   10                 puls   x  E352 34   20                 pshs   y  E354 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E357 27   0A                 beq    05f       else it is target ponter  E359 10AF E4                 sty    0,s  E35C 108E 0000               ldy    #0  E360 10AF 0F                 sty    tsagin,x  reset pointer  E363 35   20       05        puls   y         change address  E365 4F                      clra                     *  E366 8E   E393               ldx    #IO_end   interrupt handler address  E369 34   10                 pshs   x  E36B BE   0409               ldx    utask     task pointer  E36E 10EF 88 15              sts    umark1,x  E372 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             20:14:13  Jul 01, 2024   Page   39IO         Command Handler                            E374 1E   03                 exg    d,u  E376 84   07                 anda   #%00000111 mask off address bits  E378 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E37A AD   A4                 jsr    0,y       perform operation & return status  E37C 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E37E BE   0409               ldx    utask     restore task pointer  E381 108C FFFF               cmpy   #$ffff  E385 26   09                 bne    20f                     * task is NOT done yet  E387 86   BA                 lda    #POLPRI  E389 A7   05                 sta    tsprir,x  at lower prio  E38B BD   E4BA               jsr    change  E38E 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E390 BD   E2AE     20        jsr    fio_response                     *                     * task is done                     *  E393               IO_end    seti   mask      interrupts  E393 1A   50                 orcc   #FF|IF                               endm  E395 BE   0409               ldx    utask     restore task control block address  E398 A7   0C                 sta    tstval,x  remember transaction value sent  E39A E7   09                 stb    tscmd,x   and command response  E39C 86   04                 lda    #TFREE    mark task "terminated & free"  E39E A7   04                 sta    tsstat,x  E3A0 86   FF                 lda    #$FF      disassociate from any terminal  E3A2 A7   0D                 sta    tsdev,x  E3A4 A7   0E                 sta    tsdev+1,x  E3A6 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E3A8 BD   E4C0     90        jsr    rsched    run other tasks >E3AB 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E3AE               bad_cmdFIO Simulation Structure             20:14:13  Jul 01, 2024   Page   40IO         Command Handler                            E3AE C6   81                 ldb    #E_BADCMD error code  E3B0 20   DE                 bra    20b                     *          rts          (bug in original code 240424)FIO Simulation Structure             20:14:13  Jul 01, 2024   Page   41Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3B2  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3B2 BE   E07D     10        ldx    fio_dsz  E3B5 30   1F                 leax   -1,x  E3B7 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3B9 27   03                 beq    99f       no - move on  E3BB BD   E22A               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3BE 3B            99        rti              return from interrupt                     *  E3BF 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3CA 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             20:14:13  Jul 01, 2024   Page   42Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3D7 34   36       int_all   pshs   d,x,y  E3D9 F6   0459               ldb    NUM_TSK  E3DC C0   02                 subb   #2  E3DE 34   04                 pshs   b  E3E0 BE   049C               ldx    tsktab  E3E3 30   89 01AE            leax   2*TSKSIZ,x                     *  E3E7 EC   61       10        ldd    1,s  E3E9 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3EC 26   0C                 bne    20f                     *  E3EE BC   0409               cmpx   utask     make sure I don't get blown away  E3F1 27   07                 beq    20f                     *  E3F3 34   16                 pshs   d,x  E3F5 BD   E5D5               jsr    xmtint    interrupt task  E3F8 35   16                 puls   d,x                     *  E3FA 30   89 00D7  20        leax   TSKSIZ,x  next task  E3FE 6A   E4                 dec    0,s       more tasks?  E400 26   E5                 bne    10b  E402 32   61                 leas   1,s                     *  E404 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             20:14:14  Jul 01, 2024   Page   43Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E406 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E40A                         seti  E40A 1A   50                 orcc   #FF|IF                               endm  E40C FE   0444               ldu    SI_Q_ptr  get current Q ptr  E40F 1183 040E               cmpu   #SI_Q     anything in Q?  E413 26   07                 bne    20f       yes - go process it                     *  E415 C6   D8                 ldb    #SIQPRI   wait for something to do  E417 BD   E5A0               jsr    sleep  E41A 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E41C E6   C2       20        ldb    0,-u      B = Interrupt #  E41E 34   04                 pshs   b  E420 EC   C3                 ldd    0,--u     A = Device #  E422 34   06                 pshs   d  E424 EC   C3                 ldd    0,--u     task ID  E426 34   06                 pshs   d         save registers  E428 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E42B E6   63                 ldb    3,s       set up to flush all input for this terminal  E42D                         clri   allow     interrupts  E42D 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E42F BD   E2CA               jsr    FIO_get   get access to FIO  E432 EC   E1                 ldd    0,s++     task ID  E434 DD   0A                 std    fio_cpu1  E436 EC   E1                 ldd    ,s++      terminal #  E438 DD   0D                 std    fio_cpu3  terminal  E43A E6   E0                 ldb    ,s+       interrupt #  E43C D7   0C                 stb    fio_cpu2  signal  E43E C6   07                 ldb    #R_INTRPT  E440 BD   E294               jsr    fio_msg   send interrupt message  E443 BD   E2DF               jsr    FIO_rel   release access to FIO  E446 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = task struct                     *   U= wzsock                     *   jsr send_SI                     *FIO Simulation Structure             20:14:14  Jul 01, 2024   Page   44Terminal   Interrupt Handling Task                    E448 34   76       send_SI   pshs   d,x,y,u   save registers  E44A EC   C8 26              ldd    wztype,u  E44D 85   02                 bita   #WFSPOC  E44F 27   1F                 beq    99f                     *  E451 FE   0444               ldu    SI_Q_ptr  get Q head  E454 1183 0444               cmpu   #SI_Q_ptr check for overflow  E458 24   0F                 bhs    90f       exit if so - sorry                     *  E45A EC   0A                 ldd    tsseq,x   task ID @ master side  E45C ED   C1                 std    0,u++  E45E EC   0D                 ldd    tsdev,x   wzsock#  E460 ED   C1                 std    0,u++     place value in Queue  E462 E6   61                 ldb    1,s       old B  E464 E7   C0                 stb    0,u+  E466 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E469 108E 040E     90        ldy    #SI_Q     wake up Queue server  E46D BD   E57C               jsr    wakeup  E470 35   F6       99        puls   d,x,y,u,pc return                     FIO Simulation Structure             20:14:14  Jul 01, 2024   Page   45History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E472 34   16       H_cpu     pshs   d,x  E474 BE   049A               ldx    hstptr    get history queue pointer  E477 96   00                 lda    cpu_fio  E479 A7   84                 sta    hst_cmd,x  E47B 96   01                 lda    cpu_fio1  E47D A7   01                 sta    hst_seq,x  E47F 96   04                 lda    cpu_fio3  E481 A7   02                 sta    hst_tty,x  E483 96   03                 lda    cpu_fio2  E485 A7   03                 sta    hst_val,x  E487 30   04                 leax   HRECSIZ,x  E489 8C   049A               cmpx   #hstptr   end of Queue?  E48C 25   03                 blo    10f  E48E 8E   045A               ldx    #hstbuf  E491 BF   049A     10        stx    hstptr  E494 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E496 34   16       H_fio     pshs   d,x  E498 BE   049A               ldx    hstptr    get history queue pointer  E49B 96   09                 lda    fio_cpu  E49D A7   84                 sta    hst_cmd,x  E49F 96   0A                 lda    fio_cpu1  E4A1 A7   01                 sta    hst_seq,x  E4A3 96   0D                 lda    fio_cpu3  E4A5 A7   02                 sta    hst_tty,x  E4A7 96   0C                 lda    fio_cpu2  E4A9 A7   03                 sta    hst_val,x  E4AB 30   04                 leax   HRECSIZ,x  E4AD 8C   049A               cmpx   #hstptr   end of Queue?  E4B0 25   03                 blo    10f  E4B2 8E   045A               ldx    #hstbuf  E4B5 BF   049A     10        stx    hstptr  E4B8 35   96                 puls   d,x,pcFIO Simulation Structure             20:14:14  Jul 01, 2024   Page   46Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4BA BE   0409     change    ldx    utask     point to task table entry >E4BD 17   006D               lbsr   putrun    put on ready list                     *  E4C0               rsched    seti   mask      interrupts  E4C0 1A   50                 orcc   #FF|IF                               endm  E4C2 BE   0409               ldx    utask     point to current task  E4C5 10EF 88 13              sts    umark0,x  save stack pointers  E4C9 BE   049C               ldx    tsktab    point to task table  E4CC 8D   23                 bsr    swtchu    switch users  E4CE 7F   040D               clr    idle      reset idle/running flag                     *  E4D1 7F   040C     rsche2    clr    chproc    reset change flag >E4D4 17   0025               lbsr   getjob    get a new task  E4D7 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4D9 86   7F       05        lda    #127      set higheset priority  E4DB B7   040B               sta    jobpri    set as current  E4DE                         clri   clear     interrupts  E4DE 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4E0 12                      nop  E4E1                         seti  E4E1 1A   50                 orcc   #FF|IF                               endm  E4E3 20   EC                 bra    rsche2    loop til find a ready one                     *  E4E5 F7   040B     rsche3    stb    jobpri    set new priority  E4E8 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             20:14:15  Jul 01, 2024   Page   47Scheduler  routines                                   E4EA BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4ED CC   0001               ldd    #1        return 1 to new task  E4F0 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4F1 35   20       swtchu    puls   y         get return address  E4F3 BF   0409               stx    utask     set up new running task  E4F6 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4FA 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             20:14:15  Jul 01, 2024   Page   48Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4FC 5F            getjob    clrb             clear      flag  E4FD BE   0403               ldx    runlst    point to head of list  E500 27   1F                 beq    getjo6    empty list?                     *  E502 A6   04       getjo1    lda    tsstat,x  get status byte  E504 81   01                 cmpa   #TRUN     is it in run state?  E506 26   1B                 bne    getjo8                     *  E508 5D                      tstb             first      in list?  E509 27   06                 beq    getjo2                     *  E50B EC   84                 ldd    tslink,x  remove from list  E50D ED   A4                 std    tslink,y  E50F 20   07                 bra    getjo4                     *  E511 10AE 84       getjo2    ldy    tslink,x  remove from list head  E514 10BF 0403               sty    runlst    set new head                     *  E518 E6   05       getjo4    ldb    tsprir,x  get priority  E51A 6F   84                 clr    tslink,x  zero out link  E51C 6F   01                 clr    tslink+1,x so not run list  E51E 86   FF                 lda    #$ff      set ne status  E520 39                      rts              return                         *  E521 4F            getjo6    clra             set        eq status  E522 39                      rts                     *  E523 1F   12       getjo8    tfr    x,y       save old pos  E525 AE   84                 ldx    tslink,x  follow link  E527 27   F8                 beq    getjo6                     *  E529 C6   01                 ldb    #1        set flag  E52B 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             20:14:15  Jul 01, 2024   Page   49Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E52D 34   01       putrun    pshs   cc        save status  E52F                         seti   mask      interrupts  E52F 1A   50                 orcc   #FF|IF                               endm  E531 10BE 0403               ldy    runlst    point to head  E535 26   0A                 bne    putru2  E537 BF   0403               stx    runlst    set new head                     *  E53A CC   0000     putru1    ldd    #0        set last link  E53D ED   84                 std    tslink,x  E53F 35   81                 puls   cc,pc     return                     *  E541 E6   05       putru2    ldb    tsprir,x  get priority  E543 E1   25                 cmpb   tsprir,y  look for correct prior slot  E545 2F   08                 ble    putru4                     *  E547 FC   0403               ldd    runlst  E54A BF   0403               stx    runlst    set new head  E54D 20   0F                 bra    putru5    link in rest                     *  E54F 1F   23       putru4    tfr    y,u       save last look  E551 10AE A4                 ldy    tslink,y  follow link  E554 27   0C                 beq    putru6                     *  E556 E1   25                 cmpb   tsprir,y  check priority  E558 2F   F5                 ble    putru4                     *  E55A EC   C4                 ldd    tslink,u  link into list here  E55C AF   C4                 stx    tslink,u                     *  E55E ED   84       putru5    std    tslink,x  E560 35   81                 puls   cc,pc     return                     *  E562 AF   C4       putru6    stx    tslink,u  E564 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             20:14:16  Jul 01, 2024   Page   50Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E566 86   01       makrdy    lda    #TRUN     set status  E568 A7   04                 sta    tsstat,x  E56A CC   0000               ldd    #0        clear events flag  E56D ED   06                 std    tsevnt,x  E56F 8D   BC                 bsr    putrun    put on ready list  E571 E6   05                 ldb    tsprir,x  get priority  E573 F1   040B               cmpb   jobpri    higher than current?  E576 2F   03                 ble    makrd6                     *  E578 7C   040C               inc    chproc    set change flag                     *  E57B 39            makrd6    rts              return    FIO Simulation Structure             20:14:16  Jul 01, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E57C 34   57       wakeup    pshs   cc,d,x,u  save registers  E57E                         seti   mask      interupts  E57E 1A   50                 orcc   #FF|IF                               endm  E580 CE   0405               ldu    #slplst  E583 AE   42                 ldx    tsslnk,u  point to sleep list  E585 27   0B                 beq    wakeu4                     *  E587 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E58A 27   08                 beq    wakeu5  E58C 33   84                 leau   0,x       mark this entry                     *  E58E AE   02       wakeu3    ldx    tsslnk,x  follow chain  E590 26   F5                 bne    wakeu2    end of list?                     *  E592 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E594 34   70       wakeu5    pshs   x,y,u     save registers  E596 EC   02                 ldd    tsslnk,x  remove from list  E598 ED   42                 std    tsslnk,u  E59A 8D   CA                 bsr    makrdy    put on ready list  E59C 35   70                 puls   u,x,y  E59E 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             20:14:16  Jul 01, 2024   Page   52Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E5A0 34   51       sleep     pshs   cc,x,u    save registers  E5A2 BE   0409               ldx    utask     point to task  E5A5 6D   08                 tst    tssgnl,x  any signals waiting?  E5A7 26   1F                 bne    sleep7                     *  E5A9                         seti   mask      ints  E5A9 1A   50                 orcc   #FF|IF                               endm  E5AB E7   05                 stb    tsprir,x  set priority  E5AD 10AF 06                 sty    tsevnt,x  set event  E5B0 86   02                 lda    #TSLEEP   set status  E5B2 A7   04                 sta    tsstat,x  E5B4 FC   0407               ldd    slplst+tsslnk get head of list  E5B7 ED   02                 std    tsslnk,x  set new link  E5B9 BF   0407               stx    slplst+tsslnk set new head  E5BC 17   FF01               lbsr   rsched    reschedule cpu                       E5BF BE   0409     20        ldx    utask     get task entry  E5C2 6D   08                 tst    tssgnl,x  any signals waiting?  E5C4 26   02                 bne    sleep7                     *  E5C6 35   D1                 puls   cc,x,u,pc return                     *  E5C8 BE   0409     sleep7    ldx    utask     reset signal  E5CB 6F   08                 clr    tssgnl,x  E5CD EC   88 15              ldd    umark1,x  stack reset point  E5D0 35   51                 puls   cc,x,u    reset cc and registers  E5D2 1F   04                 tfr    d,s       change stacks  E5D4 39                      rts              returnFIO Simulation Structure             20:14:16  Jul 01, 2024   Page   53Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5D5 34   76       xmtint    pshs   d,x,y,u   save registers  E5D7 A6   04                 lda    tsstat,x  get task state  E5D9 81   01                 cmpa   #TRUN     running?  E5DB 26   06                 bne    10f       no - try something else                     *  E5DD 86   01                 lda    #1        set signal  E5DF A7   08                 sta    tssgnl,x  E5E1 20   0E                 bra    99f       exit                     *  E5E3 81   02       10        cmpa   #TSLEEP   task sleeping?  E5E5 26   0A                 bne    99f       no - can't send interrupt                     *  E5E7 86   01                 lda    #1        set signal  E5E9 A7   08                 sta    tssgnl,x  E5EB 10AE 06                 ldy    tsevnt,x  wake task up >E5EE 17   FF8B               lbsr   wakeup                     *  E5F1 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             20:14:16  Jul 01, 2024   Page   54Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5F3               DEV_SOCK  E5F3 E3AE                    fdb    bad_cmd   0  E5F5 E6F5                    fdb    skopen    S_OPEN    1 open socket  E5F7 E795                    fdb    skclos    S_CLOSE   2 close socket  E5F9 E9B6                    fdb    skreqwr   S_RQWR    3 request write to socket  E5FB E9FD                    fdb    sksend    S_SEND    4 write data to socket  E5FD E926                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5FF E973                    fdb    skrecv    S_RECV    6 read data from socket  E601 E795                    fdb    skintrp   S_INTRPT  7 interrupt socket  E603 E7E2                    fdb    skconn    S_CONNECT 8 connect socket  E605 E878                    fdb    skbind    S_BIND    9 bind socket  E607 E8BD                    fdb    sklist    S_LISTEN  10 listen on socket  E609 E8EF                    fdb    skacpt    S_ACCEPT  11 accept connection  E60B ED84                    fdb    skdisc    S_DISCON  12 disconnect socket  E60D ED84                    fdb    sksmac    S_SNDMAC  13 send mac  E60F ED84                    fdb    skskep    S_SNDKEP  14 send keep alive  E611 ECC0                    fdb    skspcl    S_SPCL    15 special command  E613 EA3F                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E615 EAB6                    fdb    skurrd    S_RREAD   17 read data readfrom  E617 EAE4                    fdb    skurwt    S_WRQSTO  18 request write sendto  E619 EB89                    fdb    skusnt    S_WSNDTO  19 write data sendto  E61B EB33                    fdb    skusnm    S_WSNDTM  20 write data send more  E61D E653                    fdb    sknone    21  E61F E653                    fdb    sknone    22  E621 E653                    fdb    sknone    23  E623 EC56                    fdb    sknbsr    S_RQSBLK  24 netblock req send ext block  E625 EC90                    fdb    sknbsd    S_SNDBLK  25 netblock send ext block  E627 EBC3                    fdb    sknbrr    S_RQRBLK  26 netblock req read ext block  E629 EC27                    fdb    sknbrd    S_RDRBLK  27 netblock read ext block  E62B E653                    fdb    sknone    28  E62D E653                    fdb    sknone    29  E62F F46D                    fdb    netboot   30 network boot  E631 F455                    fdb    memp2ff   31 copy memory page to fifo                     *                     * check nwp_devtab.h !!                     *  E633 E6AD                    fdb    skinthan  16 socket interrupt handler  E635 E639                    fdb    skinit    17 socket initialization  E637 E6AA                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectivelyFIO Simulation Structure             20:14:17  Jul 01, 2024   Page   55wz socket interface routines                                             * cleared to zero, with exception of the enumeration byte                     *                                    0200  BUFSIZ    equ    512       fifo and system buffer size                                          *                     * do everything to init the system                     *               E639  skinit    equ    *  E639 BD   ED8B               jsr    spinit    set SPI  E63C C6   82                 ldb    #%10000010 software reset + force ARP  E63E BD   EE5B               jsr    PCRMR  E641 BD   EE4C     01        jsr    GCRMR  E644 5D                      tstb  E645 2B   FA                 bmi    01b                     *  E647 C6   78                 ldb    #%01111000 power up  E649 BD   F039               jsr    PCRPHY    set the PHY part  E64C CC   8000               ldd    #32768  E64F FD   0457               std    wzanyp    set value for Source port  E652 39                      rts                                          *                     * sknone, return error, not implemented                     *  E653 C6   81       sknone    ldb    #E_BADCMD  E655 39                      rts                                          *                     * check if ROM locations are preset, if not skip this here                     * else setup device with provided values                     *  E656 108E E000     skdvini   ldy    #wzifma   where mac address is to be found  E65A EC   A1       03        ldd    0,y++  E65C 1083 FFFF               cmpd   #$ffff    not set  E660 26   07                 bne    02f  E662 108C E012               cmpy   #wzifga+4 past area  E666 25   F2                 blo    03b                     * ROM not initialized, do nothing  E668 39                      rts                                          *                     * values present, setup device                     *  E669 34   66       02        pshs   d,y,u  E66B DE   1A                 ldu    fifo_us1  E66D 108E E006               ldy    #wzifip   source IP  E671 EC   A1                 ldd    0,y++  E673 ED   C1                 std    0,u++  E675 EC   A1                 ldd    0,y++  E677 ED   C1                 std    0,u++  E679 108E E00A               ldy    #wzifnm   netmaskFIO Simulation Structure             20:14:17  Jul 01, 2024   Page   56wz socket interface routines                          E67D EC   A1                 ldd    0,y++  E67F ED   C1                 std    0,u++  E681 EC   A1                 ldd    0,y++  E683 ED   C1                 std    0,u++  E685 108E E00E               ldy    #wzifga   gateway ip  E689 EC   A1                 ldd    0,y++  E68B ED   C1                 std    0,u++  E68D EC   A1                 ldd    0,y++  E68F ED   C1                 std    0,u++  E691 108E E000               ldy    #wzifma   mac address  E695 EC   A1                 ldd    0,y++  E697 ED   C1                 std    0,u++  E699 EC   A1                 ldd    0,y++  E69B ED   C1                 std    0,u++  E69D EC   A1                 ldd    0,y++  E69F ED   C1                 std    0,u++                     *  E6A1 C6   FF                 ldb    #$ff      set active  E6A3 E7   C4                 stb    0,u  E6A5 BD   ECEF               jsr    wzwdev    init device with settings  E6A8 35   E6                 puls   d,y,u,pc                                          *                     * test if device is present                     *  E6AA 1A   01       sktest    sec              yes  E6AC 39                      rts                                          *                     * skinthan, fromddevice table                     *               E6AD  skinthan  equ    *  E6AD 39                      rts                                          *                     * device signal handle, from master                     *               E6AE  sdev_sig  equ    *  E6AE C6   07                 ldb    #R_INTRPT we saw it  E6B0 39                      rts                                          *                     * get a new source port                     *  E6B1 FC   0457     sknewp    ldd    wzanyp    else create one  E6B4                         incd  E6B4 104C                    fdb    $104c                               endm  E6B6 1083 FFF0               cmpd   #$FFF0  E6BA 25   03                 blo    03f  E6BC CC   8000               ldd    #$8000  E6BF FD   0457     03        std    wzanypFIO Simulation Structure             20:14:17  Jul 01, 2024   Page   57wz socket interface routines                          E6C2 39                      rts                                                               *                     * check if W5500 is active                     * wzdevt, device test, return Z if running, NZ if not                     *  E6C3 34   22       wzdevt    pshs   a,y  E6C5 109E 1A                 ldy    fifo_us1  device info  E6C8 A6   A8 12              lda    wzdsta,y  E6CB 81   FF                 cmpa   #$ff      open  E6CD 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info, set E register                     *  E6CF A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E6D1                         trfr   A,E  E6D1 1F                      fcb    $1f  E6D2 8E                      fcb    A<<4|E                               endm  E6D3 6F   47                 clr    wzerr,u   init result  E6D5 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E6D6 34   06       skctcp    pshs   d  E6D8 EC   C8 26              ldd    wztype,u  SOCK_STREAM  E6DB C1   01                 cmpb   #SK_STRM  is TCP  E6DD 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E6DF 34   06       skcudp    pshs   d  E6E1 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6E4 C1   02                 cmpb   #SK_DGRM  is UDP  E6E6 35   86                 puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E6E8 34   06       skcraw    pshs   d  E6EA EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6ED C1   03                 cmpb   #SK_MRAW  is RAW socketFIO Simulation Structure             20:14:18  Jul 01, 2024   Page   58wz socket interface routines                          E6EF 27   02                 beq    01f  E6F1 C1   04                 cmpb   #SK_IRAW  E6F3 35   86       01        puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E6F5  skopen    equ    * >E6F5 BD   E6CF               jsr    skfres                     *                     * check if DEVICE is active                     * >E6F8 BD   E6C3               jsr    wzdevt  E6FB 27   06                 beq    11f  E6FD BD   E7B0               jsr    skclin    NO, close internal and don't start >E700 16   0064     04        lbra   skoper1                     *                     * retry, we do all things                     *  E703 A6   42       11        lda    wzfsta,u  check if allocated by OS  E705 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  E707 6F   43                 clr    wzflg,u   erase flags  E709 6F   41                 clr    wzdctr,u  init counter  E70B EC   C8 24              ldd    wzfaml,u  E70E C1   02                 cmpb   #AF_INET  E710 26   EE                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E712 EC   C8 26              ldd    wztype,u  E715 C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E717 27   26                 beq    01f  E719 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E71B 27   1E                 beq    21f  E71D C1   03                 cmpb   #SK_MRAW  SOCK_RAW  E71F 27   16                 beq    41f  E721 C1   04                 cmpb   #SK_IRAW  IP_RAW  E723 26   46                 bne    skoper2                     *                     * raw socket, set protocol register first (only socket 0!!)                     * UDP and TCP are handled in a different way                     *  E725 EC   C8 28              ldd    wzprot,u  what is the protocol option?  E728 C1   06                 cmpb   #SP_TCP   not allowed  E72A 27   3F                 beq    skoper2  E72C C1   11                 cmpb   #SP_UDP   not allowed  E72E 27   3B                 beq    skoper2  E730 BD   F19C               jsr    PSRPROT   set protocol registerFIO Simulation Structure             20:14:18  Jul 01, 2024   Page   59wz socket interface routines                                             *  E733 C6   03                 ldb    #%00000011 IPRAW  E735 20   0A                 bra    07f                     * nacraw  E737 C6   04       41        ldb    #%00000100 MACRAW  E739 20   06                 bra    07f                     * dgram  E73B C6   02       21        ldb    #%00000010 UDP  E73D 20   02                 bra    07f                     * TCP socket  E73F C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E741 BD   F066     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E744 C6   01                 ldb    #WCOPEN   open the device  E746 E7   44                 stb    wzcmnd,u  copy command  E748 BD   F084               jsr    PSRCR  E74B 108E 0000               ldy    #0        nopoll                     *                     * interrupts not expected                     *               E74F  skowfo    equ    *  E74F BD   F0B8     21        jsr    GSRSR     get status  E752 E7   45                 stb    wzstat,u  E754 C1   00                 cmpb   #WSCLSD   not closed?  E756 26   0B                 bne    22f                     *  E758 6A   41                 dec    wzdctr,u  delay counter  E75A 27   0F                 beq    skoper2  E75C 108E E74F               ldy    #skowfo  E760 7E   E84F               jmp    polext    switch tasks                     *  E763 4F            22        clra  E764 C6   01                 ldb    #R_OPEN   response  E766 39            99        rts                     *  E767 86   01       skoper1   lda    #1        device not initialized  E769 20   02                 bra    12f  E76B 86   02       skoper2   lda    #2        type error  E76D C6   C0       12        ldb    #E_SOCKET  E76F 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E771 34   10       num2bt    pshs   x  E773 8E   E78C               ldx    #bittabFIO Simulation Structure             20:14:18  Jul 01, 2024   Page   60wz socket interface routines                          E776 3A                      abx  E777 E6   84                 ldb    0,x  E779 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E77B 34   10       bt2num    pshs   x  E77D 8E   E78C               ldx    #bittab  E780 6F   E2                 clr    0,-s  E782 E1   80       02        cmpb   0,x+  E784 27   04                 beq    01f  E786 6C   E4                 inc    0,s  E788 20   F8                 bra    02b  E78A 35   94       01        puls   b,x,pc                                          * table  E78C 00            bittab    fcb    0  E78D 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E791 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                                               ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E795  skclos    equ    *               E795  skintrp   equ    *         interrupt!  E795 BD   E6CF               jsr    skfres  E798 C6   08                 ldb    #WCDISC  E79A E7   44                 stb    wzcmnd,u  E79C BD   F084               jsr    PSRCR     send disconnect                     *  E79F 8D   0F                 bsr    skclin  E7A1                         clrd  E7A1 104F                    fdb    $104f                               endm  E7A3 ED   C8 24              std    wzfaml,u  E7A6 ED   C8 26              std    wztype,u  E7A9 ED   C8 28              std    wzprot,u                     *  E7AC 4F                      clra  E7AD C6   02                 ldb    #R_CLOSE  response  E7AF 39                      rts                                          *                     * wzclin, close interal                     *  E7B0 34   06       skclin    pshs   d  E7B2 C6   10                 ldb    #WCCLOS   do closeFIO Simulation Structure             20:14:19  Jul 01, 2024   Page   61wz socket interface routines                          E7B4 E7   44                 stb    wzcmnd,u  E7B6 BD   F084               jsr    PSRCR                     *                     * erase registers in device                     *  E7B9 CC   0000               ldd    #0  E7BC BD   F0D6               jsr    PSRPORT   source port                     *  E7BF A6   42                 lda    wzfsta,u  E7C1 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E7C3 A7   42                 sta    wzfsta,u  E7C5 CC   0000               ldd    #0  E7C8 ED   48                 std    wzxfer,u  clear remaining size                     *  E7CA BD   F0B8     91        jsr    GSRSR  E7CD E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E7CF CC   0000               ldd    #0  E7D2 ED   C8 10              std    wzsprt,u  erase old info  E7D5 ED   C8 14              std    wzipad,u  E7D8 ED   C8 16              std    wzipad+2,u  E7DB ED   C8 12              std    wzdprt,u  E7DE E7   43                 stb    wzflg,u   clear flags                     *  E7E0 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E7E2  skconn    equ    *  E7E2 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E7E5 BD   E6C3               jsr    wzdevt  E7E8 27   06                 beq    01f >E7EA BD   E795               jsr    skclos    NO, don't start >E7ED 16   007A     02        lbra   skcner4  E7F0 BD   E6D6     01        jsr    skctcp    not in tcp, illegal  E7F3 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E7F5 BD   F0B8     11        jsr    GSRSR     status  E7F8 E7   45                 stb    wzstat,u  check if properly setup  E7FA C1   13                 cmpb   #WSINIT   SHOULD BE >E7FC 1026 005F               lbne   skcner6                     *FIO Simulation Structure             20:14:19  Jul 01, 2024   Page   62wz socket interface routines                                             * check the info from the connect call                     *  E800 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E803                         ordx   wzipad+2,IU  E803 10AA                    fdb    $10aa  E805                         doindx wzipad+2,IU  E805 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E807 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E809 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E80C                         incd  E80C 104C                    fdb    $104c                               endm  E80E 26   07                 bne    01f  E810 EC   C8 16              ldd    wzipad+2,u  E813                         incd  E813 104C                    fdb    $104c                               endm  E815 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E817 EC   C8 12    01        ldd    wzdprt,u  check destination port  E81A 27   4A                 beq    skcner5   is not set, error                     *  E81C BD   F160               jsr    PSRDPOR   set destination port  E81F 31   C8 14              leay   wzipad,u  load socket  E822 BD   F13A               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E825 BD   E6B1               jsr    sknewp    get new  E828 ED   C8 10              std    wzsprt,u  tell us what you took  E82B BD   F0D6               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E82E C6   04                 ldb    #WCCONN  E830 E7   44                 stb    wzcmnd,u  E832 BD   F084               jsr    PSRCR     do connect                     *                     *                     *  E835 BD   E6CF     conlb1    jsr    skfres  E838 BD   F0B8               jsr    GSRSR     update status  E83B E7   45                 stb    wzstat,u  E83D C1   17                 cmpb   #WSESTB  E83F 27   0A                 beq    90f  E841 C1   00                 cmpb   #WSCLSD  E843 27   16                 beq    skcner2FIO Simulation Structure             20:14:19  Jul 01, 2024   Page   63wz socket interface routines                          E845 108E E835               ldy    #conlb1  E849 20   04                 bra    polext                     *  E84B 4F            90        clra  E84C C6   08                 ldb    #R_CONNECT  E84E 39            99        rts                                          *                     * polexit, Y=where to return                     *  E84F 10AF 0F       polext    sty    tsagin,x  here to restart  E852 C6   BA                 ldb    #POLPRI  E854 E7   05                 stb    tsprir,x  E856 108E FFFF               ldy    #$ffFF  E85A 39                      rts                       E85B C6   0C       skcner2   ldb    #R_DISCON  E85D 20   EF                 bra    99b                       E85F BD   E7B0     skcner6   jsr    skclin    reset open  E862 86   0F                 lda    #15       not properly setup  E864 20   0E                 bra    09f  E866 86   0E       skcner5   lda    #14       destination port not set  E868 20   0A                 bra    09f  E86A 86   0A       skcner4   lda    #10       device not initialized  E86C 20   06                 bra    09f  E86E 86   0B       skcner1   lda    #11       IP address invalid  E870 20   02                 bra    09f  E872 86   0D       skcner3   lda    #13  E874 C6   C0       09        ldb    #E_SOCKET  E876 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E878  skbind    equ    *  E878 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E87B BD   E6C3               jsr    wzdevt  E87E 1026 00EC               lbne   rdrqer1  E882 BD   E6D6               jsr    skctcp    check TCP  E885 27   12                 beq    01f  E887 BD   E6DF               jsr    skcudp    check UDP >E88A 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is forFIO Simulation Structure             20:14:19  Jul 01, 2024   Page   64wz socket interface routines                                             * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E88E BD   F0B8               jsr    GSRSR     status  E891 E7   45                 stb    wzstat,u  E893 C1   22                 cmpb   #WSUDP    check  E895 27   0D                 beq    03f  E897 20   07                 bra    04f                       E899 BD   F0B8     01        jsr    GSRSR     status  E89C E7   45                 stb    wzstat,u  E89E C1   13                 cmpb   #WSINIT   should be >E8A0 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E8A4 BD   E6B1     03        jsr    sknewp  E8A7 ED   C8 12              std    wzdprt,u  E8AA BD   F160               jsr    PSRDPOR   destination port  E8AD EC   C8 10              ldd    wzsprt,u  E8B0 BD   F0D6               jsr    PSRPORT   source port                     *  E8B3 31   C8 14              leay   wzipad,u  E8B6 BD   F13A               jsr    PSRDIP    source IP                     *  E8B9 4F                      clra  E8BA C6   09                 ldb    #R_BIND  E8BC 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8BD  sklist    equ    *  E8BD BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8C0 BD   E6C3               jsr    wzdevt  E8C3 1026 00A7     02        lbne   rdrqer1  E8C7 BD   E6D6               jsr    skctcp  E8CA 26   F7                 bne    02b                     *                     * go on                     *                     *  E8CC BD   F0B8               jsr    GSRSR     statusFIO Simulation Structure             20:14:20  Jul 01, 2024   Page   65wz socket interface routines                          E8CF E7   45                 stb    wzstat,u                     *  E8D1 C1   00                 cmpb   #WSCLSD   closed?  E8D3 27   0F                 beq    80f  E8D5 C1   13                 cmpb   #WSINIT   opened  E8D7 26   0F                 bne    90f                     *  E8D9 C6   02                 ldb    #WCLIST  E8DB E7   44                 stb    wzcmnd,u  E8DD BD   F084               jsr    PSRCR                     *  E8E0 4F                      clra  E8E1 C6   0A                 ldb    #R_LISTEN  E8E3 39                      rts                                          *  E8E4 4F            80        clra  E8E5 C6   02                 ldb    #R_CLOSE  E8E7 39                      rts                     *  E8E8 108E E8BD     90        ldy    #sklist  E8EC 7E   E84F               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8EF  skacpt    equ    *  E8EF BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8F2 BD   E6C3               jsr    wzdevt >E8F5 1026 0075     02        lbne   rdrqer1  E8F9 BD   E6D6               jsr    skctcp  E8FC 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E8FE BD   F0B8               jsr    GSRSR     status  E901 E7   45                 stb    wzstat,u  E903 C1   17                 cmpb   #WSESTB   connected  E905 26   10                 bne    01f  E907 BD   F151               jsr    GSRDPOR   fill in peer port  E90A ED   C8 12              std    wzdprt,u  E90D 31   C8 14              leay   wzipad,u  E910 BD   F123               jsr    GSRDIP                     *  E913 4F                      clraFIO Simulation Structure             20:14:20  Jul 01, 2024   Page   66wz socket interface routines                          E914 C6   0B                 ldb    #R_ACCEPT  E916 39                      rts                     *  E917 C1   00       01        cmpb   #WSCLSD  E919 26   04                 bne    02f  E91B 4F                      clra  E91C C6   02                 ldb    #R_CLOSE  E91E 39                      rts                     *  E91F 108E E8EF     02        ldy    #skacpt  E923 7E   E84F               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E926  skreqrd   equ    *  E926 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E929 BD   E6C3               jsr    wzdevt >E92C 1026 003E     02        lbne   rdrqer1  E930 BD   E6D6               jsr    skctcp    check TCP  E933 26   F7                 bne    02b                     *                     * go on                     *                     *  E935 BD   F0B8               jsr    GSRSR  E938 E7   45                 stb    wzstat,u  update status  E93A C1   00                 cmpb   #WSCLSD  E93C 27   27                 beq    60f  E93E BD   F26F               jsr    GSRRXRS   data available?  E941 ED   48                 std    wzxfer,u  E943 26   1C                 bne    70f                     *  E945 A6   C8 26              lda    wztype,u  check flags  E948 85   01                 bita   #WFNBLK   non block  E94A 26   11                 bne    75f                     *  E94C E6   45                 ldb    wzstat,u  E94E C1   1C                 cmpb   #WSCLWT  E950 27   13                 beq    60f  E952 C1   17       17        cmpb   #WSESTB   still active  E954 27   00                 beq    20f                                          *FIO Simulation Structure             20:14:20  Jul 01, 2024   Page   67wz socket interface routines                          E956 108E E926     20        ldy    #skreqrd  E95A 7E   E84F               jmp    polext                                          *************************  E95D 4F            75        clra  E95E C6   15                 ldb    #R_RQRDNB tell no data  E960 39                      rts                                          * data present  E961 4F            70        clra  E962 C6   05                 ldb    #R_RQRD  E964 39                      rts                                          * close socket and return  E965 C6   06       60        ldb    #PIPES  E967 BD   E448               jsr    send_SI   send to main CPU  E96A 4F                      clra  E96B C6   02                 ldb    #R_CLOSE  E96D 39                      rts                                            E96E 86   82       rdrqer1   lda    #130  E970 C6   C0                 ldb    #E_SOCKET  E972 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock, X=task struct                     *               E973  skrecv    equ    *  E973 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E976 BD   E6C3               jsr    wzdevt >E979 1026 FFF1               lbne   rdrqer1  E97D BD   E6D6     02        jsr    skctcp  E980 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E982 BD   F26F               jsr    GSRRXRS   received size                     * D total aviable data  E985 108E 0020               ldy    #fifo     target  E989 BD   F33F               jsr    RDSK2FB   transfer datat to fifo  E98C ED   48                 std    wzxfer,u  save it                     *                     * here check if PROT_XLTEOF is set                     *  E98E 6D   C8 28              tst    wzprot,u  PROT_XLTEOL is $8000FIO Simulation Structure             20:14:21  Jul 01, 2024   Page   68wz socket interface routines                          E991 2A   18                 bpl    01f                     * do EOL conversion in fifo buffer  E993 34   36                 pshs   d,x,y  E995 1F   01                 tfr    d,x       count  E997 108E 0020               ldy    #fifo  E99B A6   A4       03        lda    0,y  E99D 81   0A                 cmpa   #LF       is line feed  E99F 26   02                 bne    02f  E9A1 86   0D                 lda    #CR       make it Return  E9A3 A7   A0       02        sta    0,y+  E9A5 30   1F                 leax   -1,x      count  E9A7 26   F2                 bne    03b  E9A9 35   36                 puls   d,x,y                     *  E9AB C6   40       01        ldb    #WCRECV  E9AD E7   44                 stb    wzcmnd,u  E9AF BD   F084               jsr    PSRCR     tell sender we took it                       E9B2 C6   06                 ldb    #R_READ   tell data in fifo  E9B4 4F                      clra  E9B5 39                      rts                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9B6  skreqwr   equ    *  E9B6 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9B9 BD   E6C3               jsr    wzdevt >E9BC 1026 FFAE     02        lbne   rdrqer1  E9C0 BD   E6D6               jsr    skctcp  E9C3 26   F7                 bne    02b                     *                     * go on                     *                     *  E9C5 BD   F0B8               jsr    GSRSR  E9C8 E7   45                 stb    wzstat,u  update status  E9CA C1   00                 cmpb   #WSCLSD  E9CC 27   12                 beq    30f  E9CE BD   F223               jsr    GSRTXFR   free size (remaining)  E9D1 10A3 4A                 cmpd   wzrqln,u  would it fit  E9D4 24   11                 bhs    70f                     *  E9D6 E6   45       10        ldb    wzstat,u  E9D8 C1   1C                 cmpb   #WSCLWTFIO Simulation Structure             20:14:21  Jul 01, 2024   Page   69wz socket interface routines                          E9DA 27   04                 beq    30f  E9DC C1   17                 cmpb   #WSESTB  E9DE 27   16                 beq    20f                     * connection broken?  E9E0 CC   0000     30        ldd    #0  E9E3 ED   48                 std    wzxfer,u  E9E5 20   06                 bra    60f                     * data space is enough  E9E7 4F            70        clra  E9E8 C6   03                 ldb    #R_RQWR  E9EA 39                      rts                                          * data space exhausted, would block  E9EB 4F            72        clra                     **        ldb     #R_RQWRWB  E9EC 39                      rts                                          * close socket and return  E9ED C6   06       60        ldb    #PIPES  E9EF BD   E448               jsr    send_SI   send to main CPU  E9F2 4F                      clra  E9F3 C6   02                 ldb    #R_CLOSE  E9F5 39                      rts                                          *  E9F6 108E E9B6     20        ldy    #skreqwr  E9FA 7E   E84F               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9FD  sksend    equ    *  E9FD BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA00 BD   E6C3               jsr    wzdevt  EA03 1026 FF67     02        lbne   rdrqer1  EA07 BD   E6D6               jsr    skctcp  EA0A 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *                     *        jsr     GSRTXFR         free size (remaining)  EA0C EC   4A                 ldd    wzrqln,u  data to xfer                     * D = total available spaceFIO Simulation Structure             20:14:21  Jul 01, 2024   Page   70wz socket interface routines                          EA0E 6D   C8 28              tst    wzprot,u  check if PROT_XLTEOL is set  EA11 2A   18                 bpl    01f                     *  do EOL conversion in fifo buffer  EA13 34   36                 pshs   d,x,y  EA15 1F   01                 tfr    d,x       count  EA17 108E 0020               ldy    #fifo  EA1B A6   A4       03        lda    0,y  EA1D 81   0D                 cmpa   #CR       Return?  EA1F 26   02                 bne    02f  EA21 86   0A                 lda    #LF       make it Line feed  EA23 A7   A0       02        sta    0,y+  EA25 30   1F                 leax   -1,x      count  EA27 26   F2                 bne    03b  EA29 35   36                 puls   d,x,y                     *  EA2B 108E 0020     01        ldy    #fifo     target  EA2F BD   F38D               jsr    WRFB2SK   transfer from fifo to socket  EA32 ED   48                 std    wzxfer,u  save it  EA34 C6   20                 ldb    #WCSEND  EA36 E7   44                 stb    wzcmnd,u  EA38 BD   F084               jsr    PSRCR     tell sender it is coming                       EA3B C6   04                 ldb    #R_WRITE  tell data in fifo  EA3D 4F                      clra  EA3E 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA3F  skurrdf   equ    *  EA3F BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA42 BD   E6C3               jsr    wzdevt  EA45 1026 FF25     02        lbne   rdrqer1  EA49 BD   E6DF               jsr    skcudp  EA4C 27   05                 beq    03f  EA4E BD   E6E8               jsr    skcraw  EA51 26   F2                 bne    02b  EA53               03                     *                     * go on                     *                     *  EA53 EC   C8 20              ldd    wzurms,u  check remaining size  EA56 26   4B                 bne    84f                     *FIO Simulation Structure             20:14:22  Jul 01, 2024   Page   71wz socket interface routines                                             * no  packet data present, wait for it                     *  EA58 BD   F0B8               jsr    GSRSR  EA5B E7   45                 stb    wzstat,u  update status  EA5D C1   00                 cmpb   #WSCLSD  EA5F 27   46                 beq    60f  EA61 BD   F26F               jsr    GSRRXRS   data available?  EA64 ED   7E                 std    -2,s      test D  EA66 26   19                 bne    22f       keep waiting                     * no data yet, check socket state  EA68 E6   45                 ldb    wzstat,u  EA6A C1   1C                 cmpb   #WSCLWT  EA6C 27   39                 beq    60f  EA6E C1   22                 cmpb   #WSUDP    still active  EA70 27   08                 beq    20f  EA72 C1   32                 cmpb   #WSIRAW  EA74 27   04                 beq    20f  EA76 C1   42                 cmpb   #WSMRAW  EA78 27   00                 beq    20f                     *  EA7A 108E EA3F     20        ldy    #skurrdf  EA7E 7E   E84F               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurms                     *  EA81 31   C8 1A    22        leay   wzuipa,u  EA84 CC   0008               ldd    #8        size of header  EA87 BD   EDE3               jsr    bmread    copy data                     *                     * move pointer                     *  EA8A BD   F286               jsr    GSRRXRP  EA8D C3   0008               addd   #8  EA90 BD   F295               jsr    PSRRXRP   update pointer  EA93 C6   40                 ldb    #WCRECV  EA95 E7   44                 stb    wzcmnd,u  process move  EA97 BD   F084               jsr    PSRCR                     *  EA9A EC   C8 20              ldd    wzurms,u  EA9D 1083 05C0               cmpd   #MAX_UDP  max size  EAA1 22   0D                 bhi    78f                     *  EAA3 4F            84        clra  EAA4 C6   21                 ldb    #R_RDFRM  EAA6 39                      rts                                          * close socket and return  EAA7 C6   06       60        ldb    #PIPES  EAA9 BD   E448               jsr    send_SI   send to main CPU  EAAC 4F                      clra  EAAD C6   02                 ldb    #R_CLOSE  EAAF 39                      rtsFIO Simulation Structure             20:14:22  Jul 01, 2024   Page   72wz socket interface routines                                                                  *  EAB0 BD   E7B0     78        jsr    skclin    close  EAB3 C6   C0                 ldb    #E_SOCKET  EAB5 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EAB6  skurrd    equ    *  EAB6 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAB9 BD   E6C3               jsr    wzdevt  EABC 1026 FEAE     02        lbne   rdrqer1  EAC0 BD   E6DF               jsr    skcudp  EAC3 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  EAC5 EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  EAC8 108E 0020               ldy    #fifo     target  EACC BD   F33F               jsr    RDSK2FB   transfer data  EACF 34   06                 pshs   d         xferred count  EAD1 EC   C8 20              ldd    wzurms,u  update  EAD4 A3   E1                 subd   0,s++  EAD6 ED   C8 20              std    wzurms,u  new remaining                     *  EAD9 C6   40       01        ldb    #WCRECV  EADB E7   44                 stb    wzcmnd,u  set processed  EADD BD   F084               jsr    PSRCR                     *  EAE0 4F                      clra  EAE1 C6   22                 ldb    #R_RRDFD  EAE3 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EAE4  skurwt    equ    *FIO Simulation Structure             20:14:22  Jul 01, 2024   Page   73wz socket interface routines                          EAE4 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAE7 BD   E6C3               jsr    wzdevt  EAEA 1026 FE80     02        lbne   rdrqer1  EAEE BD   E6DF               jsr    skcudp  EAF1 27   05                 beq    03f  EAF3 BD   E6E8               jsr    skcraw  EAF6 26   F2                 bne    02b  EAF8               03                     *                     * go on                     *                     *  EAF8 EC   C8 12              ldd    wzdprt,u  check illegal port  EAFB 1027 0084               lbeq   78f                     *  EAFF EC   C8 14              ldd    wzipad,u  EB02                         ordx   wzipad+2,IU  EB02 10AA                    fdb    $10aa  EB04                         doindx wzipad+2,IU  EB04 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >EB06 1027 0079               lbeq   78f                     * set network registers  EB0A EC   C8 12              ldd    wzdprt,u  EB0D BD   F160               jsr    PSRDPOR                       EB10 31   C8 14              leay   wzipad,u  EB13 BD   F13A               jsr    PSRDIP  EB16 EC   C8 10              ldd    wzsprt,u  EB19 26   11                 bne    04f                     *  EB1B EC   C8 10              ldd    wzsprt,u  already set?  EB1E 26   09                 bne    16f  EB20 BD   E6B1               jsr    sknewp    get new source port  EB23 ED   C8 10              std    wzsprt,u  EB26 ED   C8 1E              std    wzuprt,u  set also return port  EB29 BD   F0D6     16        jsr    PSRPORT                     *  EB2C 108E EB33     04        ldy    #skuwr2   do remainder  EB30 7E   E84F               jmp    polext                                          *                     * after intial setup. loop here                     *               EB33  skusnm    equ    *  EB33 BD   E6CF     skuwr2    jsr    skfres    set socket base  EB36 BD   E6C3               jsr    wzdevt    devie active >EB39 1026 FFAD               lbne   02b       noFIO Simulation Structure             20:14:22  Jul 01, 2024   Page   74wz socket interface routines                          EB3D BD   E6DF               jsr    skcudp    check open method  EB40 26   A8                 bne    02b                     *  EB42 BD   F0B8               jsr    GSRSR  EB45 E7   45                 stb    wzstat,u  update status  EB47 C1   00                 cmpb   #WSCLSD   closed  EB49 27   2F                 beq    60f  EB4B BD   F223               jsr    GSRTXFR   free size  EB4E 10A3 C8 20              cmpd   wzurms,u  EB52 24   19                 bhs    10f                     * no space yet  EB54 E6   45                 ldb    wzstat,u  EB56 C1   1C                 cmpb   #WSCLWT   is closing  EB58 27   20                 beq    60f  EB5A C1   22                 cmpb   #WSUDP  EB5C 27   08                 beq    20f  EB5E C1   32                 cmpb   #WSIRAW   IPRAW  EB60 27   04                 beq    20f  EB62 C1   42                 cmpb   #WSMRAW   MACRAW  EB64 27   00                 beq    20f                     *  EB66 108E EAE4     20        ldy    #skurwt  EB6A 7E   E84F               jmp    polext    keep polling                     *  EB6D EC   C8 20    10        ldd    wzurms,u  EB70 1083 05C0               cmpd   #MAX_UDP  too big  EB74 22   0D                 bhi    78f                     *  EB76 4F                      clra  EB77 C6   23                 ldb    #R_RSNDTO  EB79 39                      rts                       EB7A C6   06       60        ldb    #PIPES  EB7C BD   E448               jsr    send_SI   send to main CPU  EB7F 4F                      clra  EB80 C6   02                 ldb    #R_CLOSE  EB82 39                      rts                       EB83 BD   E7B0     78        jsr    skclin    close  EB86 C6   C0                 ldb    #E_SOCKET  EB88 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EB89  skusnt    equ    *  EB89 BD   E6CF               jsr    skfresFIO Simulation Structure             20:14:23  Jul 01, 2024   Page   75wz socket interface routines                                             *                     * is the DEVICE (still) active                     *  EB8C BD   E6C3               jsr    wzdevt  EB8F 1026 FDDB     02        lbne   rdrqer1  EB93 BD   E6DF               jsr    skcudp  EB96 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EB98 EC   C8 20              ldd    wzurms,u  total data                     *  EB9B 108E 0020               ldy    #fifo     target  EB9F BD   F38D               jsr    WRFB2SK   fifo to socket  EBA2 34   06                 pshs   d  EBA4 EC   C8 20              ldd    wzurms,u  all loaded  EBA7 A3   E1                 subd   0,s++  EBA9 ED   C8 20              std    wzurms,u  EBAC 26   11                 bne    01f                       EBAE EC   C8 22              ldd    wzuwrp,u  is it used  EBB1 BD   F260               jsr    PSRTXWP   set write pointer                       EBB4 C6   20                 ldb    #WCSEND  EBB6 E7   44                 stb    wzcmnd,u  EBB8 BD   F084               jsr    PSRCR  EBBB 4F                      clra  EBBC C6   24                 ldb    #R_WSNDTO data taken  EBBE 39                      rts                       EBBF 4F            01        clra  EBC0 C6   25                 ldb    #R_SNDTOM ask for more  EBC2 39                      rts                                          ***************************************************************                     *                     * netblock, read block                     * the method is special, we need to send a request                     * over the net first (send) before new data can be returned                     * request sits at fido_us2/fifo_us3                     * X=task struct, U=wzsock                     *                     * requires exclusive and permanent access to fifo and                     * therefore a CPU09GPP/09NET combo where for this device                     * the socket drivers are not active                     *                     ***************************************************************                                    EBC3  sknbrr    equ    *  EBC3 BD   E6CF               jsr    skfres                     *FIO Simulation Structure             20:14:23  Jul 01, 2024   Page   76wz socket interface routines                                             * is the DEVICE (still) active                     *  EBC6 BD   E6C3               jsr    wzdevt  EBC9 1026 FDA1     02        lbne   rdrqer1  EBCD BD   E6D6               jsr    skctcp  EBD0 26   F7                 bne    02b                     *                     *                     *  EBD2 BD   F0B8               jsr    GSRSR     get status  EBD5 E7   45                 stb    wzstat,u  update sock  EBD7 C1   17                 cmpb   #WSESTB   established  EBD9 26   45                 bne    sknbe1    error                     *  EBDB BD   F223               jsr    GSRTXFR   get free space  EBDE 1083 0004               cmpd   #NBRQLN  EBE2 25   36                 blo    sknbrp1   go poll                     *                     * read, send command info to server                     *  EBE4 CC   0004               ldd    #NBRQLN   actual size of request  EBE7 108E 001C               ldy    #fifo_us2 where request is present  EBEB BD   F38D               jsr    WRFB2SK  EBEE C6   20                 ldb    #WCSEND   tell socket we put it  EBF0 E7   44                 stb    wzcmnd,u  EBF2 BD   F084               jsr    PSRCR                     *                     * read is 2 phase, receive response from server                     *  EBF5 BD   F0B8     sknbrp2   jsr    GSRSR  EBF8 E7   45                 stb    wzstat,u  EBFA C1   17                 cmpb   #WSESTB   check socket state  EBFC 26   22                 bne    sknbe1  EBFE BD   F26F               jsr    GSRRXRS   check response  EC01 34   06                 pshs   d  EC03 EC   4A                 ldd    wzrqln,u  requested data  EC05 C3   0004               addd   #NBRQLN  EC08 10A3 E1                 cmpd   0,s++     allows for other data packet sizes  EC0B 23   16                 bls    01f  EC0D E6   45                 ldb    wzstat,u  still active  EC0F C1   1C                 cmpb   #WSCLWT  EC11 27   0D                 beq    sknbe1    bail out  EC13 108E EBF5               ldy    #sknbrp2  wait until                     *                     * poll loop                     *  EC17 7E   E84F     02        jmp    polext                     *  EC1A 108E EBC3     sknbrp1   ldy    #sknbrr  EC1E 20   F7                 bra    02b                     *  EC20 C6   C0       sknbe1    ldb    #E_SOCKETFIO Simulation Structure             20:14:23  Jul 01, 2024   Page   77wz socket interface routines                          EC22 39                      rts                     * we have data in socket  EC23 C6   82       01        ldb    #R_RQRBLK  EC25 4F                      clra  EC26 39                      rts                                          ***************************************************************                     * here data is moved from the socket to the fifo                     * write 4 bytes back to fifo_us2/fifo_us3                     ***************************************************************               EC27  sknbrd    equ    *  EC27 BD   E6CF               jsr    skfres  EC2A BD   E6C3               jsr    wzdevt  EC2D 1026 FD3D     02        lbne   rdrqer1  EC31 BD   E6D6               jsr    skctcp  EC34 26   F7                 bne    02b                     *                     * when we arrive here, the data has arrived                     *  EC36 EC   4A       01        ldd    wzrqln,u  request sets the buffer size  EC38 34   06                 pshs   d  EC3A C3   0004               addd   #NBRQLN  EC3D ED   4A                 std    wzrqln,u  fool RDSK2FB  EC3F 108E 001C               ldy    #fifo_us2 data contains cmd info  EC43 BD   F33F               jsr    RDSK2FB  EC46 C6   40                 ldb    #WCRECV   tell socket we took it  EC48 E7   44                 stb    wzcmnd,u  EC4A BD   F084               jsr    PSRCR                     * transfer only data part  EC4D 35   06                 puls   d  EC4F ED   48                 std    wzxfer,u  EC51 ED   4A                 std    wzrqln,u                     *  EC53 C6   83                 ldb    #R_RDRBLK tell caller, data in fifo_us2 and fifo  EC55 39                      rts                                          ***************************************************************                     *                     * netblock, write block                     *                     ***************************************************************               EC56  sknbsr    equ    *  EC56 BD   E6CF               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC59 BD   E6C3               jsr    wzdevt  EC5C 1026 FD0E     02        lbne   rdrqer1  EC60 BD   E6D6               jsr    skctcp  EC63 26   F7                 bne    02b                     *  EC65 BD   F0B8               jsr    GSRSR     statusFIO Simulation Structure             20:14:24  Jul 01, 2024   Page   78wz socket interface routines                          EC68 E7   45                 stb    wzstat,u  EC6A C1   17                 cmpb   #WSESTB   still there?  EC6C 26   16                 bne    sknbe10                     *  EC6E BD   F223               jsr    GSRTXFR   get free space  EC71 34   06                 pshs   d  EC73 CC   0004               ldd    #NBRQLN  EC76 E3   4A                 addd   wzrqln,u  EC78 10A3 E1                 cmpd   0,s++  EC7B 23   0F                 bls    70f                     *  EC7D 108E EC56               ldy    #sknbsr  EC81 7E   E84F               jmp    polext                     *  EC84 CC   0000     sknbe10   ldd    #0  EC87 ED   48                 std    wzxfer,u  EC89 C6   C0                 ldb    #E_SOCKET  EC8B 39                      rts                       EC8C 4F            70        clra  EC8D C6   80                 ldb    #R_RQSBLK  EC8F 39                      rts                                          ***************************************************************                     *                     *                     ***************************************************************               EC90  sknbsd    equ    *  EC90 BD   E6CF               jsr    skfres  EC93 BD   E6C3               jsr    wzdevt  EC96 1026 FCD4     02        lbne   rdrqer1  EC9A BD   E6D6               jsr    skctcp  EC9D 26   F7                 bne    02b                                          *                     * data to write, cnd +data                     *  EC9F EC   4A       70        ldd    wzrqln,u  ECA1 34   06                 pshs   d  ECA3 C3   0004               addd   #NBRQLN  ECA6 ED   4A                 std    wzrqln,u  fool WFB2SK  ECA8 108E 001C               ldy    #fifo_us2 where cmd sits  ECAC BD   F38D               jsr    WRFB2SK  ECAF C6   20                 ldb    #WCSEND   send it now  ECB1 E7   44                 stb    wzcmnd,u  ECB3 BD   F084               jsr    PSRCR  ECB6 35   06                 puls   d  ECB8 ED   48                 std    wzxfer,u  make it correct  ECBA ED   4A                 std    wzrqln,u  ECBC 4F                      clra  ECBD C6   81                 ldb    #R_SNDBLK tell host we did  ECBF 39                      rtsFIO Simulation Structure             20:14:24  Jul 01, 2024   Page   79wz socket interface routines                                                                  ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               ECC0  skspcl    equ    *                     *  ECC0 34   10                 pshs   x  ECC2 E6   0C                 ldb    tstval,x  get index  ECC4 C1   03                 cmpb   #MAXTBL  ECC6 22   18                 bhi    01f       illegal  ECC8 58                      aslb  ECC9 8E   ECE7               ldx    #functb  ECCC 10AE 85                 ldy    b,x       get special function  ECCF 27   0F                 beq    01f       not valid  ECD1 35   10                 puls   x                     *  ECD3 AD   A4                 jsr    0,y       do function  ECD5 26   05                 bne    90f                     *  ECD7 4F                      clra  ECD8 C6   0F                 ldb    #R_SPCL  ECDA 20   0A                 bra    99f                     *  ECDC 86   A2       90        lda    #162  ECDE 20   04                 bra    02f                     *  ECE0 35   10       01        puls   x  ECE2 86   A1                 lda    #161  ECE4               02  ECE4 C6   C0                 ldb    #E_SOCKET                     *  ECE6 39            99        rts                       ECE7 ECEF          functb    fdb    wzwdev    write device settings  ECE9 ECEF                    fdb    wzwdev  ECEB ED19                    fdb    wzrdev    read device settings  ECED ED35                    fdb    showrg               0003  MAXTBL    equ    ((*-functb)/2)-1                                          *                     * write W5500 basic device settings                     *                     * X hold the task table                     * U holds the special sock address                     *  ECEF               wzwdev  ECEF C6   08                 ldb    #8  ECF1                         trfr   B,E  ECF1 1F                      fcb    $1fFIO Simulation Structure             20:14:24  Jul 01, 2024   Page   80wz socket interface routines                          ECF2 9E                      fcb    B<<4|E                               endm  ECF3 DE   1A                 ldu    fifo_us1  device info area  ECF5 31   C4                 leay   0,u       myip  ECF7 BD   EF1B               jsr    PCRSIP    source IP  ECFA 31   44                 leay   4,u  ECFC BD   EEAF               jsr    PCRSNM    subnet mask  ECFF 31   48                 leay   8,u  ED01 BD   EE81               jsr    PCRGA     gateway IP  ED04 31   4C                 leay   12,u  ED06 BD   EEE5               jsr    PCRSHA    hardware address                     *  ED09 A6   C8 12              lda    18,u      ON/OFF  ED0C 27   04                 beq    01f  ED0E C6   F8                 ldb    #%11111000 all on  ED10 20   02                 bra    02f  ED12 C6   78       01        ldb    #%01111000 all off  ED14 BD   F039     02        jsr    PCRPHY  ED17 4F                      clra             no error return status  ED18 39                      rts                                          *                     * read W5500 basic device settings                     *  ED19               wzrdev  ED19 C6   08                 ldb    #8  ED1B                         trfr   B,E       select first socket  ED1B 1F                      fcb    $1f  ED1C 9E                      fcb    B<<4|E                               endm  ED1D DE   1A                 ldu    fifo_us1  ED1F 31   C4                 leay   0,u       overwrite what was set  ED21 BD   EF04               jsr    GCRSIP  ED24 31   44                 leay   4,u  ED26 BD   EE98               jsr    GCRSNM  ED29 31   48                 leay   8,u  ED2B BD   EE6A               jsr    GCRGA  ED2E 31   4C                 leay   12,u  ED30 BD   EEC6               jsr    GCRSHA  ED33 4F                      clra             no error return status  ED34 39                      rts                                          *                     * debug service, read selected registers                     *  ED35               showrg  ED35 C6   08                 ldb    #8  ED37                         trfr   B,E       select first socket  ED37 1F                      fcb    $1f  ED38 9E                      fcb    B<<4|E                               endm  ED39 DE   1A                 ldu    fifo_us1FIO Simulation Structure             20:14:25  Jul 01, 2024   Page   81wz socket interface routines                          ED3B 33   C8 20              leau   32,u      skip network data area  ED3E BD   F057               jsr    GSRMR  ED41 E7   C0                 stb    0,u+  ED43 BD   F0B8               jsr    GSRSR  ED46 E7   C0                 stb    0,u+  ED48 BD   F1E7               jsr    GSRRBFS  ED4B E7   C0                 stb    0,u+                       ED4D C6   3D                 ldb    #'=  ED4F E7   C0                 stb    0,u+                       ED51 31   C4                 leay   0,u  ED53 BD   EF04               jsr    GCRSIP  ED56 33   44                 leau   4,u  ED58 31   C4                 leay   0,u  ED5A BD   EE6A               jsr    GCRGA  ED5D 33   44                 leau   4,u                       ED5F C6   23                 ldb    #'#  ED61 E7   C0                 stb    0,u+                       ED63 31   C4                 leay   0,u  ED65 BD   EEC6               jsr    GCRSHA  ED68 33   46                 leau   6,u                       ED6A C6   23                 ldb    #'#  ED6C E7   C0                 stb    0,u+                       ED6E 31   C4                 leay   0,u  ED70 BD   EE98               jsr    GCRSNM  ED73 33   44                 leau   4,u                       ED75 C6   3D                 ldb    #'=  ED77 E7   C0                 stb    0,u+                       ED79 BD   F048               jsr    GCRVERS  ED7C ED   C1                 std    0,u++                       ED7E C6   23                 ldb    #'#  ED80 E7   C4                 stb    0,u  ED82 4F                      clra                       ED83 39                      rts                                                               * X hold the task table                     * U holds the sock address                     *   skintrp  ED84               skdisc  ED84               sksmac  ED84               skskep  ED84 86   FF                 lda    #255FIO Simulation Structure             20:14:25  Jul 01, 2024   Page   82wz socket interface routines                          ED86 A7   47                 sta    wzerr,u  ED88 C6   C0                 ldb    #E_SOCKET                                            ED8A 39                      rts                                    ED8B  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       ED8B                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               ED8B  spinit    equ    *  ED8B 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  ED8D B7   8080               sta    SPIBASE+spicmd  ED90 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= readFIO Simulation Structure             20:14:25  Jul 01, 2024   Page   83wzspi, basic spi routines                                                * X,Y untouched                     *               ED91  spistr2   equ    *  ED91 CE   8080               ldu    #SPIBASE  SPI base TODO  ED94                         trfr   F,B  ED94 1F                      fcb    $1f  ED95 F9                      fcb    F<<4|B                               endm  ED96 5D                      tstb             register pointer  ED97 27   09                 beq    01f       OK, valid  ED99 34   04                 pshs   b  ED9B C4   03                 andb   #RSVREG   reserved loctation  ED9D 5D                      tstb             xxx10xxx  is invalid!  ED9E 35   04                 puls   b  EDA0 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  EDA2 4D            01        tsta             cmd flag  EDA3 27   04                 beq    04f  EDA5 1A   01                 sec              write   100  EDA7 20   02                 bra    05f  EDA9 1C   FE       04        clc              read    000                     *  EDAB 59            05        rolb             set READ/WRITE bit  [2...0]  EDAC 58                      lslb             set variable length data [00]  EDAD 58                      lslb                     *                     * here the actual SPI action starts                     *  EDAE                         seti   disable   interrupts  EDAE 1A   50                 orcc   #FF|IF                               endm  EDB0 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  EDB1 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  EDB3 A7   C4                 sta    spicmd,u  EDB5 AF   44                 stx    hibyta,u  and shift out  EDB7 E7   44                 stb    hibyta,u  and shift out  EDB9 1A   04                 sez  EDBB 39                      rts  EDBC 1C   FB       09        clz  EDBE 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               EDBF  byterd    equ    *  EDBF 34   47                 pshs   cc,d,u  EDC1 4F                      clra  EDC2 8D   CD                 bsr    spistr2FIO Simulation Structure             20:14:25  Jul 01, 2024   Page   84wzspi, basic spi routines                            >EDC4 1026 007E               lbne   09f  EDC8 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EDCA E6   45                 ldb    lobyta,u  read byte  EDCC 4F                      clra  EDCD ED   61                 std    1,s  EDCF 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               EDD1  wordrd    equ    *  EDD1 34   47                 pshs   cc,d,u  EDD3 4F                      clra >EDD4 BD   ED91               jsr    spistr2  EDD7 26   6D                 bne    09f  EDD9 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EDDB A6   45                 lda    lobyta,u  read byte  EDDD E6   45                 ldb    lobyta,u  read byte  EDDF ED   61                 std    1,s  EDE1 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               EDE3  bmread    equ    *  EDE3 34   77                 pshs   cc,d,x,y,u  EDE5 4F                      clra  EDE6 BD   F286               jsr    GSRRXRP  EDE9 1F   01                 tfr    d,x  EDEB CE   8080               ldu    #SPIBASE  EDEE 34   40                 pshs   u  EDF0 1A   50                 orcc   #$50  EDF2 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EDF4 A7   C4                 sta    spicmd,u  EDF6 AF   44                 stx    hibyta,u  start address  EDF8 BD   F330               jsr    tsk2rx  EDFB E7   44                 stb    hibyta,u  EDFD EC   63                 ldd    3,s       old D  EDFF                         trfr   D,W       count  EDFF 1F                      fcb    $1f  EE00 06                      fcb    D<<4|W                               endm  EE01 1F   12                 tfr    x,y       mem pointer  EE03 10AE 67                 ldy    7,s       old YFIO Simulation Structure             20:14:26  Jul 01, 2024   Page   85wzspi, basic spi routines                             EE06 E7   44                 stb    hibyta,u  shift out  EE08 33   45                 leau   lobyta,u  EE0A                         tfm4   U,Y  EE0A 113B                    fdb    $113b  EE0C 32                      fcb    U<<4|Y                               endm  EE0D 35   40                 puls   u         old U  EE0F 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  EE11 A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  EE13 1F   10                 tfr    x,d  EE15 E3   61                 addd   1,s       move pointer  EE17 BD   F295               jsr    PSRRXRP   update pointer  EE1A 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EE1C  bytewr    equ    *  EE1C 34   47                 pshs   cc,d,u  EE1E 86   01                 lda    #1  EE20 BD   ED91               jsr    spistr2  EE23 26   21                 bne    09f                     *  EE25 A6   62                 lda    2,s  EE27 A7   44                 sta    hibyta,u  EE29 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EE2B  wordwr    equ    *  EE2B 34   47                 pshs   cc,d,u  EE2D 86   01                 lda    #1  EE2F BD   ED91               jsr    spistr2  EE32 26   12                 bne    09f                     *  EE34 EC   61                 ldd    1,s  EE36 A7   44                 sta    hibyta,u  EE38 E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EE3A 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EE3C A7   C4                 sta    spicmd,u  EE3E A6   E4                 lda    0,s       sez  EE40 8A   04                 ora    #4FIO Simulation Structure             20:14:26  Jul 01, 2024   Page   86wzspi, basic spi routines                             EE42 A7   E4       02        sta    0,s  EE44 35   C7                 puls   cc,d,u,pc                     *  EE46 A6   E4       09        lda    0,s       clz  EE48 84   FB                 anda   #255-4  EE4A 20   F6                 bra    02b                     FIO Simulation Structure             20:14:26  Jul 01, 2024   Page   87wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EE4C 34   56       GCRMR     pshs   d,x,u  EE4E 5F                      clrb  EE4F                         trfr   B,F  EE4F 1F                      fcb    $1f  EE50 9F                      fcb    B<<4|FFIO Simulation Structure             20:14:26  Jul 01, 2024   Page   88wzspi, basic spi routines                                                          endm  EE51 8E   0000               ldx    #WZMR  EE54 BD   EDBF               jsr    byterd  EE57 ED   E4                 std    0,s  EE59 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EE5B 34   16       PCRMR     pshs   d,x  EE5D 5F                      clrb  EE5E                         trfr   B,F  EE5E 1F                      fcb    $1f  EE5F 9F                      fcb    B<<4|F                               endm  EE60 8E   0000               ldx    #WZMR  EE63 EC   E4                 ldd    0,s >EE65 BD   EE1C               jsr    bytewr  EE68 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EE6A 34   16       GCRGA     pshs   d,x  EE6C 5F                      clrb  EE6D                         trfr   B,F  EE6D 1F                      fcb    $1f  EE6E 9F                      fcb    B<<4|F                               endm  EE6F 8E   0001               ldx    #WZGAR0  EE72 BD   EDD1               jsr    wordrd  EE75 ED   A4                 std    0,y  EE77 8E   0003               ldx    #WZGAR2  EE7A BD   EDD1               jsr    wordrd  EE7D ED   22                 std    2,y  EE7F 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EE81 34   16       PCRGA     pshs   d,x  EE83 5F                      clrb  EE84                         trfr   B,F  EE84 1F                      fcb    $1f  EE85 9F                      fcb    B<<4|F                               endm  EE86 8E   0001               ldx    #WZGAR0  EE89 EC   A4                 ldd    0,y >EE8B BD   EE2B               jsr    wordwr  EE8E 8E   0003               ldx    #WZGAR2FIO Simulation Structure             20:14:27  Jul 01, 2024   Page   89wzspi, basic spi routines                             EE91 EC   22                 ldd    2,y >EE93 BD   EE2B               jsr    wordwr  EE96 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EE98 34   16       GCRSNM    pshs   d,x  EE9A 5F                      clrb  EE9B                         trfr   B,F  EE9B 1F                      fcb    $1f  EE9C 9F                      fcb    B<<4|F                               endm  EE9D 8E   0005               ldx    #WZSUBR0  EEA0 BD   EDD1               jsr    wordrd  EEA3 ED   A4                 std    0,y  EEA5 8E   0007               ldx    #WZSUBR2  EEA8 BD   EDD1               jsr    wordrd  EEAB ED   22                 std    2,y  EEAD 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EEAF 34   16       PCRSNM    pshs   d,x  EEB1 5F                      clrb  EEB2                         trfr   B,F  EEB2 1F                      fcb    $1f  EEB3 9F                      fcb    B<<4|F                               endm  EEB4 8E   0005               ldx    #WZSUBR0  EEB7 EC   A4                 ldd    0,y  EEB9 BD   EE2B               jsr    wordwr  EEBC 8E   0007               ldx    #WZSUBR2  EEBF EC   22                 ldd    2,y  EEC1 BD   EE2B               jsr    wordwr  EEC4 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EEC6 34   16       GCRSHA    pshs   d,x  EEC8 5F                      clrb  EEC9                         trfr   B,F  EEC9 1F                      fcb    $1f  EECA 9F                      fcb    B<<4|F                               endm  EECB 8E   0009               ldx    #WZSHAR0  EECE BD   EDD1               jsr    wordrdFIO Simulation Structure             20:14:27  Jul 01, 2024   Page   90wzspi, basic spi routines                             EED1 ED   A4                 std    0,y  EED3 8E   000B               ldx    #WZSHAR2  EED6 BD   EDD1               jsr    wordrd  EED9 ED   22                 std    2,y  EEDB 8E   000D               ldx    #WZSHAR4  EEDE BD   EDD1               jsr    wordrd  EEE1 ED   24                 std    4,y  EEE3 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  EEE5 34   16       PCRSHA    pshs   d,x  EEE7 5F                      clrb  EEE8                         trfr   B,F  EEE8 1F                      fcb    $1f  EEE9 9F                      fcb    B<<4|F                               endm  EEEA 8E   0009               ldx    #WZSHAR0  EEED EC   A4                 ldd    0,y  EEEF BD   EE2B               jsr    wordwr  EEF2 8E   000B               ldx    #WZSHAR2  EEF5 EC   22                 ldd    2,y  EEF7 BD   EE2B               jsr    wordwr  EEFA 8E   000D               ldx    #WZSHAR4  EEFD EC   24                 ldd    4,y  EEFF BD   EE2B               jsr    wordwr  EF02 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  EF04 34   16       GCRSIP    pshs   d,x  EF06 5F                      clrb  EF07                         trfr   B,F  EF07 1F                      fcb    $1f  EF08 9F                      fcb    B<<4|F                               endm  EF09 8E   000F               ldx    #WZSIPR0  EF0C BD   EDD1               jsr    wordrd  EF0F ED   A4                 std    0,y  EF11 8E   0011               ldx    #WZSIPR2  EF14 BD   EDD1               jsr    wordrd  EF17 ED   22                 std    2,y  EF19 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             20:14:27  Jul 01, 2024   Page   91wzspi, basic spi routines                             EF1B 34   16       PCRSIP    pshs   d,x  EF1D 5F                      clrb  EF1E                         trfr   B,F  EF1E 1F                      fcb    $1f  EF1F 9F                      fcb    B<<4|F                               endm  EF20 8E   000F               ldx    #WZSIPR0  EF23 EC   A4                 ldd    0,y  EF25 BD   EE2B               jsr    wordwr  EF28 8E   0011               ldx    #WZSIPR2  EF2B EC   22                 ldd    2,y  EF2D BD   EE2B               jsr    wordwr  EF30 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  EF32 34   16       GCRILLT   pshs   d,x  EF34 5F                      clrb  EF35                         trfr   B,F  EF35 1F                      fcb    $1f  EF36 9F                      fcb    B<<4|F                               endm  EF37 8E   0013               ldx    #WZILLT0  EF3A BD   EDD1               jsr    wordrd  EF3D ED   E4                 std    0,s  EF3F 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  EF41 34   16       PCRILLT   pshs   d,x  EF43 5F                      clrb  EF44                         trfr   B,F  EF44 1F                      fcb    $1f  EF45 9F                      fcb    B<<4|F                               endm  EF46 8E   0013               ldx    #WZILLT0  EF49 EC   E4                 ldd    0,s  EF4B BD   EE2B               jsr    wordwr  EF4E 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  EF50 34   16       GCRIR     pshs   d,x  EF52 5F                      clrb  EF53                         trfr   B,F  EF53 1F                      fcb    $1f  EF54 9F                      fcb    B<<4|FFIO Simulation Structure             20:14:28  Jul 01, 2024   Page   92wzspi, basic spi routines                                                          endm  EF55 8E   0015               ldx    #WZIR  EF58 BD   EDBF               jsr    byterd  EF5B ED   E4                 std    0,s  EF5D 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  EF5F 34   16       PCRIR     pshs   d,x  EF61 5F                      clrb  EF62                         trfr   B,F  EF62 1F                      fcb    $1f  EF63 9F                      fcb    B<<4|F                               endm  EF64 8E   0015               ldx    #WZIR  EF67 EC   E4                 ldd    0,s  EF69 BD   EE1C               jsr    bytewr  EF6C 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  EF6E 34   16       GCRIMR    pshs   d,x  EF70 5F                      clrb  EF71                         trfr   B,F  EF71 1F                      fcb    $1f  EF72 9F                      fcb    B<<4|F                               endm  EF73 8E   0016               ldx    #WZIMR  EF76 BD   EDBF               jsr    byterd  EF79 ED   E4                 std    0,s  EF7B 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  EF7D 34   16       PCRIMR    pshs   d,x  EF7F 5F                      clrb  EF80                         trfr   B,F  EF80 1F                      fcb    $1f  EF81 9F                      fcb    B<<4|F                               endm  EF82 8E   0016               ldx    #WZIMR  EF85 EC   E4                 ldd    0,s  EF87 BD   EE1C               jsr    bytewr  EF8A 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             20:14:28  Jul 01, 2024   Page   93wzspi, basic spi routines                                                *  EF8C 34   16       GCRSIR    pshs   d,x  EF8E 5F                      clrb  EF8F                         trfr   B,F  EF8F 1F                      fcb    $1f  EF90 9F                      fcb    B<<4|F                               endm  EF91 8E   0017               ldx    #WZSIR  EF94 BD   EDBF               jsr    byterd  EF97 ED   E4                 std    0,s  EF99 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  EF9B 34   16       PCRSIR    pshs   d,x  EF9D 5F                      clrb  EF9E                         trfr   B,F  EF9E 1F                      fcb    $1f  EF9F 9F                      fcb    B<<4|F                               endm  EFA0 8E   0017               ldx    #WZSIR  EFA3 EC   E4                 ldd    0,s  EFA5 BD   EE1C               jsr    bytewr  EFA8 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  EFAA 34   16       GCRSIMR   pshs   d,x  EFAC 5F                      clrb  EFAD                         trfr   B,F  EFAD 1F                      fcb    $1f  EFAE 9F                      fcb    B<<4|F                               endm  EFAF 8E   0018               ldx    #WZSIMR  EFB2 BD   EDBF               jsr    byterd  EFB5 ED   E4                 std    0,s  EFB7 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  EFB9 34   16       PCRSIMR   pshs   d,x  EFBB 5F                      clrb  EFBC                         trfr   B,F  EFBC 1F                      fcb    $1f  EFBD 9F                      fcb    B<<4|F                               endm  EFBE 8E   0018               ldx    #WZSIMR  EFC1 EC   E4                 ldd    0,sFIO Simulation Structure             20:14:28  Jul 01, 2024   Page   94wzspi, basic spi routines                             EFC3 BD   EE1C               jsr    bytewr  EFC6 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EFC8 34   16       GCRRTR    pshs   d,x  EFCA 5F                      clrb  EFCB                         trfr   B,F  EFCB 1F                      fcb    $1f  EFCC 9F                      fcb    B<<4|F                               endm  EFCD 8E   0019               ldx    #WZRTR0  EFD0 BD   EDD1               jsr    wordrd  EFD3 ED   E4                 std    0,s  EFD5 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EFD7 34   16       PCRRTR    pshs   d,x  EFD9 5F                      clrb  EFDA                         trfr   B,F  EFDA 1F                      fcb    $1f  EFDB 9F                      fcb    B<<4|F                               endm  EFDC 8E   0019               ldx    #WZRTR0  EFDF EC   E4                 ldd    0,s  EFE1 BD   EE2B               jsr    wordwr  EFE4 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EFE6 34   16       GCRRCR    pshs   d,x  EFE8 5F                      clrb  EFE9                         trfr   B,F  EFE9 1F                      fcb    $1f  EFEA 9F                      fcb    B<<4|F                               endm  EFEB 8E   001B               ldx    #WZRCR  EFEE BD   EDBF               jsr    byterd  EFF1 ED   E4                 std    0,s  EFF3 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EFF5 34   16       PCRRCR    pshs   d,x  EFF7 5F                      clrbFIO Simulation Structure             20:14:28  Jul 01, 2024   Page   95wzspi, basic spi routines                             EFF8                         trfr   B,F  EFF8 1F                      fcb    $1f  EFF9 9F                      fcb    B<<4|F                               endm  EFFA 8E   001B               ldx    #WZRCR  EFFD EC   E4                 ldd    0,s  EFFF BD   EE1C               jsr    bytewr  F002 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  F004 34   16       GCRURP    pshs   d,x  F006 5F                      clrb  F007                         trfr   B,F  F007 1F                      fcb    $1f  F008 9F                      fcb    B<<4|F                               endm  F009 8E   002C               ldx    #WZUPRT0  F00C BD   EDD1               jsr    wordrd  F00F ED   E4                 std    0,s  F011 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  F013 34   16       GCRUIP    pshs   d,x  F015 5F                      clrb  F016                         trfr   B,F  F016 1F                      fcb    $1f  F017 9F                      fcb    B<<4|F                               endm  F018 8E   0028               ldx    #WZUIPR0  F01B BD   EDD1               jsr    wordrd  F01E ED   A4                 std    0,y  F020 8E   002A               ldx    #WZUIPR2  F023 BD   EDD1               jsr    wordrd  F026 ED   22                 std    2,y  F028 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  F02A 34   56       GCRPHY    pshs   d,x,u  F02C 8E   002E               ldx    #WZPHY  F02F 5F                      clrb  F030                         trfr   B,F  F030 1F                      fcb    $1f  F031 9F                      fcb    B<<4|FFIO Simulation Structure             20:14:29  Jul 01, 2024   Page   96wzspi, basic spi routines                                                          endm  F032 BD   EDBF               jsr    byterd  F035 ED   E4                 std    0,s  F037 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  F039 34   56       PCRPHY    pshs   d,x,u  F03B 8E   002E               ldx    #WZPHY  F03E 5F                      clrb  F03F                         trfr   B,F  F03F 1F                      fcb    $1f  F040 9F                      fcb    B<<4|F                               endm  F041 EC   E4                 ldd    0,s  F043 BD   EE1C               jsr    bytewr  F046 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  F048 34   56       GCRVERS   pshs   d,x,u  F04A 8E   0039               ldx    #WZVERS  F04D 5F                      clrb  F04E                         trfr   B,F  F04E 1F                      fcb    $1f  F04F 9F                      fcb    B<<4|F                               endm  F050 BD   EDBF               jsr    byterd  F053 ED   E4                 std    0,s  F055 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             20:14:29  Jul 01, 2024   Page   97wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  F057 34   16       GSRMR     psh    d,x  F059 BD   F315               jsr    tsk2rg  F05C 8E   0000               ldx    #SNMR  F05F BD   EDBF               jsr    byterd  F062 ED   E4                 std    0,s  F064 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  F066 34   16       PSRMR     pshs   d,x  F068 BD   F315               jsr    tsk2rgFIO Simulation Structure             20:14:29  Jul 01, 2024   Page   98wzspi, basic spi routines                             F06B 8E   0000               ldx    #SNMR  F06E EC   E4                 ldd    0,s  F070 BD   EE1C               jsr    bytewr  F073 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  F075 34   16       GSRCR     pshs   d,x  F077 BD   F315               jsr    tsk2rg  F07A 8E   0001               ldx    #SNCR  F07D BD   EDBF               jsr    byterd  F080 ED   E4                 std    0,s  F082 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  F084 34   16       PSRCR     pshs   d,x  F086 BD   F315               jsr    tsk2rg  F089 8E   0001               ldx    #SNCR  F08C EC   E4                 ldd    0,s  F08E BD   EE1C               jsr    bytewr  F091 8D   E2       01        bsr    GSRCR  F093 5D                      tstb  F094 26   FB                 bne    01b       wait command to be consumed  F096 E7   61                 stb    1,s       set return  F098 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  F09A 34   16       GSRIR     pshs   d,x  F09C BD   F315               jsr    tsk2rg  F09F 8E   0002               ldx    #SNIR  F0A2 BD   EDBF               jsr    byterd  F0A5 ED   E4                 std    0,s  F0A7 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  F0A9 34   16       PSRIR     pshs   d,x  F0AB BD   F315               jsr    tsk2rg  F0AE 8E   0002               ldx    #SNIR  F0B1 EC   E4                 ldd    0,sFIO Simulation Structure             20:14:30  Jul 01, 2024   Page   99wzspi, basic spi routines                             F0B3 BD   EE1C               jsr    bytewr  F0B6 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  F0B8 34   16       GSRSR     pshs   d,x  F0BA BD   F315               jsr    tsk2rg  F0BD 8E   0003               ldx    #SNSR  F0C0 BD   EDBF               jsr    byterd  F0C3 ED   E4                 std    0,s  F0C5 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  F0C7 34   16       GSRPORT   pshs   d,x  F0C9 BD   F315               jsr    tsk2rg  F0CC 8E   0004               ldx    #SNPORT0  F0CF BD   EDD1               jsr    wordrd  F0D2 ED   E4                 std    0,s  F0D4 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  F0D6 34   16       PSRPORT   pshs   d,x  F0D8 BD   F315               jsr    tsk2rg  F0DB 8E   0004               ldx    #SNPORT0  F0DE EC   E4                 ldd    0,s  F0E0 BD   EE2B               jsr    wordwr  F0E3 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  F0E5 34   16       GSRDHAR   pshs   d,x  F0E7 BD   F315               jsr    tsk2rg  F0EA 8E   0006               ldx    #SNDHAR0  F0ED BD   EDD1               jsr    wordrd  F0F0 ED   A4                 std    0,y  F0F2 8E   0008               ldx    #SNDHAR2  F0F5 BD   EDD1               jsr    wordrd  F0F8 ED   22                 std    2,y  F0FA 8E   000A               ldx    #SNDHAR4  F0FD BD   EDD1               jsr    wordrdFIO Simulation Structure             20:14:30  Jul 01, 2024   Page  100wzspi, basic spi routines                             F100 ED   24                 std    4,y  F102 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  F104 34   16       PSRDHAR   pshs   d,x  F106 BD   F315               jsr    tsk2rg  F109 8E   0006               ldx    #SNDHAR0  F10C EC   A4                 ldd    0,y  F10E BD   EE2B               jsr    wordwr  F111 8E   0008               ldx    #SNDHAR2  F114 EC   22                 ldd    2,y  F116 BD   EE2B               jsr    wordwr  F119 8E   000A               ldx    #SNDHAR4  F11C EC   24                 ldd    4,y  F11E BD   EE2B               jsr    wordwr  F121 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  F123 34   16       GSRDIP    pshs   d,x  F125 BD   F315               jsr    tsk2rg  F128 8E   000C               ldx    #SNDIPR0  F12B BD   EDD1               jsr    wordrd  F12E ED   A4                 std    0,y  F130 8E   000E               ldx    #SNDIPR2  F133 BD   EDD1               jsr    wordrd  F136 ED   22                 std    2,y  F138 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  F13A 34   16       PSRDIP    pshs   d,x  F13C BD   F315               jsr    tsk2rg  F13F 8E   000C               ldx    #SNDIPR0  F142 EC   A4                 ldd    0,y  F144 BD   EE2B               jsr    wordwr  F147 8E   000E               ldx    #SNDIPR2  F14A EC   22                 ldd    2,y  F14C BD   EE2B               jsr    wordwr  F14F 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             20:14:30  Jul 01, 2024   Page  101wzspi, basic spi routines                                                *  F151 34   16       GSRDPOR   pshs   d,x  F153 BD   F315               jsr    tsk2rg  F156 8E   0010               ldx    #SNDPOR0  F159 BD   EDD1               jsr    wordrd  F15C ED   E4                 std    0,s  F15E 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  F160 34   16       PSRDPOR   pshs   d,x  F162 BD   F315               jsr    tsk2rg  F165 8E   0010               ldx    #SNDPOR0  F168 EC   E4                 ldd    0,s  F16A BD   EE2B               jsr    wordwr  F16D 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  F16F 34   16       GSRMSS    pshs   d,x  F171 BD   F315               jsr    tsk2rg  F174 8E   0012               ldx    #SNMSSR0  F177 BD   EDD1               jsr    wordrd  F17A ED   E4                 std    0,s  F17C 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  F17E 34   16       PSRMSS    pshs   d,x  F180 BD   F315               jsr    tsk2rg  F183 8E   0012               ldx    #SNMSSR0  F186 EC   E4                 ldd    0,s  F188 BD   EE2B               jsr    wordwr  F18B 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  F18D 34   16       GSRPROT   pshs   d,x  F18F BD   F315               jsr    tsk2rg  F192 8E   0014               ldx    #SNPROTO  F195 BD   EDBF               jsr    byterd  F198 ED   E4                 std    0,sFIO Simulation Structure             20:14:30  Jul 01, 2024   Page  102wzspi, basic spi routines                             F19A 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  F19C 34   16       PSRPROT   pshs   d,x  F19E BD   F315               jsr    tsk2rg  F1A1 8E   0014               ldx    #SNPROTO  F1A4 EC   E4                 ldd    0,s  F1A6 BD   EE1C               jsr    bytewr  F1A9 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  F1AB 34   16       GSRTOS    pshs   d,x  F1AD BD   F315               jsr    tsk2rg  F1B0 8E   0015               ldx    #SNTOS  F1B3 BD   EDBF               jsr    byterd  F1B6 ED   E4                 std    0,s  F1B8 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  F1BA 34   16       PSRTOS    pshs   d,x  F1BC BD   F315               jsr    tsk2rg  F1BF 8E   0015               ldx    #SNTOS  F1C2 EC   E4                 ldd    0,s  F1C4 BD   EE1C               jsr    bytewr  F1C7 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  F1C9 34   16       GSRTTL    pshs   d,x  F1CB BD   F315               jsr    tsk2rg  F1CE 8E   0016               ldx    #SNTTL  F1D1 BD   EDBF               jsr    byterd  F1D4 ED   E4                 std    0,s  F1D6 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             20:14:31  Jul 01, 2024   Page  103wzspi, basic spi routines                             F1D8 34   16       PSRTTL    pshs   d,x  F1DA BD   F315               jsr    tsk2rg  F1DD 8E   0016               ldx    #SNTTL  F1E0 EC   E4                 ldd    0,s  F1E2 BD   EE1C               jsr    bytewr  F1E5 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  F1E7 34   16       GSRRBFS   pshs   d,x  F1E9 BD   F315               jsr    tsk2rg  F1EC 8E   001E               ldx    #SNRBFSZ  F1EF BD   EDBF               jsr    byterd  F1F2 ED   E4                 std    0,s  F1F4 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  F1F6 34   16       PSRRBFS   pshs   d,x  F1F8 BD   F315               jsr    tsk2rg  F1FB 8E   001E               ldx    #SNRBFSZ  F1FE EC   E4                 ldd    0,s  F200 BD   EE1C               jsr    bytewr  F203 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  F205 34   16       GSRTBFS   pshs   d,x  F207 BD   F315               jsr    tsk2rg  F20A 8E   001F               ldx    #SNTBFSZ  F20D BD   EDBF               jsr    byterd  F210 ED   E4                 std    0,s  F212 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  F214 34   16       PSRTBFS   pshs   d,x  F216 BD   F315               jsr    tsk2rg  F219 8E   001F               ldx    #SNTBFSZ  F21C EC   E4                 ldd    0,s  F21E BD   EE1C               jsr    bytewr  F221 35   96                 puls   d,x,pcFIO Simulation Structure             20:14:31  Jul 01, 2024   Page  104wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  F223 34   16       GSRTXFR   pshs   d,x  F225 BD   F315               jsr    tsk2rg  F228 8E   0020               ldx    #SNTXFR0  [R]  F22B BD   EDD1               jsr    wordrd  F22E ED   E4       01        std    0,s  F230 BD   EDD1               jsr    wordrd  F233 10A3 E4                 cmpd   0,s       read more times and exit  F236 26   F6                 bne    01b       when 2 reads are equal  F238 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F23A 34   16       GSRTXRP   pshs   d,x  F23C BD   F315               jsr    tsk2rg  F23F 8E   0022               ldx    #SNTXRP0  [R]  F242 BD   EDD1               jsr    wordrd  F245 ED   E4       01        std    0,s  F247 BD   EDD1               jsr    wordrd  F24A 10A3 E4                 cmpd   0,s       read more times and exit  F24D 26   F6                 bne    01b       when 2 reads are equal  F24F 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F251 34   16       GSRTXWP   pshs   d,x  F253 BD   F315               jsr    tsk2rg  F256 8E   0024               ldx    #SNTXWP0  [RW]  F259 BD   EDD1               jsr    wordrd  F25C ED   E4                 std    0,s  F25E 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F260 34   16       PSRTXWP   pshs   d,x  F262 BD   F315               jsr    tsk2rg  F265 8E   0024               ldx    #SNTXWP0  F268 EC   E4                 ldd    0,s  F26A BD   EE2B               jsr    wordwrFIO Simulation Structure             20:14:31  Jul 01, 2024   Page  105wzspi, basic spi routines                             F26D 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F26F 34   16       GSRRXRS   pshs   d,x  F271 BD   F315               jsr    tsk2rg  F274 8E   0026               ldx    #SNRXRZ0  [R]  F277 BD   EDD1               jsr    wordrd  F27A ED   E4       01        std    0,s  F27C BD   EDD1               jsr    wordrd  F27F 10A3 E4                 cmpd   0,s       read more times and exit  F282 26   F6                 bne    01b       when 2 reads are equal  F284 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F286 34   16       GSRRXRP   pshs   d,x  F288 BD   F315               jsr    tsk2rg  F28B 8E   0028               ldx    #SNRXRP0  [RW]  F28E BD   EDD1               jsr    wordrd  F291 ED   E4                 std    0,s  F293 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F295 34   16       PSRRXRP   pshs   d,x >F297 BD   F315               jsr    tsk2rg  F29A 8E   0028               ldx    #SNRXRP0  F29D EC   E4                 ldd    0,s  F29F BD   EE2B               jsr    wordwr  F2A2 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F2A4 34   16       GSRRXWP   pshs   d,x >F2A6 BD   F315               jsr    tsk2rg  F2A9 8E   002A               ldx    #SNRXWP0  [R]  F2AC BD   EDD1               jsr    wordrd  F2AF ED   E4       01        std    0,s  F2B1 BD   EDD1               jsr    wordrd  F2B4 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             20:14:32  Jul 01, 2024   Page  106wzspi, basic spi routines                             F2B7 26   F6                 bne    01b       when 2 reads are equal  F2B9 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F2BB 34   16       GSRIMR    pshs   d,x >F2BD BD   F315               jsr    tsk2rg  F2C0 8E   002C               ldx    #SNIMR  F2C3 BD   EDBF               jsr    byterd  F2C6 ED   E4                 std    0,s  F2C8 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F2CA 34   16       PSRIMR    pshs   d,x >F2CC BD   F315               jsr    tsk2rg  F2CF 8E   002C               ldx    #SNIMR  F2D2 EC   E4                 ldd    0,s  F2D4 BD   EE1C               jsr    bytewr  F2D7 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F2D9 34   16       GSRFRAG   pshs   d,x >F2DB BD   F315               jsr    tsk2rg  F2DE 8E   002D               ldx    #SNFRAG0  F2E1 BD   EDD1               jsr    wordrd  F2E4 ED   E4                 std    0,s  F2E6 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F2E8 34   16       PSRFRAG   pshs   d,x >F2EA BD   F315               jsr    tsk2rg  F2ED 8E   002D               ldx    #SNFRAG0  F2F0 EC   E4                 ldd    0,s  F2F2 BD   EE2B               jsr    wordwr  F2F5 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             20:14:32  Jul 01, 2024   Page  107wzspi, basic spi routines                                                * return byte in B                     *  F2F7 34   16       GSKATM    pshs   d,x >F2F9 BD   F315               jsr    tsk2rg  F2FC 8E   002F               ldx    #SNKATIM  F2FF BD   EDBF               jsr    byterd  F302 ED   E4                 std    0,s  F304 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F306 34   16       PSRKATM   pshs   d,x >F308 BD   F315               jsr    tsk2rg  F30B 8E   002F               ldx    #SNKATIM  F30E EC   E4                 ldd    0,s  F310 BD   EE1C               jsr    bytewr  F313 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F315  tsk2rg    equ    *  F315                         trfr   E,B  F315 1F                      fcb    $1f  F316 E9                      fcb    E<<4|B                               endm  F317 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F318 1C   FE                 clc              make reg bits + '01'  F31A 59                      rolb             socket register  F31B 1A   01                 sec  F31D 59                      rolb             xxx 01 ...                     *  F31E                         trfr   B,F  F31E 1F                      fcb    $1f  F31F 9F                      fcb    B<<4|F                               endm  F320 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F321  tsk2tx    equ    *  F321                         trfr   E,B  F321 1F                      fcb    $1f  F322 E9                      fcb    E<<4|BFIO Simulation Structure             20:14:32  Jul 01, 2024   Page  108wzspi, basic spi routines                                                          endm  F323 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F324 1A   01                 sec              make reg bits + '10'  F326 59                      rolb             sock TX buffer  F327 1C   FE                 clc  F329 59                      rolb                     *  F32A 1A   01                 sec  F32C 59                      rolb             write bit     '1'                     *  F32D 58                      lslb             variable size '00'  F32E 58                      lslb             xxx 10 100                     *  F32F 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F330  tsk2rx    equ    *  F330                         trfr   E,B  F330 1F                      fcb    $1f  F331 E9                      fcb    E<<4|B                               endm  F332 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F333 1A   01                 sec              make reg bits + '11'  F335 59                      rolb             sock RX buffer  F336 1A   01                 sec              make reg bits + '11'  F338 59                      rolb                     *  F339 1C   FE                 clc  F33B 59                      rolb             read bit     '0'                     *  F33C 58                      lslb             variable size '00'  F33D 58                      lslb             xxx 11 000  F33E 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=target, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F33F 34   76       RDSK2FB   pshs   d,x,y,u                     *  F341 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F344 23   02                 bls    01f  F346 EC   4A                 ldd    wzrqln,u  mandatory size  F348 1F   01       01        tfr    D,X       save for laterFIO Simulation Structure             20:14:32  Jul 01, 2024   Page  109wzspi, basic spi routines                             F34A ED   E4                 std    0,s       save xfrerred old  D  F34C ED   48                 std    wzxfer,u  F34E 27   3B                 beq    15f       no data                     *  F350 BD   F286               jsr    GSRRXRP  F353 34   06                 pshs   d         save socket read pointer [5,6]  F355 1F   02                 tfr    D,Y                     *  F357 CE   8080               ldu    #SPIBASE  F35A 34   01                 pshs   cc        [4]  F35C                         pshsw  [2,3]  F35C 1038                    fdb    $1038                               endm  F35E 34   40                 pshs   u         [0,1]  F360 1A   50                 orcc   #$50      disable interrupts  F362 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F364 A7   C4                 sta    spicmd,u  F366 10AF 44                 sty    hibyta,u  start address                      >F369 BD   F330               jsr    tsk2rx    SOCK# to buffer address                       F36C E7   44                 stb    hibyta,u  F36E 10AE 6B                 ldy    11,s      target  F371 E7   44                 stb    hibyta,u  shift out first data byte  F373 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F375                         trfr   X,W  F375 1F                      fcb    $1f  F376 16                      fcb    X<<4|W                               endm  F377                         tfm4   U,Y  F377 113B                    fdb    $113b  F379 32                      fcb    U<<4|Y                               endm  F37A 35   40                 puls   u         [0,1]  F37C 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F37E A7   C4                 sta    spicmd,u  F380                         pulsw  restore   E:F              [2,3]  F380 1039                    fdb    $1039                               endm  F382 35   01                 puls   cc        [4]                     *  F384 35   06                 puls   d         old read pointer         [5,6]  F386 E3   E4                 addd   0,s       adjust transferred  F388 BD   F295               jsr    PSRRXRP   update pointer                     *  F38B 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=target                     * E=socket#FIO Simulation Structure             20:14:33  Jul 01, 2024   Page  110wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F38D 34   76       WRFB2SK   pshs   d,x,y,u  F38F 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F392 23   02                 bls    01f  F394 EC   4A                 ldd    wzrqln,u  F396 1F   01       01        tfr    d,x  F398 ED   E4                 std    0,s  F39A ED   48                 std    wzxfer,u  report size  F39C 27   52                 beq    15f                     *  F39E 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F3A2 26   05                 bne    24f  F3A4 BD   F251               jsr    GSRTXWP   get write pointer  F3A7 20   02                 bra    25f  F3A9 1F   20       24        tfr    y,d                     *  F3AB 34   06       25        pshs   d  F3AD 1F   02                 tfr    D,Y                     *  F3AF CE   8080               ldu    #SPIBASE  F3B2 34   01                 pshs   cc  F3B4                         pshsw  save      E:F  F3B4 1038                    fdb    $1038                               endm  F3B6 34   40                 pshs   u  F3B8 1A   50                 orcc   #$50  F3BA 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F3BC A7   C4                 sta    spicmd,u  F3BE 10AF 44                 sty    hibyta,u  start address                       F3C1 BD   F321               jsr    tsk2tx                       F3C4 E7   44                 stb    hibyta,u  F3C6 10AE 6B                 ldy    11,s      target  F3C9 33   44                 leau   hibyta,u  the first to shift out  F3CB                         trfr   X,W  F3CB 1F                      fcb    $1f  F3CC 16                      fcb    X<<4|W                               endm  F3CD                         tfm3   Y,U  F3CD 113A                    fdb    $113a  F3CF 23                      fcb    Y<<4|U                               endm  F3D0 35   40                 puls   u  F3D2 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F3D4 A7   C4                 sta    spicmd,u  F3D6                         pulsw  restore   E:F!!  F3D6 1039                    fdb    $1039                               endm  F3D8 35   01                 puls   ccFIO Simulation Structure             20:14:33  Jul 01, 2024   Page  111wzspi, basic spi routines                                                *  F3DA 35   06                 puls   d         old write pointer  F3DC E3   E4                 addd   0,s  F3DE EE   66                 ldu    6,s       restore U  F3E0 AE   C8 26              ldx    wztype,u  F3E3 8C   0002               cmpx   #SK_DGRM  F3E6 27   05                 beq    10f  F3E8 BD   F260     11        jsr    PSRTXWP   update pointer  F3EB 20   03                 bra    15f                       F3ED ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F3F0 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             20:14:33  Jul 01, 2024   Page  112Debug Interface Routines                                                   F3F2               DB_main  F3F2 8D   4F                 bsr    DB_test   see if debug routines present  F3F4 6E   9F C002            jmp    [DEBUGROM+2]  F3F8               DB_pdata  F3F8 8D   49                 bsr    DB_test   see if debug routines present  F3FA 6E   9F C004            jmp    [DEBUGROM+4]  F3FE               DB_phex  F3FE 8D   43                 bsr    DB_test   see if debug routines present  F400 6E   9F C006            jmp    [DEBUGROM+6]  F404               DB_phex2  F404 8D   3D                 bsr    DB_test   see if debug routines present  F406 6E   9F C008            jmp    [DEBUGROM+8]  F40A               DB_pcrlf  F40A 8D   37                 bsr    DB_test   see if debug routines present  F40C 6E   9F C00A            jmp    [DEBUGROM+10]  F410               DB_check  F410 8D   31                 bsr    DB_test   see if debug routines present  F412 6E   9F C00C            jmp    [DEBUGROM+12]  F416               DB_config  F416 8D   2B                 bsr    DB_test   see if debug routines present  F418 6E   9F C00E            jmp    [DEBUGROM+14]  F41C 34   17       DB_msg    pshs   cc,d,x  F41E AE   65                 ldx    1+2+2,s   get return address  F420 EC   81                 ldd    ,x++      get mask word  F422 B4   0401               anda   DB_cntrl  F425 F4   0402               andb   DB_cntrl+1  F428 34   04                 pshs   b  F42A AA   E0                 ora    ,s+  F42C 27   04                 beq    10f       jump if flag not set  F42E 30   02                 leax   2,x       skip over false address & fall through  F430 20   02                 bra    20f  F432 AE   84       10        ldx    ,x        get false branch label  F434 AF   65       20        stx    1+2+2,s   fix up return address  F436 35   97                 puls   cc,d,x,pc return                     *  F438               DB_pspace  F438               DB_outsp  F438 34   16                 pshs   d,x  F43A 8E   F441               ldx    #00f  F43D 8D   B9                 bsr    DB_pdata  F43F 35   96                 puls   d,x,pc  F441 20 00         00        fcc    ' ',0                       F443 34   07       DB_test   pshs   cc,d  F445 FC   C000               ldd    DEBUGROM  Debug rom present?  F448 1083 1234               cmpd   #$1234    special marker  F44C 27   05                 beq    99f       yes - exit  F44E 35   07                 puls   cc,d      no - abort DB_xx function  F450 32   62                 leas   2,s  F452 39                      rts  F453 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             20:14:33  Jul 01, 2024   Page  113Debug Interface Routines                                                 *                     * nwpspecial, routines that communicate a bit differently                     *                                                                                                                              *********************************************************************                     *                     * memp2ff, mem pointer to fifo                     * copy 512 bytes addressed by fifo_us3 to fifo                     *                     * X=taskstruct                     * U=wzsock address                     *                     *                     *********************************************************************               F455  memp2ff   equ    *  F455 DC   1E                 ldd    fifo_us3  get address  F457 1F   98                 tfr    b,a  F459 5F                      clrb  F45A 48                      lsla             512 byte chunks  F45B 1F   01                 tfr    d,x  F45D FC   E07B               ldd    fio_fsz  F460                         trfr   D,W  F460 1F                      fcb    $1f  F461 06                      fcb    D<<4|W                               endm  F462 108E 0020               ldy    #fifo  F466                         tfm1   X,Y  F466 1138                    fdb    $1138  F468 12                      fcb    X<<4|Y                               endm  F469 4F                      clra  F46A C6   05                 ldb    #R_RDOK  F46C 39                      rts                                                         F46D  netboot   equ    *  F46D 39                      rts                                          ****************************************************************                     *                     * placeholder                     *                     ****************************************************************  FC00                         org    $fc00     command F8 only works with 512 boundaries! >FC00 16   0015     nboot     lbra   nboot1  FC03 0D            names     fcb    $0d  FC04 75 6E 69 66             fcc    "uniflexn"  FC0C 0000 0000               fdb    0,0,0,0,0,0FIO Simulation Structure             20:14:34  Jul 01, 2024   Page  114Debug Interface Routines                                                   FC18 30   8C E8    nboot1    leax   names,pcr  FC1B AD   9F F80A            jsr    [$f80a]  FC1F 3F                      swi                                                               ****************************************************************                                                                         end    rom_initFIO Simulation Structure             20:14:34  Jul 01, 2024   Page  115Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   BUFSIZ   0200   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E05E   CPUtraps FFF0   CR       000D   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F410   DB_cntrl 0401   DB_confi F416   DB_iflg  0400   DB_main  F3F2   DB_msg   F41C   DB_outsp F438   DB_pcrlf F40A   DB_pdata F3F8   DB_phex  F3FE   DB_phex2 F404   DB_pspac F438   DB_test  F443   DBmsg00  E012   DBmsg01  E02A   DBmsg02  E04A   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5F3   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    0046   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func14 0028   D_func15 002A   D_func16 002C   D_func17 002E   D_func18 0030   D_func19 0032   D_func1A 0034   D_func1B 0036   D_func1C 0038   D_func1D 003A   D_func1E 003C   D_func1F 003E   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   0042   D_inthan 0040   D_test   0044   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2F5   FIFO_put E31A   FIFOgeta E2EC   FIFOputa E312   FIOPRI   FFCE   FIO_get  E2CA   FIO_lock 0446   FIO_rel  E2DF   GCRGA    EE6A   GCRILLT  EF32   GCRIMR   EF6E   GCRIR    EF50   GCRMR    EE4C   GCRPHY   F02A   GCRRCR   EFE6   GCRRTR   EFC8   GCRSHA   EEC6   GCRSIMR  EFAA   GCRSIP   EF04   GCRSIR   EF8C   GCRSNM   EE98   GCRUIP   F013   GCRURP   F004   GCRVERS  F048   GSKATM   F2F7   GSRCR    F075   GSRDHAR  F0E5   GSRDIP   F123   GSRDPOR  F151   GSRFRAG  F2D9   GSRIMR   F2BB   GSRIR    F09A   GSRMR    F057   GSRMSS   F16F   GSRPORT  F0C7   GSRPROT  F18D   GSRRBFS  F1E7   GSRRXRP  F286   GSRRXRS  F26F   GSRRXWP  F2A4   GSRSR    F0B8   GSRTBFS  F205   GSRTOS   F1AB   GSRTTL   F1C9   GSRTXFR  F223   GSRTXRP  F23A   GSRTXWP  F251   HANGS    0001   HRECSIZ  0004   H_cpu    E472   H_fio    E496   IF       0010   INTS     0002   IO_end   E393   IO_han   E335   IRQ_han  E3B2   IRQmsg10 E3BF   IS       0003   IU       0002   IX       0000   IY       0001   LF       000A   MAXHIST  0010   MAXTBL   0003   MAX_DEV  0001   MAX_S_NU 0020   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NBRQLN   0004   NBSIZE   0204   NET      0001   NUM_TSK  0459   O_CLOSE  0020   O_INTRPT 0038   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EE81   PCRILLT  EF41   PCRIMR   EF7D   PCRIR    EF5F   PCRMR    EE5B   PCRPHY   F039   PCRRCR   EFF5   PCRRTR   EFD7   PCRSHA   EEE5   PCRSIMR  EFB9   PCRSIP   EF1B   PCRSIR   EF9B   PCRSNM   EEAF   PF_INET  0002   PF_UNIX  0001   PIPES    0006   POLPRI   FFBA   PROT_EGP 0008   PROT_ICM 0001   PROT_IGM 0002   PROT_XLT 8000   PSRCR    F084   PSRDHAR  F104   PSRDIP   F13A   PSRDPOR  F160   PSRFRAG  F2E8   PSRIMR   F2CA   PSRIR    F0A9   PSRKATM  F306   PSRMR    F066   PSRMSS   F17E   PSRPORT  F0D6   PSRPROT  F19C   PSRRBFS  F1F6   FIO Simulation Structure             20:14:35  Jul 01, 2024   Page  116Debug Interface Routines                            PSRRXRP  F295   PSRTBFS  F214   PSRTOS   F1BA   PSRTTL   F1D8   PSRTXWP  F260   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F33F   REJECT   0080   ROMLOorg E000   ROM_ERR  E0D3   ROM_VERS 0020   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOCK  000E   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_ERRBLK 0084   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_PDATA  000B   R_RD1C   0009   R_RDFRM  0021   R_RDOK   0005   R_RDRBLK 0083   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_RQRBLK 0082   R_RQRD   0005   R_RQRDNB 0015   R_RQSBLK 0080   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   R_SNDBLK 0081   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E406   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_IRAW  0004   SK_MRAW  0003   SK_NONBL 0100   SK_SPONC 0200   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_NETBOO 00F0   S_OPEN   0008   S_PG2FIF 00F8   S_RDRBLK 00D8   S_READ   0030   S_RQRBLK 00D0   S_RQRD   0028   S_RQSBLK 00C0   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDBLK 00C8   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WFSPOC   0002   WRFB2SK  F38D   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSIRAW   0032   WSLACK   001D   WSLIST   0014   WSMRAW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1DF   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3AE   bittab   E78C   bmread   EDE3   bt2num   E77B   byterd   EDBF   bytewr   EE1C   change   E4BA   chproc   040C   clock_ti 0455   conlb1   E835   FIO Simulation Structure             20:14:35  Jul 01, 2024   Page  117Debug Interface Routines                            cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E07D   fio_fsz  E07B   fio_irq  E22A   fio_msg  E294   fio_rese E1EA   fio_resp E2AE   fio_star E09B   fio_wait E20D   fiointe  E293   functb   ECE7   getjo1   E502   getjo2   E511   getjo4   E518   getjo6   E521   getjo8   E523   getjob   E4FC   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3D7   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   E57B   makrdy   E566   max_trn  E07F   memp2ff  F455   mod_name 0002   mod_tbl  E1D9   mod_type 0000   names    FC03   nboot    FC00   nboot1   FC18   netboot  F46D   no_dev   E15A   num2bt   E771   nwp_strt 0000   oldorg   ED8B   polext   E84F   putru1   E53A   putru2   E541   putru4   E54F   putru5   E55E   putru6   E562   putrun   E52D   rdrqer1  E96E   rom_bad  E0D1   rom_firq E0A4   rom_init E080   rom_int  E0C6   rom_nmi  E09E   rom_swi  E0AB   rom_swi2 E0B1   rom_swi3 E0B8   rom_trap E0BF   rsche2   E4D1   rsche3   E4E5   rsched   E4C0   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E6AE   send_SI  E448   set_tabl E112   showrg   ED35   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E8EF   skbind   E878   skclin   E7B0   skclos   E795   skcner1  E86E   skcner2  E85B   skcner3  E872   skcner4  E86A   skcner5  E866   skcner6  E85F   skconn   E7E2   skcraw   E6E8   skctcp   E6D6   skcudp   E6DF   skdisc   ED84   skdvini  E656   skfres   E6CF   skinit   E639   skinthan E6AD   skintrp  E795   sklist   E8BD   sknbe1   EC20   sknbe10  EC84   sknbrd   EC27   sknbrp1  EC1A   sknbrp2  EBF5   sknbrr   EBC3   sknbsd   EC90   sknbsr   EC56   sknewp   E6B1   sknone   E653   skopen   E6F5   skoper1  E767   skoper2  E76B   skowfo   E74F   skrecv   E973   skreqrd  E926   skreqwr  E9B6   sksend   E9FD   skskep   ED84   sksmac   ED84   skspcl   ECC0   sktest   E6AA   skurrd   EAB6   skurrdf  EA3F   skurwt   EAE4   skusnm   EB33   skusnt   EB89   skuwr2   EB33   sleep    E5A0   sleep7   E5C8   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   ED8B   spista   0000   spistr2  ED91   sprend   EE3A   stbinit  E0E0   sto_chk  E161   swtchu   E4F1   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1CD   timerchk E1D3   timerin  E1C7   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F315   tsk2rx   F330   tsk2tx   F321   tskend   049E   tskinit  E16F   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E587   wakeu3   E58E   wakeu4   E592   wakeu5   E594   wakeup   E57C   wlocip   0370   wnboot   03B0   wordrd   EDD1   wordwr   EE2B   wzanyp   0457   wzcmnd   0004   wzdctr   0001   wzdevt   E6C3   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzifga   E00E   wzifip   E006   wzifma   E000   wzifnm   E00A   wzipad   0014   wzmyip   0000   wzprot   0028   wzrdev   ED19   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wzswap   0020   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzwdev   ECEF   wzxfer   0008   xmtint   E5D5   