               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     13:54:36  Feb 13, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                     SWTPc      Intelligent I/O Proce     13:54:36  Feb 13, 2024   Page    2Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     13:54:36  Feb 13, 2024   Page    3Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     13:54:36  Feb 13, 2024   Page    4Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     13:54:37  Feb 13, 2024   Page    5Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     13:54:37  Feb 13, 2024   Page    6Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     13:54:37  Feb 13, 2024   Page    7Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     13:54:37  Feb 13, 2024   Page    8Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * should match nwp_codes.h  and MAX_S_NUM                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  0004               D_func2   rmb    2         2  0006               D_func3   rmb    2         3  0008               D_func4   rmb    2         4  000A               D_func5   rmb    2         5  000C               D_func6   rmb    2         6  000E               D_func7   rmb    2         7  0010               D_func8   rmb    2         8  0012               D_func9   rmb    2         9  0014               D_funcA   rmb    2         A  0016               D_funcB   rmb    2         B  0018               D_funcC   rmb    2         C  001A               D_funcD   rmb    2         D  001C               D_funcE   rmb    2         E  001E               D_funcF   rmb    2         F                     *  0020               D_func10  rmb    2         10  0022               D_func11  rmb    2         11  0024               D_func12  rmb    2         12  0026               D_func13  rmb    2         13                     *  0028               D_inthan  rmb    2         14 Interrupt poller/handlerSWTPc      Intelligent I/O Proce     13:54:38  Feb 13, 2024   Page    9Device     Table Structure                            002A               D_init    rmb    2         15 Device initialization  002C               D_test    rmb    2         16 Test for device present                     *  002E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     13:54:38  Feb 13, 2024   Page   10History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     13:54:38  Feb 13, 2024   Page   11IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 13:54:38  Feb 13, 2024   Page   12IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 13:54:38  Feb 13, 2024   Page   13IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSRAW     equ    $42       sock mac raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commands               0081  WSRRQF    equ    $80+1     read request data in fifoTask       Structure                 13:54:38  Feb 13, 2024   Page   14IOP        Memory Layout                                           0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                    0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001                         rmb    1         [*] (pre= $00)  sock has fifo allocated  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parameters                     *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                     Task       Structure                 13:54:39  Feb 13, 2024   Page   15IOP        Memory Layout                                           002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_RAW    equ    3         raw socket                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             13:54:39  Feb 13, 2024   Page   16IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             13:54:39  Feb 13, 2024   Page   17IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             13:54:39  Feb 13, 2024   Page   18Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0030  ROM_VERSION equ  $30       Major/Minor Version of IOP ROM                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)FIO Simulation Structure             13:54:40  Feb 13, 2024   Page   19Dual_Port RAM Structure                                            0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 generic socket error, actual is passed                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               0001  R_OPEN    equ    $01       [S]  Device open successful               0002  R_CLOSE   equ    $02       [S]  Device close successful               0003  R_RQWR    equ    $03       [S]  request for write               0004  R_WRITE   equ    $04       [S]  write data via fifo to net               0005  R_RQRD    equ    $05       [S]  request for read data               0006  R_READ    equ    $06       [S]  read data via fifo from net               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to macFIO Simulation Structure             13:54:40  Feb 13, 2024   Page   20Dual_Port RAM Structure                                            0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *               0015  MAX_S_NUM equ    21        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             13:54:40  Feb 13, 2024   Page   21Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             13:54:41  Feb 13, 2024   Page   22CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E09B                    fdb    rom_trap  Unused  FFF2 E094                    fdb    rom_swi3  SWI3  FFF4 E08D                    fdb    rom_swi2  SWI2  FFF6 E080                    fdb    rom_firq  FIRQ  FFF8 E38F                    fdb    IRQ_han   IRQ  FFFA E087                    fdb    rom_swi   SWI  FFFC E07A                    fdb    rom_nmi   Background debug  FFFE E05F                    fdb    rom_init  Reset                     FIO Simulation Structure             13:54:41  Feb 13, 2024   Page   23System     RESET Code                                                      E000                         org    ROMLOorg                       E000 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM',0  E009 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E029 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E03D 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               E05A  fio_fsz   equ    *         device fifo size               E05C  fio_dsz   equ    *+2       device RAM size               E05E  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E05A 0200                    fdb    512       fio_fsz FIFO SIZE  E05C 0400                    fdb    1024      fio_dsz DEVICE SIZE  E05E 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *                     * System RESET code                     *  E05F 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E063                         ldmd   3  E063 113D                    fdb    $113d  E065 03                      fcb    3                               endm                      >E066 BD   E0BC     20        jsr    stbinit   go initialize system memory                       E069 10FE 049C     30        lds    tsktab    Task 0 Stack  E06D 32   E9 00D7            leas   TSKSIZ,s  E071 17   0152               lbsr   fio_reset  E074 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E077               fio_start  E077 7E   E494     10        jmp    rsched                                          FIO Simulation Structure             13:54:41  Feb 13, 2024   Page   24ROM        Interrupt Fielders                                              E07A 8D   26       rom_nmi   bsr    rom_int  E07C 4E 4D 49 00             fcc    'NMI',0  E080 8D   20       rom_firq  bsr    rom_int  E082 46 49 52 51             fcc    'FIRQ',0  E087 8D   19       rom_swi   bsr    rom_int  E089 53 57 49 00             fcc    'SWI',0  E08D 8D   13       rom_swi2  bsr    rom_int  E08F 53 57 49 32             fcc    'SWI2',0  E094 8D   0C       rom_swi3  bsr    rom_int  E096 53 57 49 33             fcc    'SWI3',0  E09B 8D   05       rom_trap  bsr    rom_int  E09D 54 52 41 50             fcc    'TRAP',0                       E0A2 8E   E0AF     rom_int   ldx    #ROM_ERR  E0A5 BD   F1D3               jsr    DB_pdata  E0A8 35   10                 puls   x  E0AA BD   F1D3               jsr    DB_pdata  E0AD 20   FE       rom_bad   bra    *                     *  E0AF 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             13:54:41  Feb 13, 2024   Page   25Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0BC 8E   0000     stbinit   ldx    #0        s  clear all variables  E0BF CC   0000               ldd    #0  E0C2 ED   81       10        std    ,x++  E0C4 8C   3EFF               cmpx   #end_vars done yet?  E0C7 25   F9                 blo    10b                       E0C9 CC   0D04               ldd    #DEBUG  E0CC FD   0401               std    DB_cntrl                                            E0CF B6   E05E               lda    max_trn   shared with main CPU  E0D2 48                      asla             *2  E0D3 8B   04                 adda   #4        fixed system tasks  E0D5 B7   0459               sta    NUM_TSK                     * >E0D8 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0DB 8E   040E     15        ldx    #SI_Q     set queue empty  E0DE BF   0444               stx    SI_Q_ptr  E0E1 8E   0447               ldx    #int_buf  reset message in pointer  E0E4 BF   0453               stx    int_ptr                      >E0E7 17   0061     17        lbsr   tskinit   initialize tasks                       E0EA 17   1104     18        lbsr   DB_config display configuration  E0ED 39                      rts                                          *                     * Set up system tables                     *  E0EE               set_tables  E0EE 108E 04A0               ldy    #dev_tab  E0F2 8E   E5C7               ldx    #DEV_SOCK  E0F5 AF   22                 stx    dev_type,y  E0F7 AD   98 2A              jsr    [D_init,x]                                          * Compute configuration  E0FA CE   E1B5               ldu    #mod_tbl  tables with module refs  E0FD AE   C4       12        ldx    mod_type,u  E0FF 27   09                 beq    20f       jump if end of module table  E101 AD   98 2C              jsr    [D_test,x] check for device  E104 25   04                 bcs    15f       jump if found  E106 33   44                 leau   MOD_SIZE,u  E108 20   F3                 bra    12b                     *FIO Simulation Structure             13:54:42  Feb 13, 2024   Page   26Table      Initialization                             E10A               15  E10A               20                     * -- All done setting up configuration                       E10A CC   04C6               ldd    #SYS_TABS start of system tables  E10D 1F   03                 tfr    d,u                     * -- Task table  E10F 86   D7                 lda    #TSKSIZ  E111 F6   0459               ldb    NUM_TSK  E114 3D                      mul  E115 FF   049C               stu    tsktab >E118 17   0022               lbsr   sto_chk   check for system table space overflow  E11B FF   049E               stu    tskend                     *                     * -- All done  E11E 39            90        rts                     *  E11F 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E136 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E13D 33   CB       sto_chk   leau   d,u       compute new end pointer  E13F 1183 3EFF               cmpu   #end_vars overflow?  E143 22   03                 bhi    10f       yes - return error  E145 1C   FE                 clc              no         - return OK  E147 39                      rts  E148 1A   01       10        sec              ..         bad owies  E14A 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E14B BE   049C     tskinit   ldx    tsktab  E14E BF   0409               stx    utask  E151 F6   0459               ldb    NUM_TSK   # tasks in system  E154 34   04                 pshs   b  E156 10BE 049C               ldy    tsktab    task 1  E15A 31   A9 00D7            leay   TSKSIZ,y  E15E               10                                            E15E 86   04       11        lda    #TFREE    mark all tasks free  E160 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             13:54:42  Feb 13, 2024   Page   27Table      Initialization                             E163 26   02                 bne    15f  E165 86   05                 lda    #TSYS     the system task is never free  E167 A7   04       15        sta    tsstat,x  E169 86   FF                 lda    #$FF      not associated with a terminal  E16B A7   0D                 sta    tsdev,x  E16D A7   0E                 sta    tsdev+1,x  E16F 33   89 00D7            leau   TSKSIZ,x  initialize stack  E173 CC   E313               ldd    #IO_han  E176 34   20                 pshs   y  E178 AC   E1                 cmpx   ,s++      task 1?  E17A 26   03                 bne    20f       no - normal I/O handling task  E17C CC   E3E3               ldd    #SI_HAN   yes - special terminal interrupt handling task  E17F 36   06       20        pshu   d  E181 EF   88 11              stu    usp,x  E184 EF   88 13              stu    umark0,x  E187 30   89 00D7            leax   TSKSIZ,x  E18B 6A   E4                 dec    0,s       done?  E18D 26   CF                 bne    10b  E18F 32   61                 leas   1,s       clean up stack  E191 CC   0000               ldd    #0        nothing running or sleeping  E194 FD   0403               std    runlst  E197 FD   0405               std    slplst  E19A FD   0407               std    slplst+tsslnk  E19D 30   A4                 leax   0,y       start interrupt handling task  E19F BD   E53A               jsr    makrdy  E1A2 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1A3 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1A5 B7   8400               sta    tim_base  interrupt enable  E1A8 39                      rts                                                         E1A9  timerack  equ    *  E1A9 86   01                 lda    #1  E1AB B7   8401               sta    tim_rest  reset interrupt  E1AE 39                      rts                       E1AF B6   8400     timerchk  lda    tim_base  E1B2 84   80                 anda   #%10000000 interrupt flag  E1B4 39                      rtsFIO Simulation Structure             13:54:42  Feb 13, 2024   Page   28IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1B5  mod_tbl   equ    *  E1B5 E5C7 E1BB               fdb    DEV_SOCK,WZ5_name  E1B9 0000                    fdb    0                     *  E1BB 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             13:54:42  Feb 13, 2024   Page   29FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     *  E1C6               fio_reset                     * when here, all storage locations have been erased already                     *  E1C6 8E   0000               ldx    #0  E1C9 9F   14                 stx    fifo_get  set Q pointers  E1CB 9F   16                 stx    fifo_put  E1CD 8E   0370               ldx    #WZNETOF  E1D0 9F   1A                 stx    fifo_us1  E1D2 8E   0220               ldx    #WZSKOFF  E1D5 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1D7 86   08                 lda    #8  E1D9 A7   84       01        sta    wzenum,x  E1DB 30   88 2A              leax   WZSIZE,x  to next  E1DE 4A                      deca  E1DF 26   F8                 bne    01b                     *  E1E1 BE   E05C               ldx    fio_dsz  E1E4 30   1E                 leax   -2,x      one from top  E1E6 CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E1E9 C6   FF       fio_wait  ldb    #255      Spin counter                     *  E1EB               00  E1EB 6D   84                 tst    0,x       fio_cpuF  E1ED 27   16                 beq    10f                     *  E1EF 5A                      decb  E1F0 26   F9                 bne    00b       jump back if not ready                     *  E1F2 33   5F                 leau   -1,u  E1F4 1183 0000               cmpu   #0  E1F8 26   EF                 bne    fio_wait  E1FA 8E   E03D               ldx    #CPU_down  E1FD 17   0FD3               lbsr   DB_pdata  E200 17   0FCA               lbsr   DB_main  E203 20   C1                 bra    fio_reset                     * reset OK  E205 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     *  E206 BE   0453     fio_irq   ldx    int_ptr   input message pointer  E209 96   00                 lda    cpu_fio   move REQUEST  E20B A7   80                 sta    ,x+FIO Simulation Structure             13:54:43  Feb 13, 2024   Page   30FIO        Simulation Routines                        E20D DC   01                 ldd    cpu_fio1  sequence # TASK ID  E20F ED   81                 std    ,x++  E211 96   03                 lda    cpu_fio2  specific DATA  E213 A7   80                 sta    ,x+  E215 DC   04                 ldd    cpu_fio3  device major/minor  E217 ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E219 FE   E05C               ldu    fio_dsz  E21C 33   5F                 leau   -1,u  E21E 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E220 BF   0453               stx    int_ptr   update pointer  E223 108E 0447               ldy    #int_buf  get message from buffer  E227 A6   A4                 lda    0,y       -- Send interrupt command?  E229 81   38                 cmpa   #S_INTRPT  E22B 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E22D 10BF 0453               sty    int_ptr   reset pointer  E231 E6   23                 ldb    3,y       signal  E233 AE   24                 ldx    4,y       SOCK reference                     *  E235 BD   E615               jsr    sdev_sig  send device signal  E238 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E23A BE   049C     30        ldx    tsktab    search for an available task  E23D F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E240 A6   04       32        lda    tsstat,x  E242 81   04                 cmpa   #TFREE    looking for a "free" task  E244 27   0E                 beq    40f                     *  E246 30   89 00D7            leax   TSKSIZ,x  E24A 5A                      decb  E24B 26   F3                 bne    32b                     *  E24D C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E24F BD   E270               jsr    fio_msg  E252 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E254 108E 0447     40        ldy    #int_buf  get message from buffer  E258 10BF 0453               sty    int_ptr   reset pointer  E25C E6   A0                 ldb    ,y+       command byte  REQUESTFIO Simulation Structure             13:54:43  Feb 13, 2024   Page   31FIO        Simulation Routines                        E25E E7   09                 stb    tscmd,x   save for task  E260 EC   A1                 ldd    ,y++      sequence #    task ID  E262 ED   0A                 std    tsseq,x  E264 E6   A0                 ldb    ,y+       command specific DATA  E266 E7   0C                 stb    tstval,x  E268 EC   A1                 ldd    ,y++      associate with terminal major/minor  E26A ED   0D                 std    tsdev,x  E26C BD   E53A               jsr    makrdy    make task ready to run                     *  E26F 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  E270 34   54       fio_msg   pshs   b,x,u     save register  E272 FE   E05C               ldu    fio_dsz  E275 33   5E                 leau   -2,u      one off top  E277 D7   09                 stb    fio_cpu   set up mailbox value                       E279 86   FF       5         lda    #$FF      tell CPU mailbox full  E27B A7   C4                 sta    0,u       fio_cpuF  E27D 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  E280 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E282 27   06                 beq    20f       jump if consumed                     *  E284 30   1F                 leax   -1,x      time-out yet?  E286 26   F8                 bne    10b                     *  E288 20   F3                 bra    05b       try again                     *  E28A 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E28C 34   16       fio_response pshs d,x  E28E 8D   18                 bsr    FIO_get   access FIO  E290 BE   0409               ldx    utask     task ID  E293 EC   0A                 ldd    tsseq,x  E295 DD   0A                 std    fio_cpu1  E297 EC   0D                 ldd    tsdev,x   device info  E299 DD   0D                 std    fio_cpu3FIO Simulation Structure             13:54:43  Feb 13, 2024   Page   32FIO        Simulation Routines                        E29B A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E29D 97   0C                 sta    fio_cpu2  E29F E6   61                 ldb    1,s       is RESPONSE code >E2A1 BD   E270               jsr    fio_msg  E2A4 8D   17                 bsr    FIO_rel   release FIO  E2A6 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2A8 34   76       FIO_get   pshs   d,x,y,u   save registers  E2AA 108E 0446     10        ldy    #FIO_lock is the device locked  E2AE 6D   A4                 tst    0,y  E2B0 27   07                 beq    20f       no - go get it                     *  E2B2 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2B4 BD   E574               jsr    sleep  E2B7 20   F1                 bra    10b       try again                     *  E2B9 6C   A4       20        inc    0,y       mark in use  E2BB 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2BD 34   76       FIO_rel   pshs   d,x,y,u  E2BF 108E 0446               ldy    #FIO_lock  E2C3 6F   A4                 clr    0,y  E2C5 BD   E550               jsr    wakeup  E2C8 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2CA 34   04       FIFOgeta  pshs   b  E2CC 8D   05                 bsr    FIFO_get  E2CE 35   02                 puls   a  E2D0 1E   89                 exg    a,b  E2D2 39                      rts                     *  E2D3 34   12       FIFO_get  pshs   a,x  E2D5 DC   12                 ldd    fifo_cnt  any data?  E2D7 27   15                 beq    99f       no - exit                     *  E2D9                         decd   yes       - adjust count  E2D9 104A                    fdb    $104a                               endm  E2DB DD   12                 std    fifo_cnt  E2DD 9E   14                 ldx    fifo_get  get consumer pointer  E2DF E6   88 20              ldb    fifo,x    fetch byteFIO Simulation Structure             13:54:43  Feb 13, 2024   Page   33FIO        Simulation Routines                        E2E2 30   01                 leax   1,x       bump pointer  E2E4 BC   E05A               cmpx   fio_fsz   end of fifo?  E2E7 26   03                 bne    10f                     *  E2E9 8E   0000               ldx    #0        reset pointer                     *  E2EC 9F   14       10        stx    fifo_get                     *  E2EE 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E2F0 34   04       FIFOputa  pshs   b  E2F2 1F   89                 tfr    a,b  E2F4 8D   02                 bsr    FIFO_put  E2F6 35   84                 puls   b,pc                     *  E2F8 34   16       FIFO_put  pshs   d,x  E2FA 9E   16                 ldx    fifo_put  get consumer pointer  E2FC E7   88 20              stb    fifo,x    store byte  E2FF 30   01                 leax   1,x       bump pointer  E301 BC   E05A               cmpx   fio_fsz   end of FIFO?  E304 26   03                 bne    10f                     *  E306 8E   0000               ldx    #0        reset pointer  E309 9F   16       10        stx    fifo_put                     *  E30B DC   12                 ldd    fifo_cnt  E30D                         incd  E30D 104C                    fdb    $104c                               endm  E30F DD   12                 std    fifo_cnt  E311 35   96       99        puls   d,x,pcFIO Simulation Structure             13:54:44  Feb 13, 2024   Page   34IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E313               IO_han    seti   block     interrupts  E313 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E315               10        clri  E315 1C   AF                 andcc  #!(FF|IF)                               endm  E317 BE   0409               ldx    utask     get task control block address  E31A A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E31C 44                      lsra             isolate    command  E31D 44                      lsra  E31E 44                      lsra                     **        lsra  E31F 81   15                 cmpa   #MAX_S_NUM  E321 22   69                 bhi    bad_cmd                     *  E323 48                      lsla             --   word index on command  E324 34   10                 pshs   x  E326 8E   04A0               ldx    #dev_tab  E329 AE   02                 ldx    dev_type,x get handler table address  E32B 10AE 86                 ldy    a,x       get processor address  E32E 35   10                 puls   x  E330 34   20                 pshs   y  E332 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E335 27   0A                 beq    05f       else it is target ponter  E337 10AF E4                 sty    0,s  E33A 108E 0000               ldy    #0  E33E 10AF 0F                 sty    tsagin,x  reset pointer  E341 35   20       05        puls   y         change address  E343 4F                      clra                     *  E344 8E   E371               ldx    #IO_end   interrupt handler address  E347 34   10                 pshs   x  E349 BE   0409               ldx    utask     task pointer  E34C 10EF 88 15              sts    umark1,x  E350 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             13:54:44  Feb 13, 2024   Page   35IO         Command Handler                            E352 1E   03                 exg    d,u  E354 84   07                 anda   #%00000111 mask off address bits  E356 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E358 AD   A4                 jsr    0,y       perform operation & return status  E35A 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E35C BE   0409               ldx    utask     restore task pointer  E35F 108C FFFF               cmpy   #$ffff  E363 26   09                 bne    20f                     * task is NOT done yet  E365 86   BA                 lda    #POLPRI  E367 A7   05                 sta    tsprir,x  at lower prio  E369 BD   E48E               jsr    change  E36C 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E36E BD   E28C     20        jsr    fio_response                     *                     * task is done                     *  E371               IO_end    seti   mask      interrupts  E371 1A   50                 orcc   #FF|IF                               endm  E373 BE   0409               ldx    utask     restore task control block address  E376 A7   0C                 sta    tstval,x  remember transaction value sent  E378 E7   09                 stb    tscmd,x   and command response  E37A 86   04                 lda    #TFREE    mark task "terminated & free"  E37C A7   04                 sta    tsstat,x  E37E 86   FF                 lda    #$FF      disassociate from any terminal  E380 A7   0D                 sta    tsdev,x  E382 A7   0E                 sta    tsdev+1,x  E384 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E386 BD   E494     90        jsr    rsched    run other tasks >E389 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E38C               bad_cmdFIO Simulation Structure             13:54:44  Feb 13, 2024   Page   36IO         Command Handler                            E38C C6   81                 ldb    #E_BADCMD error code  E38E 39                      rtsFIO Simulation Structure             13:54:44  Feb 13, 2024   Page   37Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E38F  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E38F BE   E05C     10        ldx    fio_dsz  E392 30   1F                 leax   -1,x  E394 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E396 27   03                 beq    99f       no - move on  E398 BD   E206               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E39B 3B            99        rti              return from interrupt                     *  E39C 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3A7 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             13:54:44  Feb 13, 2024   Page   38Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3B4 34   36       int_all   pshs   d,x,y  E3B6 F6   0459               ldb    NUM_TSK  E3B9 C0   02                 subb   #2  E3BB 34   04                 pshs   b  E3BD BE   049C               ldx    tsktab  E3C0 30   89 01AE            leax   2*TSKSIZ,x                     *  E3C4 EC   61       10        ldd    1,s  E3C6 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3C9 26   0C                 bne    20f                     *  E3CB BC   0409               cmpx   utask     make sure I don't get blown away  E3CE 27   07                 beq    20f                     *  E3D0 34   16                 pshs   d,x  E3D2 BD   E5A9               jsr    xmtint    interrupt task  E3D5 35   16                 puls   d,x                     *  E3D7 30   89 00D7  20        leax   TSKSIZ,x  next task  E3DB 6A   E4                 dec    0,s       more tasks?  E3DD 26   E5                 bne    10b  E3DF 32   61                 leas   1,s                     *  E3E1 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             13:54:45  Feb 13, 2024   Page   39Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E3E3 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E3E7                         seti  E3E7 1A   50                 orcc   #FF|IF                               endm  E3E9 FE   0444               ldu    SI_Q_ptr  get current Q ptr  E3EC 1183 040E               cmpu   #SI_Q     anything in Q?  E3F0 26   07                 bne    20f       yes - go process it                     *  E3F2 C6   D8                 ldb    #SIQPRI   wait for something to do  E3F4 BD   E574               jsr    sleep  E3F7 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E3F9 E6   C2       20        ldb    0,-u      B = Interrupt #  E3FB 34   04                 pshs   b  E3FD EC   C3                 ldd    0,--u     A = Device #  E3FF 34   06                 pshs   d  E401 EC   C3                 ldd    0,--u     task ID  E403 34   06                 pshs   d         save registers  E405 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E408 E6   63                 ldb    3,s       set up to flush all input for this terminal                     **!       jsr     ttftab     X=ttytab, U=device table                     **!       jsr     flushi  E40A                         clri   allow     interrupts  E40A 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E40C BD   E2A8               jsr    FIO_get   get access to FIO  E40F EC   E1                 ldd    0,s++     task ID  E411 DD   0A                 std    fio_cpu1  E413 EC   E1                 ldd    ,s++      terminal #  E415 DD   0D                 std    fio_cpu3  terminal  E417 E6   E0                 ldb    ,s+       interrupt #  E419 D7   0C                 stb    fio_cpu2  signal  E41B C6   07                 ldb    #R_INTRPT  E41D BD   E270               jsr    fio_msg   send interrupt message  E420 BD   E2BD               jsr    FIO_rel   release access to FIO  E423 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = SOCK address                     *   jsr send_SIFIO Simulation Structure             13:54:45  Feb 13, 2024   Page   40Terminal   Interrupt Handling Task                                       *  E425 34   76       send_SI   pshs   d,x,y,u   save registers  E427 FE   0444               ldu    SI_Q_ptr  get Q head  E42A 1183 0444               cmpu   #SI_Q_ptr check for overflow  E42E 24   0D                 bhs    90f       exit if so - sorry                     *  E430 34   04                 pshs   b                     **!       ldd     ttask,x    task id  E432 ED   C1                 std    0,u++                     **!       ldd     tdevic,x   get terminal #  E434 ED   C1                 std    0,u++     place value in Queue  E436 35   04                 puls   b  E438 E7   C0                 stb    0,u+  E43A FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E43D 108E 040E     90        ldy    #SI_Q     wake up Queue server  E441 BD   E550               jsr    wakeup  E444 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             13:54:45  Feb 13, 2024   Page   41History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E446 34   16       H_cpu     pshs   d,x  E448 BE   049A               ldx    hstptr    get history queue pointer  E44B 96   00                 lda    cpu_fio  E44D A7   84                 sta    hst_cmd,x  E44F 96   01                 lda    cpu_fio1  E451 A7   01                 sta    hst_seq,x  E453 96   04                 lda    cpu_fio3  E455 A7   02                 sta    hst_tty,x  E457 96   03                 lda    cpu_fio2  E459 A7   03                 sta    hst_val,x  E45B 30   04                 leax   HRECSIZ,x  E45D 8C   049A               cmpx   #hstptr   end of Queue?  E460 25   03                 blo    10f  E462 8E   045A               ldx    #hstbuf  E465 BF   049A     10        stx    hstptr  E468 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E46A 34   16       H_fio     pshs   d,x  E46C BE   049A               ldx    hstptr    get history queue pointer  E46F 96   09                 lda    fio_cpu  E471 A7   84                 sta    hst_cmd,x  E473 96   0A                 lda    fio_cpu1  E475 A7   01                 sta    hst_seq,x  E477 96   0D                 lda    fio_cpu3  E479 A7   02                 sta    hst_tty,x  E47B 96   0C                 lda    fio_cpu2  E47D A7   03                 sta    hst_val,x  E47F 30   04                 leax   HRECSIZ,x  E481 8C   049A               cmpx   #hstptr   end of Queue?  E484 25   03                 blo    10f  E486 8E   045A               ldx    #hstbuf  E489 BF   049A     10        stx    hstptr  E48C 35   96                 puls   d,x,pcFIO Simulation Structure             13:54:45  Feb 13, 2024   Page   42Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E48E BE   0409     change    ldx    utask     point to task table entry >E491 17   006D               lbsr   putrun    put on ready list                     *  E494               rsched    seti   mask      interrupts  E494 1A   50                 orcc   #FF|IF                               endm  E496 BE   0409               ldx    utask     point to current task  E499 10EF 88 13              sts    umark0,x  save stack pointers  E49D BE   049C               ldx    tsktab    point to task table  E4A0 8D   23                 bsr    swtchu    switch users  E4A2 7F   040D               clr    idle      reset idle/running flag                     *  E4A5 7F   040C     rsche2    clr    chproc    reset change flag >E4A8 17   0025               lbsr   getjob    get a new task  E4AB 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4AD 86   7F       05        lda    #127      set higheset priority  E4AF B7   040B               sta    jobpri    set as current  E4B2                         clri   clear     interrupts  E4B2 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4B4 12                      nop  E4B5                         seti  E4B5 1A   50                 orcc   #FF|IF                               endm  E4B7 20   EC                 bra    rsche2    loop til find a ready one                     *  E4B9 F7   040B     rsche3    stb    jobpri    set new priority  E4BC 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             13:54:46  Feb 13, 2024   Page   43Scheduler  routines                                   E4BE BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4C1 CC   0001               ldd    #1        return 1 to new task  E4C4 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4C5 35   20       swtchu    puls   y         get return address  E4C7 BF   0409               stx    utask     set up new running task  E4CA 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4CE 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             13:54:46  Feb 13, 2024   Page   44Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4D0 5F            getjob    clrb             clear      flag  E4D1 BE   0403               ldx    runlst    point to head of list  E4D4 27   1F                 beq    getjo6    empty list?                     *  E4D6 A6   04       getjo1    lda    tsstat,x  get status byte  E4D8 81   01                 cmpa   #TRUN     is it in run state?  E4DA 26   1B                 bne    getjo8                     *  E4DC 5D                      tstb             first      in list?  E4DD 27   06                 beq    getjo2                     *  E4DF EC   84                 ldd    tslink,x  remove from list  E4E1 ED   A4                 std    tslink,y  E4E3 20   07                 bra    getjo4                     *  E4E5 10AE 84       getjo2    ldy    tslink,x  remove from list head  E4E8 10BF 0403               sty    runlst    set new head                     *  E4EC E6   05       getjo4    ldb    tsprir,x  get priority  E4EE 6F   84                 clr    tslink,x  zero out link  E4F0 6F   01                 clr    tslink+1,x so not run list  E4F2 86   FF                 lda    #$ff      set ne status  E4F4 39                      rts              return                         *  E4F5 4F            getjo6    clra             set        eq status  E4F6 39                      rts                     *  E4F7 1F   12       getjo8    tfr    x,y       save old pos  E4F9 AE   84                 ldx    tslink,x  follow link  E4FB 27   F8                 beq    getjo6                     *  E4FD C6   01                 ldb    #1        set flag  E4FF 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             13:54:46  Feb 13, 2024   Page   45Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E501 34   01       putrun    pshs   cc        save status  E503                         seti   mask      interrupts  E503 1A   50                 orcc   #FF|IF                               endm  E505 10BE 0403               ldy    runlst    point to head  E509 26   0A                 bne    putru2  E50B BF   0403               stx    runlst    set new head                     *  E50E CC   0000     putru1    ldd    #0        set last link  E511 ED   84                 std    tslink,x  E513 35   81                 puls   cc,pc     return                     *  E515 E6   05       putru2    ldb    tsprir,x  get priority  E517 E1   25                 cmpb   tsprir,y  look for correct prior slot  E519 2F   08                 ble    putru4                     *  E51B FC   0403               ldd    runlst  E51E BF   0403               stx    runlst    set new head  E521 20   0F                 bra    putru5    link in rest                     *  E523 1F   23       putru4    tfr    y,u       save last look  E525 10AE A4                 ldy    tslink,y  follow link  E528 27   0C                 beq    putru6                     *  E52A E1   25                 cmpb   tsprir,y  check priority  E52C 2F   F5                 ble    putru4                     *  E52E EC   C4                 ldd    tslink,u  link into list here  E530 AF   C4                 stx    tslink,u                     *  E532 ED   84       putru5    std    tslink,x  E534 35   81                 puls   cc,pc     return                     *  E536 AF   C4       putru6    stx    tslink,u  E538 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             13:54:47  Feb 13, 2024   Page   46Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E53A 86   01       makrdy    lda    #TRUN     set status  E53C A7   04                 sta    tsstat,x  E53E CC   0000               ldd    #0        clear events flag  E541 ED   06                 std    tsevnt,x  E543 8D   BC                 bsr    putrun    put on ready list  E545 E6   05                 ldb    tsprir,x  get priority  E547 F1   040B               cmpb   jobpri    higher than current?  E54A 2F   03                 ble    makrd6                     *  E54C 7C   040C               inc    chproc    set change flag                     *  E54F 39            makrd6    rts              return    FIO Simulation Structure             13:54:47  Feb 13, 2024   Page   47Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E550 34   57       wakeup    pshs   cc,d,x,u  save registers  E552                         seti   mask      interupts  E552 1A   50                 orcc   #FF|IF                               endm  E554 CE   0405               ldu    #slplst  E557 AE   42                 ldx    tsslnk,u  point to sleep list  E559 27   0B                 beq    wakeu4                     *  E55B 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E55E 27   08                 beq    wakeu5  E560 33   84                 leau   0,x       mark this entry                     *  E562 AE   02       wakeu3    ldx    tsslnk,x  follow chain  E564 26   F5                 bne    wakeu2    end of list?                     *  E566 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E568 34   70       wakeu5    pshs   x,y,u     save registers  E56A EC   02                 ldd    tsslnk,x  remove from list  E56C ED   42                 std    tsslnk,u  E56E 8D   CA                 bsr    makrdy    put on ready list  E570 35   70                 puls   u,x,y  E572 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             13:54:47  Feb 13, 2024   Page   48Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E574 34   51       sleep     pshs   cc,x,u    save registers  E576 BE   0409               ldx    utask     point to task  E579 6D   08                 tst    tssgnl,x  any signals waiting?  E57B 26   1F                 bne    sleep7                     *  E57D                         seti   mask      ints  E57D 1A   50                 orcc   #FF|IF                               endm  E57F E7   05                 stb    tsprir,x  set priority  E581 10AF 06                 sty    tsevnt,x  set event  E584 86   02                 lda    #TSLEEP   set status  E586 A7   04                 sta    tsstat,x  E588 FC   0407               ldd    slplst+tsslnk get head of list  E58B ED   02                 std    tsslnk,x  set new link  E58D BF   0407               stx    slplst+tsslnk set new head  E590 17   FF01               lbsr   rsched    reschedule cpu                       E593 BE   0409     20        ldx    utask     get task entry  E596 6D   08                 tst    tssgnl,x  any signals waiting?  E598 26   02                 bne    sleep7                     *  E59A 35   D1                 puls   cc,x,u,pc return                     *  E59C BE   0409     sleep7    ldx    utask     reset signal  E59F 6F   08                 clr    tssgnl,x  E5A1 EC   88 15              ldd    umark1,x  stack reset point  E5A4 35   51                 puls   cc,x,u    reset cc and registers  E5A6 1F   04                 tfr    d,s       change stacks  E5A8 39                      rts              returnFIO Simulation Structure             13:54:47  Feb 13, 2024   Page   49Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5A9 34   76       xmtint    pshs   d,x,y,u   save registers  E5AB A6   04                 lda    tsstat,x  get task state  E5AD 81   01                 cmpa   #TRUN     running?  E5AF 26   06                 bne    10f       no - try something else                     *  E5B1 86   01                 lda    #1        set signal  E5B3 A7   08                 sta    tssgnl,x  E5B5 20   0E                 bra    99f       exit                     *  E5B7 81   02       10        cmpa   #TSLEEP   task sleeping?  E5B9 26   0A                 bne    99f       no - can't send interrupt                     *  E5BB 86   01                 lda    #1        set signal  E5BD A7   08                 sta    tssgnl,x  E5BF 10AE 06                 ldy    tsevnt,x  wake task up >E5C2 17   FF8B               lbsr   wakeup                     *  E5C5 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             13:54:47  Feb 13, 2024   Page   50Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5C7               DEV_SOCK  E5C7 E38C                    fdb    bad_cmd   0  E5C9 E656                    fdb    skopen    S_OPEN    1 open socket  E5CB E6DD                    fdb    skclos    S_CLOSE   2 close socket  E5CD E8D8                    fdb    skreqwr   S_RQWR    3 request write to socket  E5CF E919                    fdb    sksend    S_SEND    4 write data to socket  E5D1 E86E                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5D3 E8B6                    fdb    skrecv    S_RECV    6 read data from socket  E5D5 EB5D                    fdb    skintrp   S_INTRPT  7 interrupt socket  E5D7 E72A                    fdb    skconn    S_CONNECT 8 connect socket  E5D9 E7C0                    fdb    skbind    S_BIND    9 bind socket  E5DB E805                    fdb    sklist    S_LISTEN  10 listen on socket  E5DD E837                    fdb    skacpt    S_ACCEPT  11 accept connection  E5DF EB5D                    fdb    skdisc    S_DISCON  12 disconnect socket  E5E1 EB5D                    fdb    sksmac    S_SNDMAC  13 send mac  E5E3 EB5D                    fdb    skskep    S_SNDKEP  14 send keep alive  E5E5 EAA5                    fdb    skspcl    S_SPCL    15 special command  E5E7 E93B                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E5E9 E9A9                    fdb    skurrd    S_RREAD   17 read data readfrom  E5EB E9D3                    fdb    skurwt    S_WRQSTO  18 request write sendto  E5ED EA6F                    fdb    skusnt    S_WSNDTO  19 write data sendto  E5EF EA22                    fdb    skusnm    S_WSNDTM  20 write data send more                     *  E5F1 E614                    fdb    skinthan  16 socket interrupt handler  E5F3 E5F7                    fdb    skinit    17 socket initialization  E5F5 E611                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                          *                     * do everything to init the system                     *               E5F7  skinit    equ    *  E5F7 BD   EB64               jsr    spinit    set SPI  E5FA C6   80                 ldb    #%10000000 software reset  E5FC BD   EC34               jsr    PCRMR  E5FF BD   EC25     01        jsr    GCRMR  E602 5D                      tstb  E603 2B   FA                 bmi    01bFIO Simulation Structure             13:54:48  Feb 13, 2024   Page   51wz socket interface routines                          E605 C6   78                 ldb    #%01111000 power up  E607 BD   EE12               jsr    PCRPHY    set the PHY part  E60A CC   8000               ldd    #32768  E60D FD   0457               std    wzanyp    set value for Source port  E610 39                      rts                                          *                     * test if device is present                     *  E611 1A   01       sktest    sec              yes  E613 39                      rts                                          *                     * skinthan, fromddevice table                     *               E614  skinthan  equ    *  E614 39                      rts                                          *                     * device signal handle                     *               E615  sdev_sig  equ    *  E615 39                      rts                                          *                     * get a new source port                     *  E616 FC   0457     sknewp    ldd    wzanyp    else create one  E619                         incd  E619 104C                    fdb    $104c                               endm  E61B 1083 FFF0               cmpd   #$FFF0  E61F 25   03                 blo    03f  E621 CC   8000               ldd    #$8000  E624 FD   0457     03        std    wzanyp  E627 39                      rts                                                               *                     * wzdevt, device test, return Z if running, NZ if not                     *  E628 34   22       wzdevt    pshs   a,y  E62A 109E 1A                 ldy    fifo_us1  device info  E62D A6   A8 12              lda    wzdsta,y  E630 81   FF                 cmpa   #$ff      open  E632 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info                     *  E634 A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E636                         trfr   A,EFIO Simulation Structure             13:54:48  Feb 13, 2024   Page   52wz socket interface routines                          E636 1F                      fcb    $1f  E637 8E                      fcb    A<<4|E                               endm  E638 6F   47                 clr    wzerr,u   init result  E63A 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E63B 34   06       skctcp    pshs   d  E63D EC   C8 26              ldd    wztype,u  SOCK_STREAM  E640 C1   01                 cmpb   #SK_STRM  is TCP  E642 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E644 34   06       skcudp    pshs   d  E646 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E649 C1   02                 cmpb   #SK_DGRM  is UDP  E64B 35   86                 puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E64D 34   06       skcraw    pshs   d  E64F EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E652 C1   03                 cmpb   #SK_RAW   is RAW socket  E654 35   86                 puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E656  skopen    equ    * >E656 BD   E634               jsr    skfres                     *                     * check if DEVICE is active                     * >E659 BD   E628               jsr    wzdevt  E65C 27   06                 beq    11f  E65E BD   E6F8               jsr    skclin    NO, close internal and don't start >E661 16   004B     04        lbra   skoper1                     *FIO Simulation Structure             13:54:49  Feb 13, 2024   Page   53wz socket interface routines                                             * retry, we do all things                     *  E664 A6   42       11        lda    wzfsta,u  check if allocated by OS  E666 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  E668 6F   43                 clr    wzflg,u   erase flags  E66A EC   C8 24              ldd    wzfaml,u  E66D C1   02                 cmpb   #AF_INET  E66F 26   F0                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E671 EC   C8 26              ldd    wztype,u  E674 C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E676 27   1E                 beq    01f  E678 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E67A 27   16                 beq    21f  E67C C1   03                 cmpb   #SK_RAW   SOCK_RAW  E67E 26   33                 bne    skoper2                     * raw socket  E680 EC   C8 28              ldd    wzprot,u  what is the protocol option?  E683 C1   06                 cmpb   #SP_TCP   not allowed  E685 27   2C                 beq    skoper2  E687 C1   11                 cmpb   #SP_UDP   not allowed  E689 27   28                 beq    skoper2  E68B BD   EF75               jsr    PSRPROT   set protocol                     *  E68E C6   04                 ldb    #%00000100 MACRAW  E690 20   06                 bra    07f                     * dgram  E692 C6   02       21        ldb    #%00000010 UDP  E694 20   02                 bra    07f                     * TCP socket  E696 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E698 BD   EE3F     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E69B C6   01                 ldb    #WCOPEN   open the device  E69D E7   44                 stb    wzcmnd,u  copy command  E69F BD   EE5D               jsr    PSRCR                     *                     * interrupts not expected                     *  E6A2 BD   EE91     21        jsr    GSRSR     get status  E6A5 E7   45                 stb    wzstat,u  E6A7 C1   00                 cmpb   #WSCLSD  E6A9 27   F7                 beq    21b       wait until updated                     *FIO Simulation Structure             13:54:49  Feb 13, 2024   Page   54wz socket interface routines                          E6AB 4F                      clra  E6AC C6   01                 ldb    #R_OPEN   response  E6AE 39            99        rts                     *  E6AF 86   01       skoper1   lda    #1        device not initialized  E6B1 20   02                 bra    12f  E6B3 86   02       skoper2   lda    #2        type error  E6B5 C6   C0       12        ldb    #E_SOCKET  E6B7 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E6B9 34   10       num2bt    pshs   x  E6BB 8E   E6D4               ldx    #bittab  E6BE 3A                      abx  E6BF E6   84                 ldb    0,x  E6C1 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E6C3 34   10       bt2num    pshs   x  E6C5 8E   E6D4               ldx    #bittab  E6C8 6F   E2                 clr    0,-s  E6CA E1   80       02        cmpb   0,x+  E6CC 27   04                 beq    01f  E6CE 6C   E4                 inc    0,s  E6D0 20   F8                 bra    02b  E6D2 35   94       01        puls   b,x,pc                                          * table  E6D4 00            bittab    fcb    0  E6D5 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E6D9 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                          ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E6DD  skclos    equ    *  E6DD BD   E634               jsr    skfres  E6E0 C6   08                 ldb    #WCDISC  E6E2 E7   44                 stb    wzcmnd,u  E6E4 BD   EE5D               jsr    PSRCR     send disconnect                     *  E6E7 8D   0F                 bsr    skclin  E6E9                         clrd  E6E9 104F                    fdb    $104fFIO Simulation Structure             13:54:49  Feb 13, 2024   Page   55wz socket interface routines                                                       endm  E6EB ED   C8 24              std    wzfaml,u  E6EE ED   C8 26              std    wztype,u  E6F1 ED   C8 28              std    wzprot,u                     *  E6F4 4F                      clra  E6F5 C6   02                 ldb    #R_CLOSE  response  E6F7 39                      rts                                          *                     * wzclin, close interal                     *  E6F8 34   06       skclin    pshs   d  E6FA C6   10                 ldb    #WCCLOS   do close  E6FC E7   44                 stb    wzcmnd,u  E6FE BD   EE5D               jsr    PSRCR                     *                     * erase registers in device                     *  E701 CC   0000               ldd    #0  E704 BD   EEAF               jsr    PSRPORT   source port                     *  E707 A6   42                 lda    wzfsta,u  E709 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E70B A7   42                 sta    wzfsta,u  E70D CC   0000               ldd    #0  E710 ED   48                 std    wzxfer,u  clear remaining size                     *  E712 BD   EE91     91        jsr    GSRSR  E715 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E717 CC   0000               ldd    #0  E71A ED   C8 10              std    wzsprt,u  erase old info  E71D ED   C8 14              std    wzipad,u  E720 ED   C8 16              std    wzipad+2,u  E723 ED   C8 12              std    wzdprt,u  E726 E7   43                 stb    wzflg,u   clear flags                     *  E728 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E72A  skconn    equ    *  E72A BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *FIO Simulation Structure             13:54:49  Feb 13, 2024   Page   56wz socket interface routines                          E72D BD   E628               jsr    wzdevt  E730 27   06                 beq    01f >E732 BD   E6DD               jsr    skclos    NO, don't start >E735 16   007A     02        lbra   skcner4  E738 BD   E63B     01        jsr    skctcp    not in tcp, illegal  E73B 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E73D BD   EE91     11        jsr    GSRSR     status  E740 E7   45                 stb    wzstat,u  check if properly setup  E742 C1   13                 cmpb   #WSINIT   SHOULD BE >E744 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E748 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E74B                         ordx   wzipad+2,IU  E74B 10AA                    fdb    $10aa  E74D                         doindx wzipad+2,IU  E74D C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E74F 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E751 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E754                         incd  E754 104C                    fdb    $104c                               endm  E756 26   07                 bne    01f  E758 EC   C8 16              ldd    wzipad+2,u  E75B                         incd  E75B 104C                    fdb    $104c                               endm  E75D 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E75F EC   C8 12    01        ldd    wzdprt,u  check destination port  E762 27   4A                 beq    skcner5   is not set, error                     *  E764 BD   EF39               jsr    PSRDPOR   set destination port  E767 31   C8 14              leay   wzipad,u  load socket  E76A BD   EF13               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E76D BD   E616               jsr    sknewp    get new  E770 ED   C8 10              std    wzsprt,u  tell us what you took  E773 BD   EEAF               jsr    PSRPORT   source port                     *                     * do the CONNECT hereFIO Simulation Structure             13:54:50  Feb 13, 2024   Page   57wz socket interface routines                                             *  E776 C6   04                 ldb    #WCCONN  E778 E7   44                 stb    wzcmnd,u  E77A BD   EE5D               jsr    PSRCR     do connect                     *                     *                     *  E77D BD   E634     conlb1    jsr    skfres  E780 BD   EE91               jsr    GSRSR     update status  E783 E7   45                 stb    wzstat,u  E785 C1   17                 cmpb   #WSESTB  E787 27   0A                 beq    90f  E789 C1   00                 cmpb   #WSCLSD  E78B 27   16                 beq    skcner2  E78D 108E E77D               ldy    #conlb1  E791 20   04                 bra    polext                     *  E793 4F            90        clra  E794 C6   08                 ldb    #R_CONNECT  E796 39            99        rts                                          *                     * polexit, Y=where to return                     *  E797 10AF 0F       polext    sty    tsagin,x  here to restart  E79A C6   BA                 ldb    #POLPRI  E79C E7   05                 stb    tsprir,x  E79E 108E FFFF               ldy    #$ffFF  E7A2 39                      rts                       E7A3 C6   0C       skcner2   ldb    #R_DISCON  E7A5 20   EF                 bra    99b                       E7A7 BD   E6F8     skcner6   jsr    skclin    reset open  E7AA 86   0F                 lda    #15       not properly setup  E7AC 20   0E                 bra    09f  E7AE 86   0E       skcner5   lda    #14       destination port not set  E7B0 20   0A                 bra    09f  E7B2 86   0A       skcner4   lda    #10       device not initialized  E7B4 20   06                 bra    09f  E7B6 86   0B       skcner1   lda    #11       IP address invalid  E7B8 20   02                 bra    09f  E7BA 86   0D       skcner3   lda    #13  E7BC C6   C0       09        ldb    #E_SOCKET  E7BE 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structureFIO Simulation Structure             13:54:50  Feb 13, 2024   Page   58wz socket interface routines                                             *               E7C0  skbind    equ    *  E7C0 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E7C3 BD   E628               jsr    wzdevt  E7C6 1026 00E7               lbne   rdrqer1  E7CA BD   E63B               jsr    skctcp    check TCP  E7CD 27   12                 beq    01f  E7CF BD   E644               jsr    skcudp    check UDP >E7D2 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E7D6 BD   EE91               jsr    GSRSR     status  E7D9 E7   45                 stb    wzstat,u  E7DB C1   22                 cmpb   #WSUDP    check  E7DD 27   0D                 beq    03f  E7DF 20   07                 bra    04f                       E7E1 BD   EE91     01        jsr    GSRSR     status  E7E4 E7   45                 stb    wzstat,u  E7E6 C1   13                 cmpb   #WSINIT   should be >E7E8 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E7EC BD   E616     03        jsr    sknewp  E7EF ED   C8 12              std    wzdprt,u  E7F2 BD   EF39               jsr    PSRDPOR   destination port  E7F5 EC   C8 10              ldd    wzsprt,u  E7F8 BD   EEAF               jsr    PSRPORT   source port                     *  E7FB 31   C8 14              leay   wzipad,u  E7FE BD   EF13               jsr    PSRDIP    source IP                     *  E801 4F                      clra  E802 C6   09                 ldb    #R_BIND  E804 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *FIO Simulation Structure             13:54:51  Feb 13, 2024   Page   59wz socket interface routines                                       E805  sklist    equ    *  E805 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E808 BD   E628               jsr    wzdevt  E80B 1026 00A2     02        lbne   rdrqer1  E80F BD   E63B               jsr    skctcp  E812 26   F7                 bne    02b                     *                     * go on                     *                     *  E814 BD   EE91               jsr    GSRSR     status  E817 E7   45                 stb    wzstat,u                     *  E819 C1   00                 cmpb   #WSCLSD   closed?  E81B 27   0F                 beq    80f  E81D C1   13                 cmpb   #WSINIT   opened  E81F 26   0F                 bne    90f                     *  E821 C6   02                 ldb    #WCLIST  E823 E7   44                 stb    wzcmnd,u  E825 BD   EE5D               jsr    PSRCR                     *  E828 4F                      clra  E829 C6   0A                 ldb    #R_LISTEN  E82B 39                      rts                                          *  E82C 4F            80        clra  E82D C6   02                 ldb    #R_CLOSE  E82F 39                      rts                     *  E830 108E E805     90        ldy    #sklist  E834 7E   E797               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E837  skacpt    equ    *  E837 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E83A BD   E628               jsr    wzdevt >E83D 1026 0070     02        lbne   rdrqer1  E841 BD   E63B               jsr    skctcpFIO Simulation Structure             13:54:51  Feb 13, 2024   Page   60wz socket interface routines                          E844 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E846 BD   EE91               jsr    GSRSR     status  E849 E7   45                 stb    wzstat,u  E84B C1   17                 cmpb   #WSESTB   connected  E84D 26   10                 bne    01f  E84F BD   EF2A               jsr    GSRDPOR   fill in peer port  E852 ED   C8 12              std    wzdprt,u  E855 31   C8 14              leay   wzipad,u  E858 BD   EEFC               jsr    GSRDIP                     *  E85B 4F                      clra  E85C C6   0B                 ldb    #R_ACCEPT  E85E 39                      rts                     *  E85F C1   00       01        cmpb   #WSCLSD  E861 26   04                 bne    02f  E863 4F                      clra  E864 C6   02                 ldb    #R_CLOSE  E866 39                      rts                     *  E867 108E E837     02        ldy    #skacpt  E86B 7E   E797               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E86E  skreqrd   equ    *  E86E BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E871 BD   E628               jsr    wzdevt >E874 1026 0039     02        lbne   rdrqer1  E878 BD   E63B               jsr    skctcp    check TCP  E87B 26   F7                 bne    02b                     *                     * go on                     *                     *  E87D BD   EE91               jsr    GSRSR  E880 E7   45                 stb    wzstat,u  update status  E882 BD   F048               jsr    GSRRXRS   data available?  E885 ED   48                 std    wzxfer,u  E887 26   20                 bne    70fFIO Simulation Structure             13:54:51  Feb 13, 2024   Page   61wz socket interface routines                                             *  E889 A6   C8 26              lda    wztype,u  check flags  E88C 85   01                 bita   #WFNBLK   non block  E88E 26   15                 bne    75f                     *  E890 E6   45                 ldb    wzstat,u  E892 C1   17       17        cmpb   #WSESTB   still active  E894 27   08                 beq    20f                       E896 C1   1C                 cmpb   #WSCLWT  E898 27   13                 beq    60f  E89A C1   00                 cmpb   #WSCLSD  E89C 27   0F                 beq    60f                     *  E89E 108E E86E     20        ldy    #skreqrd  E8A2 7E   E797               jmp    polext                                          *************************  E8A5 4F            75        clra  E8A6 C6   15                 ldb    #R_RQRDNB tell no data  E8A8 39                      rts                                          * data present  E8A9 4F            70        clra  E8AA C6   05                 ldb    #R_RQRD  E8AC 39                      rts                                          * close socket and return  E8AD 4F            60        clra  E8AE C6   02                 ldb    #R_CLOSE  E8B0 39                      rts                                            E8B1 86   82       rdrqer1   lda    #130  E8B3 C6   C0                 ldb    #E_SOCKET  E8B5 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock                     *               E8B6  skrecv    equ    *  E8B6 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8B9 BD   E628               jsr    wzdevt >E8BC 1026 FFF1               lbne   rdrqer1  E8C0 BD   E63B     02        jsr    skctcp  E8C3 26   FB                 bne    02b                     *                     * we got info that data is present, get itFIO Simulation Structure             13:54:51  Feb 13, 2024   Page   62wz socket interface routines                                             * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E8C5 BD   F048               jsr    GSRRXRS   received size                     * D total aviable data  E8C8 BD   F118               jsr    RDSK2FB   transfer datat to fifo  E8CB ED   48                 std    wzxfer,u  save it  E8CD C6   40                 ldb    #WCRECV  E8CF E7   44                 stb    wzcmnd,u  E8D1 BD   EE5D               jsr    PSRCR     tell sender we took it                       E8D4 C6   06                 ldb    #R_READ   tell data in fifo  E8D6 4F                      clra  E8D7 39                      rts                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E8D8  skreqwr   equ    *  E8D8 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8DB BD   E628               jsr    wzdevt >E8DE 1026 FFCF     02        lbne   rdrqer1  E8E2 BD   E63B               jsr    skctcp  E8E5 26   F7                 bne    02b                     *                     * go on                     *                     *  E8E7 BD   EE91               jsr    GSRSR  E8EA E7   45                 stb    wzstat,u  update status  E8EC BD   EFFC               jsr    GSRTXFR   free size (remaining)  E8EF 10A3 4A                 cmpd   wzrqln,u  would it fit  E8F2 24   15                 bhs    70f                     *  E8F4 E6   45       10        ldb    wzstat,u  E8F6 C1   17                 cmpb   #WSESTB  E8F8 27   18                 beq    20f  E8FA C1   1C                 cmpb   #WSCLWT  E8FC 27   11                 beq    60f  E8FE C1   00                 cmpb   #WSCLSD  E900 26   10                 bne    20f  E902 CC   0000               ldd    #0  E905 ED   48                 std    wzxfer,u  E907 20   06                 bra    60f                     * data spaceFIO Simulation Structure             13:54:52  Feb 13, 2024   Page   63wz socket interface routines                          E909 4F            70        clra  E90A C6   03                 ldb    #R_RQWR  E90C 39                      rts                                          * data space exhausted, would block  E90D 4F            72        clra                     **        ldb     #R_RQWRWB  E90E 39                      rts                                          * close socket and return  E90F C6   02       60        ldb    #R_CLOSE  E911 39                      rts                                          *  E912 108E E8D8     20        ldy    #skreqwr  E916 7E   E797               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E919  sksend    equ    *  E919 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E91C BD   E628               jsr    wzdevt >E91F 1026 FF8E     02        lbne   rdrqer1  E923 BD   E63B               jsr    skctcp  E926 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E928 BD   EFFC               jsr    GSRTXFR   free size (remaining)                     * D = total available space  E92B BD   F167               jsr    WRFB2SK   transfer from fifo to socket  E92E ED   48                 std    wzxfer,u  save it  E930 C6   20                 ldb    #WCSEND  E932 E7   44                 stb    wzcmnd,u  E934 BD   EE5D               jsr    PSRCR     tell sender it is coming                       E937 C6   04                 ldb    #R_WRITE  tell data in fifo  E939 4F                      clra  E93A 39                      rts                                          ***************************************************************                     * skurrdf, request readfromFIO Simulation Structure             13:54:52  Feb 13, 2024   Page   64wz socket interface routines                                             *                     *                     * X hold the task table                     * U holds the sock address                     *               E93B  skurrdf   equ    *  E93B BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E93E BD   E628               jsr    wzdevt  E941 1026 FF6C     02        lbne   rdrqer1  E945 BD   E644               jsr    skcudp  E948 27   05                 beq    03f  E94A BD   E64D               jsr    skcraw  E94D 26   F2                 bne    02b  E94F               03                     *                     * go on                     *                     *  E94F EC   C8 20              ldd    wzurms,u  check remaining size  E952 26   47                 bne    84f                     *                     * no  packet data present, wait for it                     *  E954 BD   EE91               jsr    GSRSR  E957 E7   45                 stb    wzstat,u  update status  E959 BD   F048               jsr    GSRRXRS   data available?  E95C ED   7E                 std    -2,s      test D  E95E 26   19                 bne    22f       keep waiting                     * no data yet, check socket state  E960 E6   45                 ldb    wzstat,u  E962 C1   22                 cmpb   #WSUDP    still active  E964 27   0C                 beq    20f  E966 C1   42                 cmpb   #WSRAW  E968 27   08                 beq    20f                       E96A C1   1C                 cmpb   #WSCLWT  E96C 27   31                 beq    60f  E96E C1   00                 cmpb   #WSCLSD  E970 27   2D                 beq    60f                     *       ldd     wzsprt,u                     *       jsr     PSRPORT         set source port                     *  E972 108E E93B     20        ldy    #skurrdf  E976 7E   E797               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurms                     *  E979 31   C8 1A    22        leay   wzuipa,u  E97C CC   0008               ldd    #8        size of headerFIO Simulation Structure             13:54:52  Feb 13, 2024   Page   65wz socket interface routines                          E97F BD   EBBC               jsr    bmread    copy data                     *                     * move pointer                     *  E982 BD   F05F               jsr    GSRRXRP  E985 C3   0008               addd   #8  E988 BD   F06E               jsr    PSRRXRP   update pointer  E98B C6   40                 ldb    #WCRECV  E98D E7   44                 stb    wzcmnd,u  process move  E98F BD   EE5D               jsr    PSRCR                     *  E992 EC   C8 20              ldd    wzurms,u  E995 1083 05C0               cmpd   #MAX_UDP  max size  E999 22   08                 bhi    78f                     *  E99B 4F            84        clra  E99C C6   21                 ldb    #R_RDFRM  E99E 39                      rts                                          * close socket and return  E99F 4F            60        clra  E9A0 C6   02                 ldb    #R_CLOSE  E9A2 39                      rts                                          *  E9A3 BD   E6F8     78        jsr    skclin    close  E9A6 C6   C0                 ldb    #E_SOCKET  E9A8 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E9A9  skurrd    equ    *  E9A9 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9AC BD   E628               jsr    wzdevt  E9AF 1026 FEFE     02        lbne   rdrqer1  E9B3 BD   E644               jsr    skcudp  E9B6 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  E9B8 EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available dataFIO Simulation Structure             13:54:53  Feb 13, 2024   Page   66wz socket interface routines                          E9BB BD   F118               jsr    RDSK2FB   transfer data  E9BE 34   06                 pshs   d         xferred count  E9C0 EC   C8 20              ldd    wzurms,u  update  E9C3 A3   E1                 subd   0,s++  E9C5 ED   C8 20              std    wzurms,u  new remaining                     *  E9C8 C6   40       01        ldb    #WCRECV  E9CA E7   44                 stb    wzcmnd,u  set processed  E9CC BD   EE5D               jsr    PSRCR                     *  E9CF 4F                      clra  E9D0 C6   22                 ldb    #R_RRDFD  E9D2 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E9D3  skurwt    equ    *  E9D3 BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9D6 BD   E628               jsr    wzdevt  E9D9 1026 FED4     02        lbne   rdrqer1  E9DD BD   E644               jsr    skcudp  E9E0 27   05                 beq    03f  E9E2 BD   E64D               jsr    skcraw  E9E5 26   F2                 bne    02b  E9E7               03                     *                     * go on                     *                     *  E9E7 EC   C8 12              ldd    wzdprt,u  check illegal port >E9EA 1027 007B               lbeq   78f                     *  E9EE EC   C8 14              ldd    wzipad,u  E9F1                         ordx   wzipad+2,IU  E9F1 10AA                    fdb    $10aa  E9F3                         doindx wzipad+2,IU  E9F3 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >E9F5 1027 0070               lbeq   78f                     * set network registers  E9F9 EC   C8 12              ldd    wzdprt,u  E9FC BD   EF39               jsr    PSRDPOR                     FIO Simulation Structure             13:54:53  Feb 13, 2024   Page   67wz socket interface routines                          E9FF 31   C8 14              leay   wzipad,u  EA02 BD   EF13               jsr    PSRDIP  EA05 EC   C8 10              ldd    wzsprt,u  EA08 26   11                 bne    04f                     *  EA0A EC   C8 10              ldd    wzsprt,u  already set?  EA0D 26   09                 bne    16f  EA0F BD   E616               jsr    sknewp    get new source port  EA12 ED   C8 10              std    wzsprt,u  EA15 ED   C8 1E              std    wzuprt,u  set also return port  EA18 BD   EEAF     16        jsr    PSRPORT                     *  EA1B 108E EA22     04        ldy    #skuwr2   do remainder  EA1F 7E   E797               jmp    polext                                          *                     * after intial setup. loop here                     *               EA22  skusnm    equ    *  EA22 BD   E634     skuwr2    jsr    skfres    set socket base  EA25 BD   E628               jsr    wzdevt    devie active >EA28 1026 FFAD               lbne   02b       no  EA2C BD   E644               jsr    skcudp    check open method  EA2F 26   A8                 bne    02b                     *  EA31 BD   EE91               jsr    GSRSR  EA34 E7   45                 stb    wzstat,u  update status  EA36 BD   EFFC               jsr    GSRTXFR   free size  EA39 10A3 C8 20              cmpd   wzurms,u  EA3D 24   19                 bhs    10f                     * no space yet  EA3F E6   45                 ldb    wzstat,u  EA41 C1   22                 cmpb   #WSUDP  EA43 27   0C                 beq    20f  EA45 C1   42                 cmpb   #WSRAW  EA47 27   08                 beq    20f                       EA49 C1   1C                 cmpb   #WSCLWT   is closing  EA4B 27   18                 beq    60f  EA4D C1   00                 cmpb   #WSCLSD   closed  EA4F 27   14                 beq    60f                     *  EA51 108E E9D3     20        ldy    #skurwt  EA55 7E   E797               jmp    polext    keep polling                     *  EA58 EC   C8 20    10        ldd    wzurms,u  EA5B 1083 05C0               cmpd   #MAX_UDP  too big  EA5F 22   08                 bhi    78f                     *  EA61 4F                      clra  EA62 C6   23                 ldb    #R_RSNDTO  EA64 39                      rtsFIO Simulation Structure             13:54:53  Feb 13, 2024   Page   68wz socket interface routines                                               EA65 4F            60        clra  EA66 C6   02                 ldb    #R_CLOSE  EA68 39                      rts                       EA69 BD   E6F8     78        jsr    skclin    close  EA6C C6   C0                 ldb    #E_SOCKET  EA6E 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA6F  skusnt    equ    *  EA6F BD   E634               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA72 BD   E628               jsr    wzdevt  EA75 1026 FE38     02        lbne   rdrqer1  EA79 BD   E644               jsr    skcudp  EA7C 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EA7E EC   C8 20              ldd    wzurms,u  total data                     *  EA81 BD   F167               jsr    WRFB2SK   fifo to socket  EA84 34   06                 pshs   d  EA86 EC   C8 20              ldd    wzurms,u  all loaded  EA89 A3   E1                 subd   0,s++  EA8B ED   C8 20              std    wzurms,u  EA8E 26   11                 bne    01f                       EA90 EC   C8 22              ldd    wzuwrp,u  is it used  EA93 BD   F039               jsr    PSRTXWP   set write pointer                       EA96 C6   20                 ldb    #WCSEND  EA98 E7   44                 stb    wzcmnd,u  EA9A BD   EE5D               jsr    PSRCR  EA9D 4F                      clra  EA9E C6   24                 ldb    #R_WSNDTO data taken  EAA0 39                      rts                       EAA1 4F            01        clra  EAA2 C6   25                 ldb    #R_SNDTOM ask for more  EAA4 39                      rtsFIO Simulation Structure             13:54:54  Feb 13, 2024   Page   69wz socket interface routines                                                                  ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               EAA5  skspcl    equ    *                     *  EAA5 34   10                 pshs   x  EAA7 E6   0C                 ldb    tstval,x  get index  EAA9 C1   04                 cmpb   #MAXTBL  EAAB 22   18                 bhi    01f       illegal  EAAD 58                      aslb  EAAE 8E   EACC               ldx    #functb  EAB1 10AE 85                 ldy    b,x       get special function  EAB4 27   0F                 beq    01f       not valid  EAB6 35   10                 puls   x                     *  EAB8 AD   A4                 jsr    0,y       do function  EABA 26   05                 bne    90f                     *  EABC 4F                      clra  EABD C6   0F                 ldb    #R_SPCL  EABF 20   0A                 bra    99f                     *  EAC1 86   A2       90        lda    #162  EAC3 20   04                 bra    02f                     *  EAC5 35   10       01        puls   x  EAC7 86   A1                 lda    #161  EAC9               02  EAC9 C6   C0                 ldb    #E_SOCKET                     *  EACB 39            99        rts                       EACC EAD4          functb    fdb    wzdev     set device settings  EACE EAD4                    fdb    wzdev  EAD0 EAFE                    fdb    showrg  EAD2 0000                    fdb    0               0004  MAXTBL    equ    (*-functb)/2                                                               *                     * X hold the task table                     * U holds the special sock address                     *  EAD4               wzdev  EAD4 C6   08                 ldb    #8  EAD6                         trfr   B,E  EAD6 1F                      fcb    $1f  EAD7 9E                      fcb    B<<4|EFIO Simulation Structure             13:54:54  Feb 13, 2024   Page   70wz socket interface routines                                                       endm  EAD8 DE   1A                 ldu    fifo_us1  device info area  EADA 31   C4                 leay   0,u       myip  EADC BD   ECF4               jsr    PCRSIP    source IP  EADF 31   44                 leay   4,u  EAE1 BD   EC88               jsr    PCRSNM    subnet mask  EAE4 31   48                 leay   8,u  EAE6 BD   EC5A               jsr    PCRGA     gateway IP  EAE9 31   4C                 leay   12,u  EAEB BD   ECBE               jsr    PCRSHA    hardware address  EAEE A6   C8 12              lda    18,u      ON/OFF  EAF1 27   04                 beq    01f  EAF3 C6   F8                 ldb    #%11111000 all on  EAF5 20   02                 bra    02f  EAF7 C6   78       01        ldb    #%01111000 all off  EAF9 BD   EE12     02        jsr    PCRPHY  EAFC 4F                      clra  EAFD 39                      rts                                          *                     *                     *  EAFE               showrg  EAFE C6   08                 ldb    #8  EB00                         trfr   B,E       select first socket  EB00 1F                      fcb    $1f  EB01 9E                      fcb    B<<4|E                               endm  EB02 DE   1A                 ldu    fifo_us1  EB04 33   C8 20              leau   32,u      skip network data area  EB07 BD   EE30               jsr    GSRMR  EB0A E7   C0                 stb    0,u+  EB0C BD   EE91               jsr    GSRSR  EB0F E7   C0                 stb    0,u+  EB11 BD   EFC0               jsr    GSRRBFS  EB14 E7   C0                 stb    0,u+                       EB16 C6   3D                 ldb    #'=  EB18 E7   C0                 stb    0,u+                       EB1A BD   EEA0               jsr    GSRPORT  EB1D ED   C1                 std    0,u++  EB1F BD   EF2A               jsr    GSRDPOR  EB22 ED   C1                 std    0,u++                       EB24 C6   23                 ldb    #'#  EB26 E7   C0                 stb    0,u+                       EB28 31   C4                 leay   0,u  EB2A BD   EEBE               jsr    GSRDHAR  EB2D 33   46                 leau   6,u                     FIO Simulation Structure             13:54:54  Feb 13, 2024   Page   71wz socket interface routines                          EB2F C6   23                 ldb    #'#  EB31 E7   C0                 stb    0,u+                       EB33 31   C4                 leay   0,u  EB35 BD   EEFC               jsr    GSRDIP  EB38 33   44                 leau   4,u                       EB3A C6   3D                 ldb    #'=  EB3C E7   C0                 stb    0,u+                       EB3E BD   EF48               jsr    GSRMSS  EB41 ED   C1                 std    0,u++  EB43 BD   F048               jsr    GSRRXRS  EB46 ED   C1                 std    0,u++  EB48 BD   F05F               jsr    GSRRXRP  EB4B ED   C1                 std    0,u++  EB4D BD   F07D               jsr    GSRRXWP  EB50 ED   C1                 std    0,u++  EB52 BD   F0B2               jsr    GSRFRAG  EB55 ED   C1                 std    0,u++                       EB57 C6   23                 ldb    #'#  EB59 E7   C4                 stb    0,u  EB5B 4F                      clra                       EB5C 39                      rts                                                               * X hold the task table                     * U holds the sock address  EB5D               skintrp  EB5D               skdisc  EB5D               sksmac  EB5D               skskep  EB5D 86   FF                 lda    #255  EB5F A7   47                 sta    wzerr,u  EB61 C6   C0                 ldb    #E_SOCKET  EB63 39                      rts                                    EB64  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register accessFIO Simulation Structure             13:54:55  Feb 13, 2024   Page   72wzspi, basic spi routines                             0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       EB64                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               EB64  spinit    equ    *  EB64 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  EB66 B7   8080               sta    SPIBASE+spicmd  EB69 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               EB6A  spistr2   equ    *  EB6A CE   8080               ldu    #SPIBASE  SPI base TODO  EB6D                         trfr   F,B  EB6D 1F                      fcb    $1f  EB6E F9                      fcb    F<<4|B                               endm  EB6F 5D                      tstb             register pointer  EB70 27   09                 beq    01f       OK, valid  EB72 34   04                 pshs   b  EB74 C4   03                 andb   #RSVREG   reserved loctation  EB76 5D                      tstb             xxx10xxx  is invalid!  EB77 35   04                 puls   b  EB79 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  EB7B 4D            01        tsta             cmd flag  EB7C 27   04                 beq    04f  EB7E 1A   01                 sec              write   100FIO Simulation Structure             13:54:55  Feb 13, 2024   Page   73wzspi, basic spi routines                             EB80 20   02                 bra    05f  EB82 1C   FE       04        clc              read    000                     *  EB84 59            05        rolb             set READ/WRITE bit  [2...0]  EB85 58                      lslb             set variable length data [00]  EB86 58                      lslb                     *                     * here the actual SPI action starts                     *  EB87                         seti   disable   interrupts  EB87 1A   50                 orcc   #FF|IF                               endm  EB89 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  EB8A 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  EB8C A7   C4                 sta    spicmd,u  EB8E AF   44                 stx    hibyta,u  and shift out  EB90 E7   44                 stb    hibyta,u  and shift out  EB92 1A   04                 sez  EB94 39                      rts  EB95 1C   FB       09        clz  EB97 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               EB98  byterd    equ    *  EB98 34   47                 pshs   cc,d,u  EB9A 4F                      clra  EB9B 8D   CD                 bsr    spistr2 >EB9D 1026 007E               lbne   09f  EBA1 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EBA3 E6   45                 ldb    lobyta,u  read byte  EBA5 4F                      clra  EBA6 ED   61                 std    1,s  EBA8 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               EBAA  wordrd    equ    *  EBAA 34   47                 pshs   cc,d,u  EBAC 4F                      clra >EBAD BD   EB6A               jsr    spistr2  EBB0 26   6D                 bne    09fFIO Simulation Structure             13:54:55  Feb 13, 2024   Page   74wzspi, basic spi routines                             EBB2 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EBB4 A6   45                 lda    lobyta,u  read byte  EBB6 E6   45                 ldb    lobyta,u  read byte  EBB8 ED   61                 std    1,s  EBBA 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               EBBC  bmread    equ    *  EBBC 34   77                 pshs   cc,d,x,y,u  EBBE 4F                      clra  EBBF BD   F05F               jsr    GSRRXRP  EBC2 1F   01                 tfr    d,x  EBC4 CE   8080               ldu    #SPIBASE  EBC7 34   40                 pshs   u  EBC9 1A   50                 orcc   #$50  EBCB 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EBCD A7   C4                 sta    spicmd,u  EBCF AF   44                 stx    hibyta,u  start address  EBD1 BD   F109               jsr    tsk2rx  EBD4 E7   44                 stb    hibyta,u  EBD6 EC   63                 ldd    3,s       old D  EBD8                         trfr   D,W       count  EBD8 1F                      fcb    $1f  EBD9 06                      fcb    D<<4|W                               endm  EBDA 1F   12                 tfr    x,y       mem pointer  EBDC 10AE 67                 ldy    7,s       old Y  EBDF E7   44                 stb    hibyta,u  shift out  EBE1 33   45                 leau   lobyta,u  EBE3                         tfm4   U,Y  EBE3 113B                    fdb    $113b  EBE5 32                      fcb    U<<4|Y                               endm  EBE6 35   40                 puls   u         old U  EBE8 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  EBEA A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  EBEC 1F   10                 tfr    x,d  EBEE E3   61                 addd   1,s       move pointer  EBF0 BD   F06E               jsr    PSRRXRP   update pointer  EBF3 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preservedFIO Simulation Structure             13:54:56  Feb 13, 2024   Page   75wzspi, basic spi routines                                                *               EBF5  bytewr    equ    *  EBF5 34   47                 pshs   cc,d,u  EBF7 86   01                 lda    #1  EBF9 BD   EB6A               jsr    spistr2  EBFC 26   21                 bne    09f                     *  EBFE A6   62                 lda    2,s  EC00 A7   44                 sta    hibyta,u  EC02 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EC04  wordwr    equ    *  EC04 34   47                 pshs   cc,d,u  EC06 86   01                 lda    #1  EC08 BD   EB6A               jsr    spistr2  EC0B 26   12                 bne    09f                     *  EC0D EC   61                 ldd    1,s  EC0F A7   44                 sta    hibyta,u  EC11 E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EC13 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EC15 A7   C4                 sta    spicmd,u  EC17 A6   E4                 lda    0,s       sez  EC19 8A   04                 ora    #4  EC1B A7   E4       02        sta    0,s  EC1D 35   C7                 puls   cc,d,u,pc                     *  EC1F A6   E4       09        lda    0,s       clz  EC21 84   FB                 anda   #255-4  EC23 20   F6                 bra    02b                     FIO Simulation Structure             13:54:56  Feb 13, 2024   Page   76wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EC25 34   56       GCRMR     pshs   d,x,u  EC27 5F                      clrb  EC28                         trfr   B,F  EC28 1F                      fcb    $1f  EC29 9F                      fcb    B<<4|FFIO Simulation Structure             13:54:56  Feb 13, 2024   Page   77wzspi, basic spi routines                                                          endm  EC2A 8E   0000               ldx    #WZMR  EC2D BD   EB98               jsr    byterd  EC30 ED   E4                 std    0,s  EC32 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EC34 34   16       PCRMR     pshs   d,x  EC36 5F                      clrb  EC37                         trfr   B,F  EC37 1F                      fcb    $1f  EC38 9F                      fcb    B<<4|F                               endm  EC39 8E   0000               ldx    #WZMR  EC3C EC   E4                 ldd    0,s >EC3E BD   EBF5               jsr    bytewr  EC41 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EC43 34   16       GCRGA     pshs   d,x  EC45 5F                      clrb  EC46                         trfr   B,F  EC46 1F                      fcb    $1f  EC47 9F                      fcb    B<<4|F                               endm  EC48 8E   0001               ldx    #WZGAR0  EC4B BD   EBAA               jsr    wordrd  EC4E ED   A4                 std    0,y  EC50 8E   0003               ldx    #WZGAR2  EC53 BD   EBAA               jsr    wordrd  EC56 ED   22                 std    2,y  EC58 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EC5A 34   16       PCRGA     pshs   d,x  EC5C 5F                      clrb  EC5D                         trfr   B,F  EC5D 1F                      fcb    $1f  EC5E 9F                      fcb    B<<4|F                               endm  EC5F 8E   0001               ldx    #WZGAR0  EC62 EC   A4                 ldd    0,y >EC64 BD   EC04               jsr    wordwr  EC67 8E   0003               ldx    #WZGAR2FIO Simulation Structure             13:54:56  Feb 13, 2024   Page   78wzspi, basic spi routines                             EC6A EC   22                 ldd    2,y >EC6C BD   EC04               jsr    wordwr  EC6F 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EC71 34   16       GCRSNM    pshs   d,x  EC73 5F                      clrb  EC74                         trfr   B,F  EC74 1F                      fcb    $1f  EC75 9F                      fcb    B<<4|F                               endm  EC76 8E   0005               ldx    #WZSUBR0  EC79 BD   EBAA               jsr    wordrd  EC7C ED   A4                 std    0,y  EC7E 8E   0007               ldx    #WZSUBR2  EC81 BD   EBAA               jsr    wordrd  EC84 ED   22                 std    2,y  EC86 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EC88 34   16       PCRSNM    pshs   d,x  EC8A 5F                      clrb  EC8B                         trfr   B,F  EC8B 1F                      fcb    $1f  EC8C 9F                      fcb    B<<4|F                               endm  EC8D 8E   0005               ldx    #WZSUBR0  EC90 EC   A4                 ldd    0,y  EC92 BD   EC04               jsr    wordwr  EC95 8E   0007               ldx    #WZSUBR2  EC98 EC   22                 ldd    2,y  EC9A BD   EC04               jsr    wordwr  EC9D 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EC9F 34   16       GCRSHA    pshs   d,x  ECA1 5F                      clrb  ECA2                         trfr   B,F  ECA2 1F                      fcb    $1f  ECA3 9F                      fcb    B<<4|F                               endm  ECA4 8E   0009               ldx    #WZSHAR0  ECA7 BD   EBAA               jsr    wordrdFIO Simulation Structure             13:54:57  Feb 13, 2024   Page   79wzspi, basic spi routines                             ECAA ED   A4                 std    0,y  ECAC 8E   000B               ldx    #WZSHAR2  ECAF BD   EBAA               jsr    wordrd  ECB2 ED   22                 std    2,y  ECB4 8E   000D               ldx    #WZSHAR4  ECB7 BD   EBAA               jsr    wordrd  ECBA ED   24                 std    4,y  ECBC 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  ECBE 34   16       PCRSHA    pshs   d,x  ECC0 5F                      clrb  ECC1                         trfr   B,F  ECC1 1F                      fcb    $1f  ECC2 9F                      fcb    B<<4|F                               endm  ECC3 8E   0009               ldx    #WZSHAR0  ECC6 EC   A4                 ldd    0,y  ECC8 BD   EC04               jsr    wordwr  ECCB 8E   000B               ldx    #WZSHAR2  ECCE EC   22                 ldd    2,y  ECD0 BD   EC04               jsr    wordwr  ECD3 8E   000D               ldx    #WZSHAR4  ECD6 EC   24                 ldd    4,y  ECD8 BD   EC04               jsr    wordwr  ECDB 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  ECDD 34   16       GCRSIP    pshs   d,x  ECDF 5F                      clrb  ECE0                         trfr   B,F  ECE0 1F                      fcb    $1f  ECE1 9F                      fcb    B<<4|F                               endm  ECE2 8E   000F               ldx    #WZSIPR0  ECE5 BD   EBAA               jsr    wordrd  ECE8 ED   A4                 std    0,y  ECEA 8E   0011               ldx    #WZSIPR2  ECED BD   EBAA               jsr    wordrd  ECF0 ED   22                 std    2,y  ECF2 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             13:54:57  Feb 13, 2024   Page   80wzspi, basic spi routines                             ECF4 34   16       PCRSIP    pshs   d,x  ECF6 5F                      clrb  ECF7                         trfr   B,F  ECF7 1F                      fcb    $1f  ECF8 9F                      fcb    B<<4|F                               endm  ECF9 8E   000F               ldx    #WZSIPR0  ECFC EC   A4                 ldd    0,y  ECFE BD   EC04               jsr    wordwr  ED01 8E   0011               ldx    #WZSIPR2  ED04 EC   22                 ldd    2,y  ED06 BD   EC04               jsr    wordwr  ED09 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  ED0B 34   16       GCRILLT   pshs   d,x  ED0D 5F                      clrb  ED0E                         trfr   B,F  ED0E 1F                      fcb    $1f  ED0F 9F                      fcb    B<<4|F                               endm  ED10 8E   0013               ldx    #WZILLT0  ED13 BD   EBAA               jsr    wordrd  ED16 ED   E4                 std    0,s  ED18 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  ED1A 34   16       PCRILLT   pshs   d,x  ED1C 5F                      clrb  ED1D                         trfr   B,F  ED1D 1F                      fcb    $1f  ED1E 9F                      fcb    B<<4|F                               endm  ED1F 8E   0013               ldx    #WZILLT0  ED22 EC   E4                 ldd    0,s  ED24 BD   EC04               jsr    wordwr  ED27 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  ED29 34   16       GCRIR     pshs   d,x  ED2B 5F                      clrb  ED2C                         trfr   B,F  ED2C 1F                      fcb    $1f  ED2D 9F                      fcb    B<<4|FFIO Simulation Structure             13:54:57  Feb 13, 2024   Page   81wzspi, basic spi routines                                                          endm  ED2E 8E   0015               ldx    #WZIR  ED31 BD   EB98               jsr    byterd  ED34 ED   E4                 std    0,s  ED36 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  ED38 34   16       PCRIR     pshs   d,x  ED3A 5F                      clrb  ED3B                         trfr   B,F  ED3B 1F                      fcb    $1f  ED3C 9F                      fcb    B<<4|F                               endm  ED3D 8E   0015               ldx    #WZIR  ED40 EC   E4                 ldd    0,s  ED42 BD   EBF5               jsr    bytewr  ED45 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  ED47 34   16       GCRIMR    pshs   d,x  ED49 5F                      clrb  ED4A                         trfr   B,F  ED4A 1F                      fcb    $1f  ED4B 9F                      fcb    B<<4|F                               endm  ED4C 8E   0016               ldx    #WZIMR  ED4F BD   EB98               jsr    byterd  ED52 ED   E4                 std    0,s  ED54 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  ED56 34   16       PCRIMR    pshs   d,x  ED58 5F                      clrb  ED59                         trfr   B,F  ED59 1F                      fcb    $1f  ED5A 9F                      fcb    B<<4|F                               endm  ED5B 8E   0016               ldx    #WZIMR  ED5E EC   E4                 ldd    0,s  ED60 BD   EBF5               jsr    bytewr  ED63 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             13:54:58  Feb 13, 2024   Page   82wzspi, basic spi routines                                                *  ED65 34   16       GCRSIR    pshs   d,x  ED67 5F                      clrb  ED68                         trfr   B,F  ED68 1F                      fcb    $1f  ED69 9F                      fcb    B<<4|F                               endm  ED6A 8E   0017               ldx    #WZSIR  ED6D BD   EB98               jsr    byterd  ED70 ED   E4                 std    0,s  ED72 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  ED74 34   16       PCRSIR    pshs   d,x  ED76 5F                      clrb  ED77                         trfr   B,F  ED77 1F                      fcb    $1f  ED78 9F                      fcb    B<<4|F                               endm  ED79 8E   0017               ldx    #WZSIR  ED7C EC   E4                 ldd    0,s  ED7E BD   EBF5               jsr    bytewr  ED81 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  ED83 34   16       GCRSIMR   pshs   d,x  ED85 5F                      clrb  ED86                         trfr   B,F  ED86 1F                      fcb    $1f  ED87 9F                      fcb    B<<4|F                               endm  ED88 8E   0018               ldx    #WZSIMR  ED8B BD   EB98               jsr    byterd  ED8E ED   E4                 std    0,s  ED90 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  ED92 34   16       PCRSIMR   pshs   d,x  ED94 5F                      clrb  ED95                         trfr   B,F  ED95 1F                      fcb    $1f  ED96 9F                      fcb    B<<4|F                               endm  ED97 8E   0018               ldx    #WZSIMR  ED9A EC   E4                 ldd    0,sFIO Simulation Structure             13:54:58  Feb 13, 2024   Page   83wzspi, basic spi routines                             ED9C BD   EBF5               jsr    bytewr  ED9F 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EDA1 34   16       GCRRTR    pshs   d,x  EDA3 5F                      clrb  EDA4                         trfr   B,F  EDA4 1F                      fcb    $1f  EDA5 9F                      fcb    B<<4|F                               endm  EDA6 8E   0019               ldx    #WZRTR0  EDA9 BD   EBAA               jsr    wordrd  EDAC ED   E4                 std    0,s  EDAE 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EDB0 34   16       PCRRTR    pshs   d,x  EDB2 5F                      clrb  EDB3                         trfr   B,F  EDB3 1F                      fcb    $1f  EDB4 9F                      fcb    B<<4|F                               endm  EDB5 8E   0019               ldx    #WZRTR0  EDB8 EC   E4                 ldd    0,s  EDBA BD   EC04               jsr    wordwr  EDBD 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EDBF 34   16       GCRRCR    pshs   d,x  EDC1 5F                      clrb  EDC2                         trfr   B,F  EDC2 1F                      fcb    $1f  EDC3 9F                      fcb    B<<4|F                               endm  EDC4 8E   001B               ldx    #WZRCR  EDC7 BD   EB98               jsr    byterd  EDCA ED   E4                 std    0,s  EDCC 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EDCE 34   16       PCRRCR    pshs   d,x  EDD0 5F                      clrbFIO Simulation Structure             13:54:58  Feb 13, 2024   Page   84wzspi, basic spi routines                             EDD1                         trfr   B,F  EDD1 1F                      fcb    $1f  EDD2 9F                      fcb    B<<4|F                               endm  EDD3 8E   001B               ldx    #WZRCR  EDD6 EC   E4                 ldd    0,s  EDD8 BD   EBF5               jsr    bytewr  EDDB 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EDDD 34   16       GCRURP    pshs   d,x  EDDF 5F                      clrb  EDE0                         trfr   B,F  EDE0 1F                      fcb    $1f  EDE1 9F                      fcb    B<<4|F                               endm  EDE2 8E   002C               ldx    #WZUPRT0  EDE5 BD   EBAA               jsr    wordrd  EDE8 ED   E4                 std    0,s  EDEA 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  EDEC 34   16       GCRUIP    pshs   d,x  EDEE 5F                      clrb  EDEF                         trfr   B,F  EDEF 1F                      fcb    $1f  EDF0 9F                      fcb    B<<4|F                               endm  EDF1 8E   0028               ldx    #WZUIPR0  EDF4 BD   EBAA               jsr    wordrd  EDF7 ED   A4                 std    0,y  EDF9 8E   002A               ldx    #WZUIPR2  EDFC BD   EBAA               jsr    wordrd  EDFF ED   22                 std    2,y  EE01 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  EE03 34   56       GCRPHY    pshs   d,x,u  EE05 8E   002E               ldx    #WZPHY  EE08 5F                      clrb  EE09                         trfr   B,F  EE09 1F                      fcb    $1f  EE0A 9F                      fcb    B<<4|FFIO Simulation Structure             13:54:59  Feb 13, 2024   Page   85wzspi, basic spi routines                                                          endm  EE0B BD   EB98               jsr    byterd  EE0E ED   E4                 std    0,s  EE10 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  EE12 34   56       PCRPHY    pshs   d,x,u  EE14 8E   002E               ldx    #WZPHY  EE17 5F                      clrb  EE18                         trfr   B,F  EE18 1F                      fcb    $1f  EE19 9F                      fcb    B<<4|F                               endm  EE1A EC   E4                 ldd    0,s  EE1C BD   EBF5               jsr    bytewr  EE1F 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  EE21 34   56       GCRVERS   pshs   d,x,u  EE23 8E   0039               ldx    #WZVERS  EE26 5F                      clrb  EE27                         trfr   B,F  EE27 1F                      fcb    $1f  EE28 9F                      fcb    B<<4|F                               endm  EE29 BD   EB98               jsr    byterd  EE2C ED   E4                 std    0,s  EE2E 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             13:54:59  Feb 13, 2024   Page   86wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  EE30 34   16       GSRMR     psh    d,x  EE32 BD   F0EE               jsr    tsk2rg  EE35 8E   0000               ldx    #SNMR  EE38 BD   EB98               jsr    byterd  EE3B ED   E4                 std    0,s  EE3D 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  EE3F 34   16       PSRMR     pshs   d,x  EE41 BD   F0EE               jsr    tsk2rgFIO Simulation Structure             13:54:59  Feb 13, 2024   Page   87wzspi, basic spi routines                             EE44 8E   0000               ldx    #SNMR  EE47 EC   E4                 ldd    0,s  EE49 BD   EBF5               jsr    bytewr  EE4C 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  EE4E 34   16       GSRCR     pshs   d,x  EE50 BD   F0EE               jsr    tsk2rg  EE53 8E   0001               ldx    #SNCR  EE56 BD   EB98               jsr    byterd  EE59 ED   E4                 std    0,s  EE5B 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  EE5D 34   16       PSRCR     pshs   d,x  EE5F BD   F0EE               jsr    tsk2rg  EE62 8E   0001               ldx    #SNCR  EE65 EC   E4                 ldd    0,s  EE67 BD   EBF5               jsr    bytewr  EE6A 8D   E2       01        bsr    GSRCR  EE6C 5D                      tstb  EE6D 26   FB                 bne    01b       wait command to be consumed  EE6F E7   61                 stb    1,s       set return  EE71 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  EE73 34   16       GSRIR     pshs   d,x  EE75 BD   F0EE               jsr    tsk2rg  EE78 8E   0002               ldx    #SNIR  EE7B BD   EB98               jsr    byterd  EE7E ED   E4                 std    0,s  EE80 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  EE82 34   16       PSRIR     pshs   d,x  EE84 BD   F0EE               jsr    tsk2rg  EE87 8E   0002               ldx    #SNIR  EE8A EC   E4                 ldd    0,sFIO Simulation Structure             13:55:00  Feb 13, 2024   Page   88wzspi, basic spi routines                             EE8C BD   EBF5               jsr    bytewr  EE8F 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  EE91 34   16       GSRSR     pshs   d,x  EE93 BD   F0EE               jsr    tsk2rg  EE96 8E   0003               ldx    #SNSR  EE99 BD   EB98               jsr    byterd  EE9C ED   E4                 std    0,s  EE9E 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  EEA0 34   16       GSRPORT   pshs   d,x  EEA2 BD   F0EE               jsr    tsk2rg  EEA5 8E   0004               ldx    #SNPORT0  EEA8 BD   EBAA               jsr    wordrd  EEAB ED   E4                 std    0,s  EEAD 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  EEAF 34   16       PSRPORT   pshs   d,x  EEB1 BD   F0EE               jsr    tsk2rg  EEB4 8E   0004               ldx    #SNPORT0  EEB7 EC   E4                 ldd    0,s  EEB9 BD   EC04               jsr    wordwr  EEBC 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  EEBE 34   16       GSRDHAR   pshs   d,x  EEC0 BD   F0EE               jsr    tsk2rg  EEC3 8E   0006               ldx    #SNDHAR0  EEC6 BD   EBAA               jsr    wordrd  EEC9 ED   A4                 std    0,y  EECB 8E   0008               ldx    #SNDHAR2  EECE BD   EBAA               jsr    wordrd  EED1 ED   22                 std    2,y  EED3 8E   000A               ldx    #SNDHAR4  EED6 BD   EBAA               jsr    wordrdFIO Simulation Structure             13:55:00  Feb 13, 2024   Page   89wzspi, basic spi routines                             EED9 ED   24                 std    4,y  EEDB 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  EEDD 34   16       PSRDHAR   pshs   d,x  EEDF BD   F0EE               jsr    tsk2rg  EEE2 8E   0006               ldx    #SNDHAR0  EEE5 EC   A4                 ldd    0,y  EEE7 BD   EC04               jsr    wordwr  EEEA 8E   0008               ldx    #SNDHAR2  EEED EC   22                 ldd    2,y  EEEF BD   EC04               jsr    wordwr  EEF2 8E   000A               ldx    #SNDHAR4  EEF5 EC   24                 ldd    4,y  EEF7 BD   EC04               jsr    wordwr  EEFA 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  EEFC 34   16       GSRDIP    pshs   d,x  EEFE BD   F0EE               jsr    tsk2rg  EF01 8E   000C               ldx    #SNDIPR0  EF04 BD   EBAA               jsr    wordrd  EF07 ED   A4                 std    0,y  EF09 8E   000E               ldx    #SNDIPR2  EF0C BD   EBAA               jsr    wordrd  EF0F ED   22                 std    2,y  EF11 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  EF13 34   16       PSRDIP    pshs   d,x  EF15 BD   F0EE               jsr    tsk2rg  EF18 8E   000C               ldx    #SNDIPR0  EF1B EC   A4                 ldd    0,y  EF1D BD   EC04               jsr    wordwr  EF20 8E   000E               ldx    #SNDIPR2  EF23 EC   22                 ldd    2,y  EF25 BD   EC04               jsr    wordwr  EF28 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             13:55:00  Feb 13, 2024   Page   90wzspi, basic spi routines                                                *  EF2A 34   16       GSRDPOR   pshs   d,x  EF2C BD   F0EE               jsr    tsk2rg  EF2F 8E   0010               ldx    #SNDPOR0  EF32 BD   EBAA               jsr    wordrd  EF35 ED   E4                 std    0,s  EF37 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  EF39 34   16       PSRDPOR   pshs   d,x  EF3B BD   F0EE               jsr    tsk2rg  EF3E 8E   0010               ldx    #SNDPOR0  EF41 EC   E4                 ldd    0,s  EF43 BD   EC04               jsr    wordwr  EF46 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  EF48 34   16       GSRMSS    pshs   d,x  EF4A BD   F0EE               jsr    tsk2rg  EF4D 8E   0012               ldx    #SNMSSR0  EF50 BD   EBAA               jsr    wordrd  EF53 ED   E4                 std    0,s  EF55 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  EF57 34   16       PSRMSS    pshs   d,x  EF59 BD   F0EE               jsr    tsk2rg  EF5C 8E   0012               ldx    #SNMSSR0  EF5F EC   E4                 ldd    0,s  EF61 BD   EC04               jsr    wordwr  EF64 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  EF66 34   16       GSRPROT   pshs   d,x  EF68 BD   F0EE               jsr    tsk2rg  EF6B 8E   0014               ldx    #SNPROTO  EF6E BD   EB98               jsr    byterd  EF71 ED   E4                 std    0,sFIO Simulation Structure             13:55:01  Feb 13, 2024   Page   91wzspi, basic spi routines                             EF73 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  EF75 34   16       PSRPROT   pshs   d,x  EF77 BD   F0EE               jsr    tsk2rg  EF7A 8E   0014               ldx    #SNPROTO  EF7D EC   E4                 ldd    0,s  EF7F BD   EBF5               jsr    bytewr  EF82 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  EF84 34   16       GSRTOS    pshs   d,x  EF86 BD   F0EE               jsr    tsk2rg  EF89 8E   0015               ldx    #SNTOS  EF8C BD   EB98               jsr    byterd  EF8F ED   E4                 std    0,s  EF91 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  EF93 34   16       PSRTOS    pshs   d,x  EF95 BD   F0EE               jsr    tsk2rg  EF98 8E   0015               ldx    #SNTOS  EF9B EC   E4                 ldd    0,s  EF9D BD   EBF5               jsr    bytewr  EFA0 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  EFA2 34   16       GSRTTL    pshs   d,x  EFA4 BD   F0EE               jsr    tsk2rg  EFA7 8E   0016               ldx    #SNTTL  EFAA BD   EB98               jsr    byterd  EFAD ED   E4                 std    0,s  EFAF 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             13:55:01  Feb 13, 2024   Page   92wzspi, basic spi routines                             EFB1 34   16       PSRTTL    pshs   d,x  EFB3 BD   F0EE               jsr    tsk2rg  EFB6 8E   0016               ldx    #SNTTL  EFB9 EC   E4                 ldd    0,s  EFBB BD   EBF5               jsr    bytewr  EFBE 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  EFC0 34   16       GSRRBFS   pshs   d,x  EFC2 BD   F0EE               jsr    tsk2rg  EFC5 8E   001E               ldx    #SNRBFSZ  EFC8 BD   EB98               jsr    byterd  EFCB ED   E4                 std    0,s  EFCD 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  EFCF 34   16       PSRRBFS   pshs   d,x  EFD1 BD   F0EE               jsr    tsk2rg  EFD4 8E   001E               ldx    #SNRBFSZ  EFD7 EC   E4                 ldd    0,s  EFD9 BD   EBF5               jsr    bytewr  EFDC 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  EFDE 34   16       GSRTBFS   pshs   d,x  EFE0 BD   F0EE               jsr    tsk2rg  EFE3 8E   001F               ldx    #SNTBFSZ  EFE6 BD   EB98               jsr    byterd  EFE9 ED   E4                 std    0,s  EFEB 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  EFED 34   16       PSRTBFS   pshs   d,x  EFEF BD   F0EE               jsr    tsk2rg  EFF2 8E   001F               ldx    #SNTBFSZ  EFF5 EC   E4                 ldd    0,s  EFF7 BD   EBF5               jsr    bytewr  EFFA 35   96                 puls   d,x,pcFIO Simulation Structure             13:55:01  Feb 13, 2024   Page   93wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  EFFC 34   16       GSRTXFR   pshs   d,x  EFFE BD   F0EE               jsr    tsk2rg  F001 8E   0020               ldx    #SNTXFR0  [R]  F004 BD   EBAA               jsr    wordrd  F007 ED   E4       01        std    0,s  F009 BD   EBAA               jsr    wordrd  F00C 10A3 E4                 cmpd   0,s       read more times and exit  F00F 26   F6                 bne    01b       when 2 reads are equal  F011 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F013 34   16       GSRTXRP   pshs   d,x  F015 BD   F0EE               jsr    tsk2rg  F018 8E   0022               ldx    #SNTXRP0  [R]  F01B BD   EBAA               jsr    wordrd  F01E ED   E4       01        std    0,s  F020 BD   EBAA               jsr    wordrd  F023 10A3 E4                 cmpd   0,s       read more times and exit  F026 26   F6                 bne    01b       when 2 reads are equal  F028 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F02A 34   16       GSRTXWP   pshs   d,x  F02C BD   F0EE               jsr    tsk2rg  F02F 8E   0024               ldx    #SNTXWP0  [RW]  F032 BD   EBAA               jsr    wordrd  F035 ED   E4                 std    0,s  F037 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F039 34   16       PSRTXWP   pshs   d,x  F03B BD   F0EE               jsr    tsk2rg  F03E 8E   0024               ldx    #SNTXWP0  F041 EC   E4                 ldd    0,s  F043 BD   EC04               jsr    wordwrFIO Simulation Structure             13:55:02  Feb 13, 2024   Page   94wzspi, basic spi routines                             F046 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F048 34   16       GSRRXRS   pshs   d,x  F04A BD   F0EE               jsr    tsk2rg  F04D 8E   0026               ldx    #SNRXRZ0  [R]  F050 BD   EBAA               jsr    wordrd  F053 ED   E4       01        std    0,s  F055 BD   EBAA               jsr    wordrd  F058 10A3 E4                 cmpd   0,s       read more times and exit  F05B 26   F6                 bne    01b       when 2 reads are equal  F05D 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F05F 34   16       GSRRXRP   pshs   d,x  F061 BD   F0EE               jsr    tsk2rg  F064 8E   0028               ldx    #SNRXRP0  [RW]  F067 BD   EBAA               jsr    wordrd  F06A ED   E4                 std    0,s  F06C 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F06E 34   16       PSRRXRP   pshs   d,x >F070 BD   F0EE               jsr    tsk2rg  F073 8E   0028               ldx    #SNRXRP0  F076 EC   E4                 ldd    0,s  F078 BD   EC04               jsr    wordwr  F07B 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F07D 34   16       GSRRXWP   pshs   d,x >F07F BD   F0EE               jsr    tsk2rg  F082 8E   002A               ldx    #SNRXWP0  [R]  F085 BD   EBAA               jsr    wordrd  F088 ED   E4       01        std    0,s  F08A BD   EBAA               jsr    wordrd  F08D 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             13:55:02  Feb 13, 2024   Page   95wzspi, basic spi routines                             F090 26   F6                 bne    01b       when 2 reads are equal  F092 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F094 34   16       GSRIMR    pshs   d,x >F096 BD   F0EE               jsr    tsk2rg  F099 8E   002C               ldx    #SNIMR  F09C BD   EB98               jsr    byterd  F09F ED   E4                 std    0,s  F0A1 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F0A3 34   16       PSRIMR    pshs   d,x >F0A5 BD   F0EE               jsr    tsk2rg  F0A8 8E   002C               ldx    #SNIMR  F0AB EC   E4                 ldd    0,s  F0AD BD   EBF5               jsr    bytewr  F0B0 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F0B2 34   16       GSRFRAG   pshs   d,x >F0B4 BD   F0EE               jsr    tsk2rg  F0B7 8E   002D               ldx    #SNFRAG0  F0BA BD   EBAA               jsr    wordrd  F0BD ED   E4                 std    0,s  F0BF 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F0C1 34   16       PSRFRAG   pshs   d,x >F0C3 BD   F0EE               jsr    tsk2rg  F0C6 8E   002D               ldx    #SNFRAG0  F0C9 EC   E4                 ldd    0,s  F0CB BD   EC04               jsr    wordwr  F0CE 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             13:55:02  Feb 13, 2024   Page   96wzspi, basic spi routines                                                * return byte in B                     *  F0D0 34   16       GSKATM    pshs   d,x >F0D2 BD   F0EE               jsr    tsk2rg  F0D5 8E   002F               ldx    #SNKATIM  F0D8 BD   EB98               jsr    byterd  F0DB ED   E4                 std    0,s  F0DD 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F0DF 34   16       PSRKATM   pshs   d,x >F0E1 BD   F0EE               jsr    tsk2rg  F0E4 8E   002F               ldx    #SNKATIM  F0E7 EC   E4                 ldd    0,s  F0E9 BD   EBF5               jsr    bytewr  F0EC 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F0EE  tsk2rg    equ    *  F0EE                         trfr   E,B  F0EE 1F                      fcb    $1f  F0EF E9                      fcb    E<<4|B                               endm  F0F0 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F0F1 1C   FE                 clc              make reg bits + '01'  F0F3 59                      rolb             socket register  F0F4 1A   01                 sec  F0F6 59                      rolb             xxx 01 ...                     *  F0F7                         trfr   B,F  F0F7 1F                      fcb    $1f  F0F8 9F                      fcb    B<<4|F                               endm  F0F9 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F0FA  tsk2tx    equ    *  F0FA                         trfr   E,B  F0FA 1F                      fcb    $1f  F0FB E9                      fcb    E<<4|BFIO Simulation Structure             13:55:02  Feb 13, 2024   Page   97wzspi, basic spi routines                                                          endm  F0FC 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F0FD 1A   01                 sec              make reg bits + '10'  F0FF 59                      rolb             sock TX buffer  F100 1C   FE                 clc  F102 59                      rolb                     *  F103 1A   01                 sec  F105 59                      rolb             write bit     '1'                     *  F106 58                      lslb             variable size '00'  F107 58                      lslb             xxx 10 100                     *  F108 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F109  tsk2rx    equ    *  F109                         trfr   E,B  F109 1F                      fcb    $1f  F10A E9                      fcb    E<<4|B                               endm  F10B 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F10C 1A   01                 sec              make reg bits + '11'  F10E 59                      rolb             sock RX buffer  F10F 1A   01                 sec              make reg bits + '11'  F111 59                      rolb                     *  F112 1C   FE                 clc  F114 59                      rolb             read bit     '0'                     *  F115 58                      lslb             variable size '00'  F116 58                      lslb             xxx 11 000  F117 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=sock, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F118 34   76       RDSK2FB   pshs   d,x,y,u                     *  F11A 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F11D 23   02                 bls    01f  F11F EC   4A                 ldd    wzrqln,u  mandatory size  F121 1F   01       01        tfr    D,X       sizeFIO Simulation Structure             13:55:03  Feb 13, 2024   Page   98wzspi, basic spi routines                             F123 ED   E4                 std    0,s       save xfrerred old  D  F125 ED   48                 std    wzxfer,u  F127 27   3C                 beq    15f       no data                     *  F129 BD   F05F               jsr    GSRRXRP  F12C 34   06                 pshs   d         save socket read pointer  F12E 1F   02                 tfr    D,Y                     *  F130 CE   8080               ldu    #SPIBASE  F133 34   01                 pshs   cc  F135                         pshsw  F135 1038                    fdb    $1038                               endm  F137 34   40                 pshs   u  F139 1A   50                 orcc   #$50      disable interrupts  F13B 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F13D A7   C4                 sta    spicmd,u  F13F 10AF 44                 sty    hibyta,u  start address                      >F142 BD   F109               jsr    tsk2rx    SOCK# to buffer address                       F145 E7   44                 stb    hibyta,u  F147 108E 0020               ldy    #fifo  F14B E7   44                 stb    hibyta,u  shift out first data byte  F14D 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F14F                         trfr   X,W  F14F 1F                      fcb    $1f  F150 16                      fcb    X<<4|W                               endm  F151                         tfm4   U,Y  F151 113B                    fdb    $113b  F153 32                      fcb    U<<4|Y                               endm  F154 35   40                 puls   u  F156 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F158 A7   C4                 sta    spicmd,u  F15A                         pulsw  restore   E:F  F15A 1039                    fdb    $1039                               endm  F15C 35   01                 puls   cc                     *  F15E 35   06                 puls   d         old read pointer  F160 E3   E4                 addd   0,s       adjust transferred  F162 BD   F06E               jsr    PSRRXRP   update pointer                     *  F165 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=sock                     * E=socket#FIO Simulation Structure             13:55:03  Feb 13, 2024   Page   99wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F167 34   76       WRFB2SK   pshs   d,x,y,u  F169 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F16C 23   02                 bls    01f  F16E EC   4A                 ldd    wzrqln,u  F170 1F   01       01        tfr    d,x  F172 ED   E4                 std    0,s  F174 ED   48                 std    wzxfer,u  report size  F176 27   53                 beq    15f                     *  F178 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F17C 26   05                 bne    24f  F17E BD   F02A               jsr    GSRTXWP   get write pointer  F181 20   02                 bra    25f  F183 1F   20       24        tfr    y,d                     *  F185 34   06       25        pshs   d  F187 1F   02                 tfr    D,Y                     *  F189 CE   8080               ldu    #SPIBASE  F18C 34   01                 pshs   cc  F18E                         pshsw  save      E:F  F18E 1038                    fdb    $1038                               endm  F190 34   40                 pshs   u  F192 1A   50                 orcc   #$50  F194 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F196 A7   C4                 sta    spicmd,u  F198 10AF 44                 sty    hibyta,u  start address                       F19B BD   F0FA               jsr    tsk2tx                       F19E E7   44                 stb    hibyta,u  F1A0 108E 0020               ldy    #fifo  F1A4 33   44                 leau   hibyta,u  the first to shift out  F1A6                         trfr   X,W  F1A6 1F                      fcb    $1f  F1A7 16                      fcb    X<<4|W                               endm  F1A8                         tfm3   Y,U  F1A8 113A                    fdb    $113a  F1AA 23                      fcb    Y<<4|U                               endm  F1AB 35   40                 puls   u  F1AD 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F1AF A7   C4                 sta    spicmd,u  F1B1                         pulsw  restore   E:F!!  F1B1 1039                    fdb    $1039                               endm  F1B3 35   01                 puls   ccFIO Simulation Structure             13:55:03  Feb 13, 2024   Page  100wzspi, basic spi routines                                                *  F1B5 35   06                 puls   d         old write pointer  F1B7 E3   E4                 addd   0,s  F1B9 EE   66                 ldu    6,s       restore U  F1BB AE   C8 26              ldx    wztype,u  F1BE 8C   0002               cmpx   #SK_DGRM  F1C1 27   05                 beq    10f  F1C3 BD   F039     11        jsr    PSRTXWP   update pointer  F1C6 20   03                 bra    15f                       F1C8 ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F1CB 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             13:55:03  Feb 13, 2024   Page  101Debug Interface Routines                                                   F1CD               DB_main  F1CD 8D   4F                 bsr    DB_test   see if debug routines present  F1CF 6E   9F C002            jmp    [DEBUGROM+2]  F1D3               DB_pdata  F1D3 8D   49                 bsr    DB_test   see if debug routines present  F1D5 6E   9F C004            jmp    [DEBUGROM+4]  F1D9               DB_phex  F1D9 8D   43                 bsr    DB_test   see if debug routines present  F1DB 6E   9F C006            jmp    [DEBUGROM+6]  F1DF               DB_phex2  F1DF 8D   3D                 bsr    DB_test   see if debug routines present  F1E1 6E   9F C008            jmp    [DEBUGROM+8]  F1E5               DB_pcrlf  F1E5 8D   37                 bsr    DB_test   see if debug routines present  F1E7 6E   9F C00A            jmp    [DEBUGROM+10]  F1EB               DB_check  F1EB 8D   31                 bsr    DB_test   see if debug routines present  F1ED 6E   9F C00C            jmp    [DEBUGROM+12]  F1F1               DB_config  F1F1 8D   2B                 bsr    DB_test   see if debug routines present  F1F3 6E   9F C00E            jmp    [DEBUGROM+14]  F1F7 34   17       DB_msg    pshs   cc,d,x  F1F9 AE   65                 ldx    1+2+2,s   get return address  F1FB EC   81                 ldd    ,x++      get mask word  F1FD B4   0401               anda   DB_cntrl  F200 F4   0402               andb   DB_cntrl+1  F203 34   04                 pshs   b  F205 AA   E0                 ora    ,s+  F207 27   04                 beq    10f       jump if flag not set  F209 30   02                 leax   2,x       skip over false address & fall through  F20B 20   02                 bra    20f  F20D AE   84       10        ldx    ,x        get false branch label  F20F AF   65       20        stx    1+2+2,s   fix up return address  F211 35   97                 puls   cc,d,x,pc return                     *  F213               DB_pspace  F213               DB_outsp  F213 34   16                 pshs   d,x  F215 8E   F21C               ldx    #00f  F218 8D   B9                 bsr    DB_pdata  F21A 35   96                 puls   d,x,pc  F21C 20 00         00        fcc    ' ',0                       F21E 34   07       DB_test   pshs   cc,d  F220 FC   C000               ldd    DEBUGROM  Debug rom present?  F223 1083 1234               cmpd   #$1234    special marker  F227 27   05                 beq    99f       yes - exit  F229 35   07                 puls   cc,d      no - abort DB_xx function  F22B 32   62                 leas   2,s  F22D 39                      rts  F22E 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             13:55:04  Feb 13, 2024   Page  102Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             13:55:04  Feb 13, 2024   Page  103Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E03D   CPUtraps FFF0   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F1EB   DB_cntrl 0401   DB_confi F1F1   DB_iflg  0400   DB_main  F1CD   DB_msg   F1F7   DB_outsp F213   DB_pcrlf F1E5   DB_pdata F1D3   DB_phex  F1D9   DB_phex2 F1DF   DB_pspac F213   DB_test  F21E   DBmsg00  E000   DBmsg01  E009   DBmsg02  E029   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5C7   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    002E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   002A   D_inthan 0028   D_test   002C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2D3   FIFO_put E2F8   FIFOgeta E2CA   FIFOputa E2F0   FIOPRI   FFCE   FIO_get  E2A8   FIO_lock 0446   FIO_rel  E2BD   GCRGA    EC43   GCRILLT  ED0B   GCRIMR   ED47   GCRIR    ED29   GCRMR    EC25   GCRPHY   EE03   GCRRCR   EDBF   GCRRTR   EDA1   GCRSHA   EC9F   GCRSIMR  ED83   GCRSIP   ECDD   GCRSIR   ED65   GCRSNM   EC71   GCRUIP   EDEC   GCRURP   EDDD   GCRVERS  EE21   GSKATM   F0D0   GSRCR    EE4E   GSRDHAR  EEBE   GSRDIP   EEFC   GSRDPOR  EF2A   GSRFRAG  F0B2   GSRIMR   F094   GSRIR    EE73   GSRMR    EE30   GSRMSS   EF48   GSRPORT  EEA0   GSRPROT  EF66   GSRRBFS  EFC0   GSRRXRP  F05F   GSRRXRS  F048   GSRRXWP  F07D   GSRSR    EE91   GSRTBFS  EFDE   GSRTOS   EF84   GSRTTL   EFA2   GSRTXFR  EFFC   GSRTXRP  F013   GSRTXWP  F02A   HANGS    0001   HRECSIZ  0004   H_cpu    E446   H_fio    E46A   IF       0010   INTS     0002   IO_end   E371   IO_han   E313   IRQ_han  E38F   IRQmsg10 E39C   IS       0003   IU       0002   IX       0000   IY       0001   MAXHIST  0010   MAXTBL   0004   MAX_DEV  0001   MAX_S_NU 0015   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NET      0001   NUM_TSK  0459   O_INTRPT 0038   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EC5A   PCRILLT  ED1A   PCRIMR   ED56   PCRIR    ED38   PCRMR    EC34   PCRPHY   EE12   PCRRCR   EDCE   PCRRTR   EDB0   PCRSHA   ECBE   PCRSIMR  ED92   PCRSIP   ECF4   PCRSIR   ED74   PCRSNM   EC88   PF_INET  0002   PF_UNIX  0001   POLPRI   FFBA   PSRCR    EE5D   PSRDHAR  EEDD   PSRDIP   EF13   PSRDPOR  EF39   PSRFRAG  F0C1   PSRIMR   F0A3   PSRIR    EE82   PSRKATM  F0DF   PSRMR    EE3F   PSRMSS   EF57   PSRPORT  EEAF   PSRPROT  EF75   PSRRBFS  EFCF   PSRRXRP  F06E   PSRTBFS  EFED   PSRTOS   EF93   PSRTTL   EFB1   PSRTXWP  F039   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F118   REJECT   0080   ROMLOorg E000   ROM_ERR  E0AF   ROM_VERS 0030   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_RDFRM  0021   R_READ   0006   R_RQRD   0005   R_RQRDNB 0015   R_RQWR   0003   R_RQWRNB 0013   FIO Simulation Structure             13:55:05  Feb 13, 2024   Page  104Debug Interface Routines                            R_RRDFD  0022   R_RSNDTO 0023   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E3E3   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_RAW   0003   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_READ   0030   S_RQRD   0028   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WRFB2SK  F167   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSLACK   001D   WSLIST   0014   WSRAW    0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1BB   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E38C   bittab   E6D4   bmread   EBBC   bt2num   E6C3   byterd   EB98   bytewr   EBF5   change   E48E   chproc   040C   clock_ti 0455   conlb1   E77D   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E05C   fio_fsz  E05A   fio_irq  E206   fio_msg  E270   fio_rese E1C6   fio_resp E28C   fio_star E077   fio_wait E1E9   fiointe  E26F   functb   EACC   getjo1   E4D6   getjo2   E4E5   getjo4   E4EC   getjo6   E4F5   getjo8   E4F7   getjob   E4D0   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3B4   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   FIO Simulation Structure             13:55:05  Feb 13, 2024   Page  105Debug Interface Routines                            lstram   04C6   makrd6   E54F   makrdy   E53A   max_trn  E05E   mod_name 0002   mod_tbl  E1B5   mod_type 0000   no_dev   E136   num2bt   E6B9   nwp_strt 0000   oldorg   EB64   polext   E797   putru1   E50E   putru2   E515   putru4   E523   putru5   E532   putru6   E536   putrun   E501   rdrqer1  E8B1   rom_bad  E0AD   rom_firq E080   rom_init E05F   rom_int  E0A2   rom_nmi  E07A   rom_swi  E087   rom_swi2 E08D   rom_swi3 E094   rom_trap E09B   rsche2   E4A5   rsche3   E4B9   rsched   E494   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E615   send_SI  E425   set_tabl E0EE   showrg   EAFE   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E837   skbind   E7C0   skclin   E6F8   skclos   E6DD   skcner1  E7B6   skcner2  E7A3   skcner3  E7BA   skcner4  E7B2   skcner5  E7AE   skcner6  E7A7   skconn   E72A   skcraw   E64D   skctcp   E63B   skcudp   E644   skdisc   EB5D   skfres   E634   skinit   E5F7   skinthan E614   skintrp  EB5D   sklist   E805   sknewp   E616   skopen   E656   skoper1  E6AF   skoper2  E6B3   skrecv   E8B6   skreqrd  E86E   skreqwr  E8D8   sksend   E919   skskep   EB5D   sksmac   EB5D   skspcl   EAA5   sktest   E611   skurrd   E9A9   skurrdf  E93B   skurwt   E9D3   skusnm   EA22   skusnt   EA6F   skuwr2   EA22   sleep    E574   sleep7   E59C   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   EB64   spista   0000   spistr2  EB6A   sprend   EC13   stbinit  E0BC   sto_chk  E13D   swtchu   E4C5   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1A9   timerchk E1AF   timerin  E1A3   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F0EE   tsk2rx   F109   tsk2tx   F0FA   tskend   049E   tskinit  E14B   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E55B   wakeu3   E562   wakeu4   E566   wakeu5   E568   wakeup   E550   wlocip   0370   wordrd   EBAA   wordwr   EC04   wzanyp   0457   wzcmnd   0004   wzdev    EAD4   wzdevt   E628   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzipad   0014   wzmyip   0000   wzprot   0028   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzxfer   0008   xmtint   E5A9   