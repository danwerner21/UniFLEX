               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     13:34:15  Jun 16, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)               0006  PIPES     equ    6         Broken pipe                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                                          * constants for PROT_XLTEOLSWTPc      Intelligent I/O Proce     13:34:15  Jun 16, 2024   Page    2Hardware   Definitions                                             000A  LF        equ    $0a       line feed               000D  CR        equ    $0d       carriage return                                          * NETBLOCK constants               0004  NBRQLN    equ    4         4 bytes for request               0204  NBSIZE    equ    512+NBRQLN                     SWTPc      Intelligent I/O Proce     13:34:15  Jun 16, 2024   Page    3Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     13:34:15  Jun 16, 2024   Page    4Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     13:34:15  Jun 16, 2024   Page    5Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     13:34:16  Jun 16, 2024   Page    6Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     13:34:16  Jun 16, 2024   Page    7Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     13:34:16  Jun 16, 2024   Page    8Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     13:34:16  Jun 16, 2024   Page    9Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * MUST match nwp_codes.h  and MAX_S_NUM !!!!                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  S_OPEN  0004               D_func2   rmb    2         2  S_CLOSE  0006               D_func3   rmb    2         3  S_RQWR  0008               D_func4   rmb    2         4  S_SEND  000A               D_func5   rmb    2         5  S_RQRD  000C               D_func6   rmb    2         6  S_RECV  000E               D_func7   rmb    2         7  S_INTRPT  0010               D_func8   rmb    2         8  S_CONNECT  0012               D_func9   rmb    2         9  S_BIND  0014               D_funcA   rmb    2         10  S_LISTEN  0016               D_funcB   rmb    2         11  S_ACCEPT  0018               D_funcC   rmb    2         12  S_DISCON  001A               D_funcD   rmb    2         13  S_SNDMAC  001C               D_funcE   rmb    2         14  S_SNDKEP  001E               D_funcF   rmb    2         15  S_SPCL                     *  0020               D_func10  rmb    2         16 S_RRDFRM  0022               D_func11  rmb    2         17 S_RREAD  0024               D_func12  rmb    2         18 S_WRQSTO  0026               D_func13  rmb    2         19 S_WSNDO  0028               D_func14  rmb    2         20 S_WSNDTM  002A               D_func15  rmb    2SWTPc      Intelligent I/O Proce     13:34:16  Jun 16, 2024   Page   10Device     Table Structure                            002C               D_func16  rmb    2  002E               D_func17  rmb    2                       0030               D_func18  rmb    2         21 S_RQSBLK  0032               D_func19  rmb    2         22 S_SNDBLK  0034               D_func1A  rmb    2         23 S_RQRBLK  0036               D_func1B  rmb    2         24 S_RDRBLK                     *  0038               D_inthan  rmb    2         14 Interrupt poller/handler  003A               D_init    rmb    2         15 Device initialization  003C               D_test    rmb    2         16 Test for device present                     *  003E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     13:34:17  Jun 16, 2024   Page   11History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     13:34:17  Jun 16, 2024   Page   12IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 13:34:17  Jun 16, 2024   Page   13IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 13:34:17  Jun 16, 2024   Page   14IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMRAW    equ    $42       sock mac raw               0032  WSIRAW    equ    $32       sock IP raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commandsTask       Structure                 13:34:17  Jun 16, 2024   Page   15IOP        Memory Layout                                           0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                          * is SOCK_NONBLOCK               0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                     * is SOCK_SIGPIPECLS               0002  WFSPOC    equ    $02       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzdctr    rmb    1         [*] (pre= $00)  delay counter  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parameters                     *Task       Structure                 13:34:18  Jun 16, 2024   Page   16IOP        Memory Layout                              0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                                    002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_MRAW   equ    3         mac raw socket               0004  SK_IRAW   equ    4         IP raw socket                     *               0100  SK_NONBLK equ    $0100     non blocking               0200  SK_SPONCL equ    $0200     SIGPIPE on close                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address familiesTask       Structure                 13:34:18  Jun 16, 2024   Page   17IOP        Memory Layout                                           0002  PF_INET   equ    AF_INET                                    8000  PROT_XLTEOL equ  $8000     xlate CR<=>LF (stream only)               0001  PROT_ICMP equ    1               0002  PROT_IGMP equ    2               0008  PROT_EGP  equ    8                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             13:34:18  Jun 16, 2024   Page   18IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             13:34:18  Jun 16, 2024   Page   19IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             13:34:19  Jun 16, 2024   Page   20Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                                          *                     * Error codes                     *FIO Simulation Structure             13:34:19  Jun 16, 2024   Page   21Dual_Port RAM Structure                                            0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 Socket error,                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  set    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successful               0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  set    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                     *                     *                     * fio_codes.h is the leading file, here are                     * ammendments                     *                     *FIO Simulation Structure             13:34:19  Jun 16, 2024   Page   22Dual_Port RAM Structure                                            0003  R_RQWR    set    $03       [S]  Request for write               0005  R_RQRD    set    $05       [S]  Request for read               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                     *                     * netblock uses a specific interrupt routine                     *               0080  R_RQSBLK  equ    $80               0081  R_SNDBLK  equ    $81               0082  R_RQRBLK  equ    $82               0083  R_RDRBLK  equ    $83               0084  R_ERRBLK  equ    $84       error repsonse                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to mac               0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendtoFIO Simulation Structure             13:34:20  Jun 16, 2024   Page   23Dual_Port RAM Structure                                            0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *                     * a8                     * b0                     * b8                     *               00C0  S_RQSBLK  equ    $c0       request send extended block               00C8  S_SNDBLK  equ    $c8       send extended block               00D0  S_RQRBLK  equ    $d0       request read extended block               00D8  S_RDRBLK  equ    $d8       read extended block                     *                                    001C  MAX_S_NUM equ    28        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             13:34:20  Jun 16, 2024   Page   24Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             13:34:20  Jun 16, 2024   Page   25CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0BF                    fdb    rom_trap  Unused  FFF2 E0B8                    fdb    rom_swi3  SWI3  FFF4 E0B1                    fdb    rom_swi2  SWI2  FFF6 E0A4                    fdb    rom_firq  FIRQ  FFF8 E3B2                    fdb    IRQ_han   IRQ  FFFA E0AB                    fdb    rom_swi   SWI  FFFC E09E                    fdb    rom_nmi   Background debug  FFFE E080                    fdb    rom_init  Reset                     *                               info   UniFLEX Networking ROM                               info   for CPU09GPP+09NET                               info   At the start of ROM the locations for preset                               info   the network setting are reserved                               info   0000...0005  MAC ADDRESS                               info   0006...0009  IP address                               info   000A...000D  NETMASK                               info   000E...0011  GATEWAY IP address                               info   avoid any duplicate settings!                                          FIO Simulation Structure             13:34:20  Jun 16, 2024   Page   26System     RESET Code                                                      E000                         org    ROMLOorg                                          * start of ROM                     ***************************************************************                     *                     * contains the MAC ADDRESS to be used, make sure that is unique                     *                     * contains the IP address for the interface                     *                     * contains the NETMASK for the interface                     *                     * contains the IP address of the GATEWAY                     *                     **************************************************************                     *                     * REPLACE the defaults with your specific values                     *                     * mac address 6 bytes                            (E000...E005)  E000 FF FF FF FF   wzifma    fcb    $FF,$FF,$FF,$FF,$FF,$FF                     * IP addres for THIS interface (avoid duplicates!!!)  E006 FF FF FF FF   wzifip    fcb    255,255,255,255 (E006...E009)                     * NETMASK  E00A FF FF FF FF   wzifnm    fcb    255,255,255,255 (E00A...E00D)                     * GATEWAY  E00E FF FF FF FF   wzifga    fcb    255,255,255,255 (E00E...E011)                     *                     **************************************************************                       E012 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM version:240616',0  E02A 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E04A 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E05E 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               E07B  fio_fsz   equ    *         device fifo size               E07D  fio_dsz   equ    *+2       device RAM size               E07F  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E07B 0200                    fdb    512       fio_fsz FIFO SIZE  E07D 0400                    fdb    1024      fio_dsz DEVICE SIZE  E07F 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *FIO Simulation Structure             13:34:21  Jun 16, 2024   Page   27System     RESET Code                                                    * System RESET code                     *  E080 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E084                         ldmd   3  E084 113D                    fdb    $113d  E086 03                      fcb    3                               endm                      >E087 BD   E0E0     20        jsr    stbinit   go initialize system memory                       E08A 10FE 049C     30        lds    tsktab    Task 0 Stack  E08E 32   E9 00D7            leas   TSKSIZ,s  E092 17   0155               lbsr   fio_reset  E095 BD   E64E               jsr    skdvini   set the device itself  E098 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E09B               fio_start  E09B 7E   E4C0     10        jmp    rsched                                          FIO Simulation Structure             13:34:21  Jun 16, 2024   Page   28ROM        Interrupt Fielders                                              E09E 8D   26       rom_nmi   bsr    rom_int  E0A0 4E 4D 49 00             fcc    'NMI',0  E0A4 8D   20       rom_firq  bsr    rom_int  E0A6 46 49 52 51             fcc    'FIRQ',0  E0AB 8D   19       rom_swi   bsr    rom_int  E0AD 53 57 49 00             fcc    'SWI',0  E0B1 8D   13       rom_swi2  bsr    rom_int  E0B3 53 57 49 32             fcc    'SWI2',0  E0B8 8D   0C       rom_swi3  bsr    rom_int  E0BA 53 57 49 33             fcc    'SWI3',0  E0BF 8D   05       rom_trap  bsr    rom_int  E0C1 54 52 41 50             fcc    'TRAP',0                       E0C6 8E   E0D3     rom_int   ldx    #ROM_ERR  E0C9 BD   F3EA               jsr    DB_pdata  E0CC 35   10                 puls   x  E0CE BD   F3EA               jsr    DB_pdata  E0D1 20   FE       rom_bad   bra    *                     *  E0D3 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             13:34:21  Jun 16, 2024   Page   29Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0E0 8E   0000     stbinit   ldx    #0        s  clear all variables  E0E3 CC   0000               ldd    #0  E0E6 ED   81       10        std    ,x++  E0E8 8C   3EFF               cmpx   #end_vars done yet?  E0EB 25   F9                 blo    10b                       E0ED CC   0D04               ldd    #DEBUG  E0F0 FD   0401               std    DB_cntrl                                            E0F3 B6   E07F               lda    max_trn   shared with main CPU  E0F6 48                      asla             *2  E0F7 8B   04                 adda   #4        fixed system tasks  E0F9 B7   0459               sta    NUM_TSK                     * >E0FC 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0FF 8E   040E     15        ldx    #SI_Q     set queue empty  E102 BF   0444               stx    SI_Q_ptr  E105 8E   0447               ldx    #int_buf  reset message in pointer  E108 BF   0453               stx    int_ptr                      >E10B 17   0061     17        lbsr   tskinit   initialize tasks                       E10E 17   12F7     18        lbsr   DB_config display configuration  E111 39                      rts                                          *                     * Set up system tables                     *  E112               set_tables  E112 108E 04A0               ldy    #dev_tab  E116 8E   E5F3               ldx    #DEV_SOCK  E119 AF   22                 stx    dev_type,y  E11B AD   98 3A              jsr    [D_init,x] (skinit)                                          * Compute configuration  E11E CE   E1D9               ldu    #mod_tbl  tables with module refs  E121 AE   C4       12        ldx    mod_type,u  E123 27   09                 beq    20f       jump if end of module table  E125 AD   98 3C              jsr    [D_test,x] check for device  E128 25   04                 bcs    15f       jump if found  E12A 33   44                 leau   MOD_SIZE,u  E12C 20   F3                 bra    12b                     *FIO Simulation Structure             13:34:21  Jun 16, 2024   Page   30Table      Initialization                             E12E               15  E12E               20                     * -- All done setting up configuration                       E12E CC   04C6               ldd    #SYS_TABS start of system tables  E131 1F   03                 tfr    d,u                     * -- Task table  E133 86   D7                 lda    #TSKSIZ  E135 F6   0459               ldb    NUM_TSK  E138 3D                      mul  E139 FF   049C               stu    tsktab >E13C 17   0022               lbsr   sto_chk   check for system table space overflow  E13F FF   049E               stu    tskend                     *                     * -- All done  E142 39            90        rts                     *  E143 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E15A 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E161 33   CB       sto_chk   leau   d,u       compute new end pointer  E163 1183 3EFF               cmpu   #end_vars overflow?  E167 22   03                 bhi    10f       yes - return error  E169 1C   FE                 clc              no         - return OK  E16B 39                      rts  E16C 1A   01       10        sec              ..         bad owies  E16E 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E16F BE   049C     tskinit   ldx    tsktab  E172 BF   0409               stx    utask  E175 F6   0459               ldb    NUM_TSK   # tasks in system  E178 34   04                 pshs   b  E17A 10BE 049C               ldy    tsktab    task 1  E17E 31   A9 00D7            leay   TSKSIZ,y  E182               10                                            E182 86   04       11        lda    #TFREE    mark all tasks free  E184 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             13:34:21  Jun 16, 2024   Page   31Table      Initialization                             E187 26   02                 bne    15f  E189 86   05                 lda    #TSYS     the system task is never free  E18B A7   04       15        sta    tsstat,x  E18D 86   FF                 lda    #$FF      not associated with a terminal  E18F A7   0D                 sta    tsdev,x  E191 A7   0E                 sta    tsdev+1,x  E193 33   89 00D7            leau   TSKSIZ,x  initialize stack  E197 CC   E335               ldd    #IO_han  E19A 34   20                 pshs   y  E19C AC   E1                 cmpx   ,s++      task 1?  E19E 26   03                 bne    20f       no - normal I/O handling task  E1A0 CC   E406               ldd    #SI_HAN   yes - special terminal interrupt handling task  E1A3 36   06       20        pshu   d  E1A5 EF   88 11              stu    usp,x  E1A8 EF   88 13              stu    umark0,x  E1AB 30   89 00D7            leax   TSKSIZ,x  E1AF 6A   E4                 dec    0,s       done?  E1B1 26   CF                 bne    10b  E1B3 32   61                 leas   1,s       clean up stack  E1B5 CC   0000               ldd    #0        nothing running or sleeping  E1B8 FD   0403               std    runlst  E1BB FD   0405               std    slplst  E1BE FD   0407               std    slplst+tsslnk  E1C1 30   A4                 leax   0,y       start interrupt handling task  E1C3 BD   E566               jsr    makrdy  E1C6 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1C7 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1C9 B7   8400               sta    tim_base  interrupt enable  E1CC 39                      rts                                                         E1CD  timerack  equ    *  E1CD 86   01                 lda    #1  E1CF B7   8401               sta    tim_rest  reset interrupt  E1D2 39                      rts                       E1D3 B6   8400     timerchk  lda    tim_base  E1D6 84   80                 anda   #%10000000 interrupt flag  E1D8 39                      rtsFIO Simulation Structure             13:34:22  Jun 16, 2024   Page   32IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1D9  mod_tbl   equ    *  E1D9 E5F3 E1DF               fdb    DEV_SOCK,WZ5_name  E1DD 0000                    fdb    0                     *  E1DF 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             13:34:22  Jun 16, 2024   Page   33FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     * it sets the offsets to the sock array and to the device info                     *  E1EA               fio_reset                     * when here, all storage locations have been erased already                     *  E1EA 8E   0000               ldx    #0  E1ED 9F   14                 stx    fifo_get  set Q pointers  E1EF 9F   16                 stx    fifo_put  E1F1 8E   0370               ldx    #WZNETOF  E1F4 9F   1A                 stx    fifo_us1  E1F6 8E   0220               ldx    #WZSKOFF  E1F9 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1FB 86   08                 lda    #8  E1FD A7   84       01        sta    wzenum,x  E1FF 30   88 2A              leax   WZSIZE,x  to next  E202 4A                      deca  E203 26   F8                 bne    01b                     *  E205 BE   E07D               ldx    fio_dsz  E208 30   1E                 leax   -2,x      one from top  E20A CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E20D C6   FF       fio_wait  ldb    #255      Spin counter                     *  E20F               00  E20F 6D   84                 tst    0,x       fio_cpuF  E211 27   16                 beq    10f                     *  E213 5A                      decb  E214 26   F9                 bne    00b       jump back if not ready                     *  E216 33   5F                 leau   -1,u  E218 1183 0000               cmpu   #0  E21C 26   EF                 bne    fio_wait  E21E 8E   E05E               ldx    #CPU_down  E221 17   11C6               lbsr   DB_pdata  E224 17   11BD               lbsr   DB_main  E227 20   C1                 bra    fio_reset                     * reset OK  E229 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     * for regular NWP and IOP purpose                     *  E22A BE   0453     fio_irq   ldx    int_ptr   input message pointerFIO Simulation Structure             13:34:22  Jun 16, 2024   Page   34FIO        Simulation Routines                        E22D 96   00                 lda    cpu_fio   move REQUEST  E22F A7   80                 sta    ,x+  E231 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E233 ED   81                 std    ,x++  E235 96   03                 lda    cpu_fio2  specific DATA  E237 A7   80                 sta    ,x+  E239 DC   04                 ldd    cpu_fio3  device major/minor  E23B ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E23D FE   E07D               ldu    fio_dsz  E240 33   5F                 leau   -1,u  E242 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E244 BF   0453               stx    int_ptr   update pointer  E247 108E 0447               ldy    #int_buf  get message from buffer  E24B A6   A4                 lda    0,y       -- Send interrupt command?  E24D 81   38                 cmpa   #S_INTRPT  E24F 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E251 10BF 0453               sty    int_ptr   reset pointer  E255 E6   23                 ldb    3,y       signal  E257 AE   24                 ldx    4,y       SOCK reference                     *  E259 BD   E6A6               jsr    sdev_sig  send device signal  E25C 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E25E BE   049C     30        ldx    tsktab    search for an available task  E261 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E264 A6   04       32        lda    tsstat,x  E266 81   04                 cmpa   #TFREE    looking for a "free" task  E268 27   0E                 beq    40f                     *  E26A 30   89 00D7            leax   TSKSIZ,x  E26E 5A                      decb  E26F 26   F3                 bne    32b                     *  E271 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E273 BD   E294               jsr    fio_msg  E276 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E278 108E 0447     40        ldy    #int_buf  get message from bufferFIO Simulation Structure             13:34:22  Jun 16, 2024   Page   35FIO        Simulation Routines                        E27C 10BF 0453               sty    int_ptr   reset pointer  E280 E6   A0                 ldb    ,y+       command byte  REQUEST  E282 E7   09                 stb    tscmd,x   save for task  E284 EC   A1                 ldd    ,y++      sequence #    task ID  E286 ED   0A                 std    tsseq,x  E288 E6   A0                 ldb    ,y+       command specific DATA  E28A E7   0C                 stb    tstval,x  E28C EC   A1                 ldd    ,y++      associate with terminal major/minor  E28E ED   0D                 std    tsdev,x  E290 BD   E566               jsr    makrdy    make task ready to run                     *  E293 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *                     * used for netblock/IOP and NWP purpose                     *  E294 34   54       fio_msg   pshs   b,x,u     save register  E296 FE   E07D               ldu    fio_dsz  E299 33   5E                 leau   -2,u      one off top  E29B D7   09                 stb    fio_cpu   set up mailbox value                     * interrupt location  E29D E7   C4       5         stb    0,u       fio_cpuF, tell the message type                     *  E29F 8E   0000     05        ldx    #0        time-out counter                     *  E2A2 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E2A4 27   06                 beq    20f       jump if consumed                     *  E2A6 30   1F                 leax   -1,x      time-out yet?  E2A8 26   F8                 bne    10b                     *  E2AA 20   F3                 bra    05b       try again                     *  E2AC 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E2AE 34   16       fio_response pshs d,x  E2B0 8D   18                 bsr    FIO_get   access FIO  E2B2 BE   0409               ldx    utask     task IDFIO Simulation Structure             13:34:23  Jun 16, 2024   Page   36FIO        Simulation Routines                        E2B5 EC   0A                 ldd    tsseq,x  E2B7 DD   0A                 std    fio_cpu1  E2B9 EC   0D                 ldd    tsdev,x   device info  E2BB DD   0D                 std    fio_cpu3  E2BD A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2BF 97   0C                 sta    fio_cpu2  E2C1 E6   61                 ldb    1,s       is RESPONSE code >E2C3 BD   E294               jsr    fio_msg  E2C6 8D   17                 bsr    FIO_rel   release FIO  E2C8 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2CA 34   76       FIO_get   pshs   d,x,y,u   save registers  E2CC 108E 0446     10        ldy    #FIO_lock is the device locked  E2D0 6D   A4                 tst    0,y  E2D2 27   07                 beq    20f       no - go get it                     *  E2D4 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2D6 BD   E5A0               jsr    sleep  E2D9 20   F1                 bra    10b       try again                     *  E2DB 6C   A4       20        inc    0,y       mark in use  E2DD 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2DF 34   76       FIO_rel   pshs   d,x,y,u  E2E1 108E 0446               ldy    #FIO_lock  E2E5 6F   A4                 clr    0,y  E2E7 BD   E57C               jsr    wakeup  E2EA 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2EC 34   04       FIFOgeta  pshs   b  E2EE 8D   05                 bsr    FIFO_get  E2F0 35   02                 puls   a  E2F2 1E   89                 exg    a,b  E2F4 39                      rts                     *  E2F5 34   12       FIFO_get  pshs   a,x  E2F7 DC   12                 ldd    fifo_cnt  any data?  E2F9 27   15                 beq    99f       no - exit                     *  E2FB                         decd   yes       - adjust count  E2FB 104A                    fdb    $104aFIO Simulation Structure             13:34:23  Jun 16, 2024   Page   37FIO        Simulation Routines                                                     endm  E2FD DD   12                 std    fifo_cnt  E2FF 9E   14                 ldx    fifo_get  get consumer pointer  E301 E6   88 20              ldb    fifo,x    fetch byte  E304 30   01                 leax   1,x       bump pointer  E306 BC   E07B               cmpx   fio_fsz   end of fifo?  E309 26   03                 bne    10f                     *  E30B 8E   0000               ldx    #0        reset pointer                     *  E30E 9F   14       10        stx    fifo_get                     *  E310 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E312 34   04       FIFOputa  pshs   b  E314 1F   89                 tfr    a,b  E316 8D   02                 bsr    FIFO_put  E318 35   84                 puls   b,pc                     *  E31A 34   16       FIFO_put  pshs   d,x  E31C 9E   16                 ldx    fifo_put  get consumer pointer  E31E E7   88 20              stb    fifo,x    store byte  E321 30   01                 leax   1,x       bump pointer  E323 BC   E07B               cmpx   fio_fsz   end of FIFO?  E326 26   03                 bne    10f                     *  E328 8E   0000               ldx    #0        reset pointer  E32B 9F   16       10        stx    fifo_put                     *  E32D DC   12                 ldd    fifo_cnt  E32F                         incd  E32F 104C                    fdb    $104c                               endm  E331 DD   12                 std    fifo_cnt  E333 35   96       99        puls   d,x,pcFIO Simulation Structure             13:34:23  Jun 16, 2024   Page   38IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E335               IO_han    seti   block     interrupts  E335 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E337               10        clri  E337 1C   AF                 andcc  #!(FF|IF)                               endm  E339 BE   0409               ldx    utask     get task control block address  E33C A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E33E 44                      lsra             isolate    command  E33F 44                      lsra  E340 44                      lsra                     **        lsra  E341 81   1C                 cmpa   #MAX_S_NUM  E343 22   69                 bhi    bad_cmd                     *  E345 48                      lsla             --   word index on command  E346 34   10                 pshs   x  E348 8E   04A0               ldx    #dev_tab  E34B AE   02                 ldx    dev_type,x get handler table address  E34D 10AE 86                 ldy    a,x       get processor address  E350 35   10                 puls   x  E352 34   20                 pshs   y  E354 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E357 27   0A                 beq    05f       else it is target ponter  E359 10AF E4                 sty    0,s  E35C 108E 0000               ldy    #0  E360 10AF 0F                 sty    tsagin,x  reset pointer  E363 35   20       05        puls   y         change address  E365 4F                      clra                     *  E366 8E   E393               ldx    #IO_end   interrupt handler address  E369 34   10                 pshs   x  E36B BE   0409               ldx    utask     task pointer  E36E 10EF 88 15              sts    umark1,x  E372 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             13:34:24  Jun 16, 2024   Page   39IO         Command Handler                            E374 1E   03                 exg    d,u  E376 84   07                 anda   #%00000111 mask off address bits  E378 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E37A AD   A4                 jsr    0,y       perform operation & return status  E37C 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E37E BE   0409               ldx    utask     restore task pointer  E381 108C FFFF               cmpy   #$ffff  E385 26   09                 bne    20f                     * task is NOT done yet  E387 86   BA                 lda    #POLPRI  E389 A7   05                 sta    tsprir,x  at lower prio  E38B BD   E4BA               jsr    change  E38E 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E390 BD   E2AE     20        jsr    fio_response                     *                     * task is done                     *  E393               IO_end    seti   mask      interrupts  E393 1A   50                 orcc   #FF|IF                               endm  E395 BE   0409               ldx    utask     restore task control block address  E398 A7   0C                 sta    tstval,x  remember transaction value sent  E39A E7   09                 stb    tscmd,x   and command response  E39C 86   04                 lda    #TFREE    mark task "terminated & free"  E39E A7   04                 sta    tsstat,x  E3A0 86   FF                 lda    #$FF      disassociate from any terminal  E3A2 A7   0D                 sta    tsdev,x  E3A4 A7   0E                 sta    tsdev+1,x  E3A6 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E3A8 BD   E4C0     90        jsr    rsched    run other tasks >E3AB 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E3AE               bad_cmdFIO Simulation Structure             13:34:24  Jun 16, 2024   Page   40IO         Command Handler                            E3AE C6   81                 ldb    #E_BADCMD error code  E3B0 20   DE                 bra    20b                     *          rts          (bug in original code 240424)FIO Simulation Structure             13:34:24  Jun 16, 2024   Page   41Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3B2  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3B2 BE   E07D     10        ldx    fio_dsz  E3B5 30   1F                 leax   -1,x  E3B7 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3B9 27   03                 beq    99f       no - move on  E3BB BD   E22A               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3BE 3B            99        rti              return from interrupt                     *  E3BF 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3CA 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             13:34:24  Jun 16, 2024   Page   42Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3D7 34   36       int_all   pshs   d,x,y  E3D9 F6   0459               ldb    NUM_TSK  E3DC C0   02                 subb   #2  E3DE 34   04                 pshs   b  E3E0 BE   049C               ldx    tsktab  E3E3 30   89 01AE            leax   2*TSKSIZ,x                     *  E3E7 EC   61       10        ldd    1,s  E3E9 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3EC 26   0C                 bne    20f                     *  E3EE BC   0409               cmpx   utask     make sure I don't get blown away  E3F1 27   07                 beq    20f                     *  E3F3 34   16                 pshs   d,x  E3F5 BD   E5D5               jsr    xmtint    interrupt task  E3F8 35   16                 puls   d,x                     *  E3FA 30   89 00D7  20        leax   TSKSIZ,x  next task  E3FE 6A   E4                 dec    0,s       more tasks?  E400 26   E5                 bne    10b  E402 32   61                 leas   1,s                     *  E404 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             13:34:24  Jun 16, 2024   Page   43Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E406 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E40A                         seti  E40A 1A   50                 orcc   #FF|IF                               endm  E40C FE   0444               ldu    SI_Q_ptr  get current Q ptr  E40F 1183 040E               cmpu   #SI_Q     anything in Q?  E413 26   07                 bne    20f       yes - go process it                     *  E415 C6   D8                 ldb    #SIQPRI   wait for something to do  E417 BD   E5A0               jsr    sleep  E41A 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E41C E6   C2       20        ldb    0,-u      B = Interrupt #  E41E 34   04                 pshs   b  E420 EC   C3                 ldd    0,--u     A = Device #  E422 34   06                 pshs   d  E424 EC   C3                 ldd    0,--u     task ID  E426 34   06                 pshs   d         save registers  E428 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E42B E6   63                 ldb    3,s       set up to flush all input for this terminal  E42D                         clri   allow     interrupts  E42D 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E42F BD   E2CA               jsr    FIO_get   get access to FIO  E432 EC   E1                 ldd    0,s++     task ID  E434 DD   0A                 std    fio_cpu1  E436 EC   E1                 ldd    ,s++      terminal #  E438 DD   0D                 std    fio_cpu3  terminal  E43A E6   E0                 ldb    ,s+       interrupt #  E43C D7   0C                 stb    fio_cpu2  signal  E43E C6   07                 ldb    #R_INTRPT  E440 BD   E294               jsr    fio_msg   send interrupt message  E443 BD   E2DF               jsr    FIO_rel   release access to FIO  E446 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = task struct                     *   U= wzsock                     *   jsr send_SI                     *FIO Simulation Structure             13:34:25  Jun 16, 2024   Page   44Terminal   Interrupt Handling Task                    E448 34   76       send_SI   pshs   d,x,y,u   save registers  E44A EC   C8 26              ldd    wztype,u  E44D 85   02                 bita   #WFSPOC  E44F 27   1F                 beq    99f                     *  E451 FE   0444               ldu    SI_Q_ptr  get Q head  E454 1183 0444               cmpu   #SI_Q_ptr check for overflow  E458 24   0F                 bhs    90f       exit if so - sorry                     *  E45A EC   0A                 ldd    tsseq,x   task ID @ master side  E45C ED   C1                 std    0,u++  E45E EC   0D                 ldd    tsdev,x   wzsock#  E460 ED   C1                 std    0,u++     place value in Queue  E462 E6   61                 ldb    1,s       old B  E464 E7   C0                 stb    0,u+  E466 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E469 108E 040E     90        ldy    #SI_Q     wake up Queue server  E46D BD   E57C               jsr    wakeup  E470 35   F6       99        puls   d,x,y,u,pc return                     FIO Simulation Structure             13:34:25  Jun 16, 2024   Page   45History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E472 34   16       H_cpu     pshs   d,x  E474 BE   049A               ldx    hstptr    get history queue pointer  E477 96   00                 lda    cpu_fio  E479 A7   84                 sta    hst_cmd,x  E47B 96   01                 lda    cpu_fio1  E47D A7   01                 sta    hst_seq,x  E47F 96   04                 lda    cpu_fio3  E481 A7   02                 sta    hst_tty,x  E483 96   03                 lda    cpu_fio2  E485 A7   03                 sta    hst_val,x  E487 30   04                 leax   HRECSIZ,x  E489 8C   049A               cmpx   #hstptr   end of Queue?  E48C 25   03                 blo    10f  E48E 8E   045A               ldx    #hstbuf  E491 BF   049A     10        stx    hstptr  E494 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E496 34   16       H_fio     pshs   d,x  E498 BE   049A               ldx    hstptr    get history queue pointer  E49B 96   09                 lda    fio_cpu  E49D A7   84                 sta    hst_cmd,x  E49F 96   0A                 lda    fio_cpu1  E4A1 A7   01                 sta    hst_seq,x  E4A3 96   0D                 lda    fio_cpu3  E4A5 A7   02                 sta    hst_tty,x  E4A7 96   0C                 lda    fio_cpu2  E4A9 A7   03                 sta    hst_val,x  E4AB 30   04                 leax   HRECSIZ,x  E4AD 8C   049A               cmpx   #hstptr   end of Queue?  E4B0 25   03                 blo    10f  E4B2 8E   045A               ldx    #hstbuf  E4B5 BF   049A     10        stx    hstptr  E4B8 35   96                 puls   d,x,pcFIO Simulation Structure             13:34:25  Jun 16, 2024   Page   46Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4BA BE   0409     change    ldx    utask     point to task table entry >E4BD 17   006D               lbsr   putrun    put on ready list                     *  E4C0               rsched    seti   mask      interrupts  E4C0 1A   50                 orcc   #FF|IF                               endm  E4C2 BE   0409               ldx    utask     point to current task  E4C5 10EF 88 13              sts    umark0,x  save stack pointers  E4C9 BE   049C               ldx    tsktab    point to task table  E4CC 8D   23                 bsr    swtchu    switch users  E4CE 7F   040D               clr    idle      reset idle/running flag                     *  E4D1 7F   040C     rsche2    clr    chproc    reset change flag >E4D4 17   0025               lbsr   getjob    get a new task  E4D7 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4D9 86   7F       05        lda    #127      set higheset priority  E4DB B7   040B               sta    jobpri    set as current  E4DE                         clri   clear     interrupts  E4DE 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4E0 12                      nop  E4E1                         seti  E4E1 1A   50                 orcc   #FF|IF                               endm  E4E3 20   EC                 bra    rsche2    loop til find a ready one                     *  E4E5 F7   040B     rsche3    stb    jobpri    set new priority  E4E8 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             13:34:25  Jun 16, 2024   Page   47Scheduler  routines                                   E4EA BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4ED CC   0001               ldd    #1        return 1 to new task  E4F0 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4F1 35   20       swtchu    puls   y         get return address  E4F3 BF   0409               stx    utask     set up new running task  E4F6 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4FA 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             13:34:26  Jun 16, 2024   Page   48Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4FC 5F            getjob    clrb             clear      flag  E4FD BE   0403               ldx    runlst    point to head of list  E500 27   1F                 beq    getjo6    empty list?                     *  E502 A6   04       getjo1    lda    tsstat,x  get status byte  E504 81   01                 cmpa   #TRUN     is it in run state?  E506 26   1B                 bne    getjo8                     *  E508 5D                      tstb             first      in list?  E509 27   06                 beq    getjo2                     *  E50B EC   84                 ldd    tslink,x  remove from list  E50D ED   A4                 std    tslink,y  E50F 20   07                 bra    getjo4                     *  E511 10AE 84       getjo2    ldy    tslink,x  remove from list head  E514 10BF 0403               sty    runlst    set new head                     *  E518 E6   05       getjo4    ldb    tsprir,x  get priority  E51A 6F   84                 clr    tslink,x  zero out link  E51C 6F   01                 clr    tslink+1,x so not run list  E51E 86   FF                 lda    #$ff      set ne status  E520 39                      rts              return                         *  E521 4F            getjo6    clra             set        eq status  E522 39                      rts                     *  E523 1F   12       getjo8    tfr    x,y       save old pos  E525 AE   84                 ldx    tslink,x  follow link  E527 27   F8                 beq    getjo6                     *  E529 C6   01                 ldb    #1        set flag  E52B 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             13:34:26  Jun 16, 2024   Page   49Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E52D 34   01       putrun    pshs   cc        save status  E52F                         seti   mask      interrupts  E52F 1A   50                 orcc   #FF|IF                               endm  E531 10BE 0403               ldy    runlst    point to head  E535 26   0A                 bne    putru2  E537 BF   0403               stx    runlst    set new head                     *  E53A CC   0000     putru1    ldd    #0        set last link  E53D ED   84                 std    tslink,x  E53F 35   81                 puls   cc,pc     return                     *  E541 E6   05       putru2    ldb    tsprir,x  get priority  E543 E1   25                 cmpb   tsprir,y  look for correct prior slot  E545 2F   08                 ble    putru4                     *  E547 FC   0403               ldd    runlst  E54A BF   0403               stx    runlst    set new head  E54D 20   0F                 bra    putru5    link in rest                     *  E54F 1F   23       putru4    tfr    y,u       save last look  E551 10AE A4                 ldy    tslink,y  follow link  E554 27   0C                 beq    putru6                     *  E556 E1   25                 cmpb   tsprir,y  check priority  E558 2F   F5                 ble    putru4                     *  E55A EC   C4                 ldd    tslink,u  link into list here  E55C AF   C4                 stx    tslink,u                     *  E55E ED   84       putru5    std    tslink,x  E560 35   81                 puls   cc,pc     return                     *  E562 AF   C4       putru6    stx    tslink,u  E564 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             13:34:26  Jun 16, 2024   Page   50Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E566 86   01       makrdy    lda    #TRUN     set status  E568 A7   04                 sta    tsstat,x  E56A CC   0000               ldd    #0        clear events flag  E56D ED   06                 std    tsevnt,x  E56F 8D   BC                 bsr    putrun    put on ready list  E571 E6   05                 ldb    tsprir,x  get priority  E573 F1   040B               cmpb   jobpri    higher than current?  E576 2F   03                 ble    makrd6                     *  E578 7C   040C               inc    chproc    set change flag                     *  E57B 39            makrd6    rts              return    FIO Simulation Structure             13:34:26  Jun 16, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E57C 34   57       wakeup    pshs   cc,d,x,u  save registers  E57E                         seti   mask      interupts  E57E 1A   50                 orcc   #FF|IF                               endm  E580 CE   0405               ldu    #slplst  E583 AE   42                 ldx    tsslnk,u  point to sleep list  E585 27   0B                 beq    wakeu4                     *  E587 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E58A 27   08                 beq    wakeu5  E58C 33   84                 leau   0,x       mark this entry                     *  E58E AE   02       wakeu3    ldx    tsslnk,x  follow chain  E590 26   F5                 bne    wakeu2    end of list?                     *  E592 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E594 34   70       wakeu5    pshs   x,y,u     save registers  E596 EC   02                 ldd    tsslnk,x  remove from list  E598 ED   42                 std    tsslnk,u  E59A 8D   CA                 bsr    makrdy    put on ready list  E59C 35   70                 puls   u,x,y  E59E 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             13:34:27  Jun 16, 2024   Page   52Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E5A0 34   51       sleep     pshs   cc,x,u    save registers  E5A2 BE   0409               ldx    utask     point to task  E5A5 6D   08                 tst    tssgnl,x  any signals waiting?  E5A7 26   1F                 bne    sleep7                     *  E5A9                         seti   mask      ints  E5A9 1A   50                 orcc   #FF|IF                               endm  E5AB E7   05                 stb    tsprir,x  set priority  E5AD 10AF 06                 sty    tsevnt,x  set event  E5B0 86   02                 lda    #TSLEEP   set status  E5B2 A7   04                 sta    tsstat,x  E5B4 FC   0407               ldd    slplst+tsslnk get head of list  E5B7 ED   02                 std    tsslnk,x  set new link  E5B9 BF   0407               stx    slplst+tsslnk set new head  E5BC 17   FF01               lbsr   rsched    reschedule cpu                       E5BF BE   0409     20        ldx    utask     get task entry  E5C2 6D   08                 tst    tssgnl,x  any signals waiting?  E5C4 26   02                 bne    sleep7                     *  E5C6 35   D1                 puls   cc,x,u,pc return                     *  E5C8 BE   0409     sleep7    ldx    utask     reset signal  E5CB 6F   08                 clr    tssgnl,x  E5CD EC   88 15              ldd    umark1,x  stack reset point  E5D0 35   51                 puls   cc,x,u    reset cc and registers  E5D2 1F   04                 tfr    d,s       change stacks  E5D4 39                      rts              returnFIO Simulation Structure             13:34:27  Jun 16, 2024   Page   53Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5D5 34   76       xmtint    pshs   d,x,y,u   save registers  E5D7 A6   04                 lda    tsstat,x  get task state  E5D9 81   01                 cmpa   #TRUN     running?  E5DB 26   06                 bne    10f       no - try something else                     *  E5DD 86   01                 lda    #1        set signal  E5DF A7   08                 sta    tssgnl,x  E5E1 20   0E                 bra    99f       exit                     *  E5E3 81   02       10        cmpa   #TSLEEP   task sleeping?  E5E5 26   0A                 bne    99f       no - can't send interrupt                     *  E5E7 86   01                 lda    #1        set signal  E5E9 A7   08                 sta    tssgnl,x  E5EB 10AE 06                 ldy    tsevnt,x  wake task up >E5EE 17   FF8B               lbsr   wakeup                     *  E5F1 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             13:34:27  Jun 16, 2024   Page   54Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5F3               DEV_SOCK  E5F3 E3AE                    fdb    bad_cmd   0  E5F5 E6ED                    fdb    skopen    S_OPEN    1 open socket  E5F7 E78D                    fdb    skclos    S_CLOSE   2 close socket  E5F9 E9AE                    fdb    skreqwr   S_RQWR    3 request write to socket  E5FB E9F5                    fdb    sksend    S_SEND    4 write data to socket  E5FD E91E                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5FF E96B                    fdb    skrecv    S_RECV    6 read data from socket  E601 E78D                    fdb    skintrp   S_INTRPT  7 interrupt socket  E603 E7DA                    fdb    skconn    S_CONNECT 8 connect socket  E605 E870                    fdb    skbind    S_BIND    9 bind socket  E607 E8B5                    fdb    sklist    S_LISTEN  10 listen on socket  E609 E8E7                    fdb    skacpt    S_ACCEPT  11 accept connection  E60B ED76                    fdb    skdisc    S_DISCON  12 disconnect socket  E60D ED76                    fdb    sksmac    S_SNDMAC  13 send mac  E60F ED76                    fdb    skskep    S_SNDKEP  14 send keep alive  E611 ECB2                    fdb    skspcl    S_SPCL    15 special command  E613 EA37                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E615 EAAE                    fdb    skurrd    S_RREAD   17 read data readfrom  E617 EADC                    fdb    skurwt    S_WRQSTO  18 request write sendto  E619 EB81                    fdb    skusnt    S_WSNDTO  19 write data sendto  E61B EB2B                    fdb    skusnm    S_WSNDTM  20 write data send more  E61D E64B                    fdb    sknone    21  E61F E64B                    fdb    sknone    22  E621 E64B                    fdb    sknone    23  E623 EC4B                    fdb    sknbsr    S_RQSBLK  24 netblock req send ext block  E625 EC85                    fdb    sknbsd    S_SNDBLK  25 netblock send ext block  E627 EBBB                    fdb    sknbrr    S_RQRBLK  26 netblock req read ext block  E629 EC1F                    fdb    sknbrd    S_RDRBLK  27 netblock read ext block                                          *  E62B E6A5                    fdb    skinthan  16 socket interrupt handler  E62D E631                    fdb    skinit    17 socket initialization  E62F E6A2                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                    0200  BUFSIZ    equ    512       fifo and system buffer size                     FIO Simulation Structure             13:34:27  Jun 16, 2024   Page   55wz socket interface routines                                             *                     * do everything to init the system                     *               E631  skinit    equ    *  E631 BD   ED7D               jsr    spinit    set SPI  E634 C6   82                 ldb    #%10000010 software reset + force ARP  E636 BD   EE4D               jsr    PCRMR  E639 BD   EE3E     01        jsr    GCRMR  E63C 5D                      tstb  E63D 2B   FA                 bmi    01b                     *  E63F C6   78                 ldb    #%01111000 power up  E641 BD   F02B               jsr    PCRPHY    set the PHY part  E644 CC   8000               ldd    #32768  E647 FD   0457               std    wzanyp    set value for Source port  E64A 39                      rts                                          *                     * sknone, return error, not implemented                     *  E64B C6   81       sknone    ldb    #E_BADCMD  E64D 39                      rts                                          *                     * check if ROM locations are preset, if not skip this here                     * else setup device with provided values                     *  E64E 108E E000     skdvini   ldy    #wzifma   where mac address is to be found  E652 EC   A1       03        ldd    0,y++  E654 1083 FFFF               cmpd   #$ffff    not set  E658 26   07                 bne    02f  E65A 108C E012               cmpy   #wzifga+4 past area  E65E 25   F2                 blo    03b                     * ROM not initialized, do nothing  E660 39                      rts                                          *                     * values present, setup device                     *  E661 34   66       02        pshs   d,y,u  E663 DE   1A                 ldu    fifo_us1  E665 108E E006               ldy    #wzifip   source IP  E669 EC   A1                 ldd    0,y++  E66B ED   C1                 std    0,u++  E66D EC   A1                 ldd    0,y++  E66F ED   C1                 std    0,u++  E671 108E E00A               ldy    #wzifnm   netmask  E675 EC   A1                 ldd    0,y++  E677 ED   C1                 std    0,u++  E679 EC   A1                 ldd    0,y++  E67B ED   C1                 std    0,u++  E67D 108E E00E               ldy    #wzifga   gateway ipFIO Simulation Structure             13:34:28  Jun 16, 2024   Page   56wz socket interface routines                          E681 EC   A1                 ldd    0,y++  E683 ED   C1                 std    0,u++  E685 EC   A1                 ldd    0,y++  E687 ED   C1                 std    0,u++  E689 108E E000               ldy    #wzifma   mac address  E68D EC   A1                 ldd    0,y++  E68F ED   C1                 std    0,u++  E691 EC   A1                 ldd    0,y++  E693 ED   C1                 std    0,u++  E695 EC   A1                 ldd    0,y++  E697 ED   C1                 std    0,u++                     *  E699 C6   FF                 ldb    #$ff      set active  E69B E7   C4                 stb    0,u  E69D BD   ECE1               jsr    wzwdev    init device with settings  E6A0 35   E6                 puls   d,y,u,pc                                          *                     * test if device is present                     *  E6A2 1A   01       sktest    sec              yes  E6A4 39                      rts                                          *                     * skinthan, fromddevice table                     *               E6A5  skinthan  equ    *  E6A5 39                      rts                                          *                     * device signal handle, from master                     *               E6A6  sdev_sig  equ    *  E6A6 C6   07                 ldb    #R_INTRPT we saw it  E6A8 39                      rts                                          *                     * get a new source port                     *  E6A9 FC   0457     sknewp    ldd    wzanyp    else create one  E6AC                         incd  E6AC 104C                    fdb    $104c                               endm  E6AE 1083 FFF0               cmpd   #$FFF0  E6B2 25   03                 blo    03f  E6B4 CC   8000               ldd    #$8000  E6B7 FD   0457     03        std    wzanyp  E6BA 39                      rts                                                               *                     * check if W5500 is activeFIO Simulation Structure             13:34:28  Jun 16, 2024   Page   57wz socket interface routines                                             * wzdevt, device test, return Z if running, NZ if not                     *  E6BB 34   22       wzdevt    pshs   a,y  E6BD 109E 1A                 ldy    fifo_us1  device info  E6C0 A6   A8 12              lda    wzdsta,y  E6C3 81   FF                 cmpa   #$ff      open  E6C5 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info, set E register                     *  E6C7 A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E6C9                         trfr   A,E  E6C9 1F                      fcb    $1f  E6CA 8E                      fcb    A<<4|E                               endm  E6CB 6F   47                 clr    wzerr,u   init result  E6CD 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E6CE 34   06       skctcp    pshs   d  E6D0 EC   C8 26              ldd    wztype,u  SOCK_STREAM  E6D3 C1   01                 cmpb   #SK_STRM  is TCP  E6D5 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E6D7 34   06       skcudp    pshs   d  E6D9 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6DC C1   02                 cmpb   #SK_DGRM  is UDP  E6DE 35   86                 puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E6E0 34   06       skcraw    pshs   d  E6E2 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6E5 C1   03                 cmpb   #SK_MRAW  is RAW socket  E6E7 27   02                 beq    01f  E6E9 C1   04                 cmpb   #SK_IRAW  E6EB 35   86       01        puls   d,pc                                          ****************************************************************FIO Simulation Structure             13:34:28  Jun 16, 2024   Page   58wz socket interface routines                                             *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E6ED  skopen    equ    * >E6ED BD   E6C7               jsr    skfres                     *                     * check if DEVICE is active                     * >E6F0 BD   E6BB               jsr    wzdevt  E6F3 27   06                 beq    11f  E6F5 BD   E7A8               jsr    skclin    NO, close internal and don't start >E6F8 16   0064     04        lbra   skoper1                     *                     * retry, we do all things                     *  E6FB A6   42       11        lda    wzfsta,u  check if allocated by OS  E6FD 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  E6FF 6F   43                 clr    wzflg,u   erase flags  E701 6F   41                 clr    wzdctr,u  init counter  E703 EC   C8 24              ldd    wzfaml,u  E706 C1   02                 cmpb   #AF_INET  E708 26   EE                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E70A EC   C8 26              ldd    wztype,u  E70D C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E70F 27   26                 beq    01f  E711 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E713 27   1E                 beq    21f  E715 C1   03                 cmpb   #SK_MRAW  SOCK_RAW  E717 27   16                 beq    41f  E719 C1   04                 cmpb   #SK_IRAW  IP_RAW  E71B 26   46                 bne    skoper2                     *                     * raw socket, set protocol register first (only socket 0!!)                     * UDP and TCP are handled in a different way                     *  E71D EC   C8 28              ldd    wzprot,u  what is the protocol option?  E720 C1   06                 cmpb   #SP_TCP   not allowed  E722 27   3F                 beq    skoper2  E724 C1   11                 cmpb   #SP_UDP   not allowed  E726 27   3B                 beq    skoper2  E728 BD   F18E               jsr    PSRPROT   set protocol register                     *  E72B C6   03                 ldb    #%00000011 IPRAW  E72D 20   0A                 bra    07f                     * nacraw  E72F C6   04       41        ldb    #%00000100 MACRAWFIO Simulation Structure             13:34:29  Jun 16, 2024   Page   59wz socket interface routines                          E731 20   06                 bra    07f                     * dgram  E733 C6   02       21        ldb    #%00000010 UDP  E735 20   02                 bra    07f                     * TCP socket  E737 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E739 BD   F058     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E73C C6   01                 ldb    #WCOPEN   open the device  E73E E7   44                 stb    wzcmnd,u  copy command  E740 BD   F076               jsr    PSRCR  E743 108E 0000               ldy    #0        nopoll                     *                     * interrupts not expected                     *               E747  skowfo    equ    *  E747 BD   F0AA     21        jsr    GSRSR     get status  E74A E7   45                 stb    wzstat,u  E74C C1   00                 cmpb   #WSCLSD   not closed?  E74E 26   0B                 bne    22f                     *  E750 6A   41                 dec    wzdctr,u  delay counter  E752 27   0F                 beq    skoper2  E754 108E E747               ldy    #skowfo  E758 7E   E847               jmp    polext    switch tasks                     *  E75B 4F            22        clra  E75C C6   01                 ldb    #R_OPEN   response  E75E 39            99        rts                     *  E75F 86   01       skoper1   lda    #1        device not initialized  E761 20   02                 bra    12f  E763 86   02       skoper2   lda    #2        type error  E765 C6   C0       12        ldb    #E_SOCKET  E767 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E769 34   10       num2bt    pshs   x  E76B 8E   E784               ldx    #bittab  E76E 3A                      abx  E76F E6   84                 ldb    0,x  E771 35   90                 puls   x,pc                                          *FIO Simulation Structure             13:34:29  Jun 16, 2024   Page   60wz socket interface routines                                             * bit to nummer, offset byt one, entry should NOT be 0                     *  E773 34   10       bt2num    pshs   x  E775 8E   E784               ldx    #bittab  E778 6F   E2                 clr    0,-s  E77A E1   80       02        cmpb   0,x+  E77C 27   04                 beq    01f  E77E 6C   E4                 inc    0,s  E780 20   F8                 bra    02b  E782 35   94       01        puls   b,x,pc                                          * table  E784 00            bittab    fcb    0  E785 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E789 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                                               ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E78D  skclos    equ    *               E78D  skintrp   equ    *         interrupt!  E78D BD   E6C7               jsr    skfres  E790 C6   08                 ldb    #WCDISC  E792 E7   44                 stb    wzcmnd,u  E794 BD   F076               jsr    PSRCR     send disconnect                     *  E797 8D   0F                 bsr    skclin  E799                         clrd  E799 104F                    fdb    $104f                               endm  E79B ED   C8 24              std    wzfaml,u  E79E ED   C8 26              std    wztype,u  E7A1 ED   C8 28              std    wzprot,u                     *  E7A4 4F                      clra  E7A5 C6   02                 ldb    #R_CLOSE  response  E7A7 39                      rts                                          *                     * wzclin, close interal                     *  E7A8 34   06       skclin    pshs   d  E7AA C6   10                 ldb    #WCCLOS   do close  E7AC E7   44                 stb    wzcmnd,u  E7AE BD   F076               jsr    PSRCR                     *                     * erase registers in device                     *FIO Simulation Structure             13:34:29  Jun 16, 2024   Page   61wz socket interface routines                          E7B1 CC   0000               ldd    #0  E7B4 BD   F0C8               jsr    PSRPORT   source port                     *  E7B7 A6   42                 lda    wzfsta,u  E7B9 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E7BB A7   42                 sta    wzfsta,u  E7BD CC   0000               ldd    #0  E7C0 ED   48                 std    wzxfer,u  clear remaining size                     *  E7C2 BD   F0AA     91        jsr    GSRSR  E7C5 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E7C7 CC   0000               ldd    #0  E7CA ED   C8 10              std    wzsprt,u  erase old info  E7CD ED   C8 14              std    wzipad,u  E7D0 ED   C8 16              std    wzipad+2,u  E7D3 ED   C8 12              std    wzdprt,u  E7D6 E7   43                 stb    wzflg,u   clear flags                     *  E7D8 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E7DA  skconn    equ    *  E7DA BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E7DD BD   E6BB               jsr    wzdevt  E7E0 27   06                 beq    01f >E7E2 BD   E78D               jsr    skclos    NO, don't start >E7E5 16   007A     02        lbra   skcner4  E7E8 BD   E6CE     01        jsr    skctcp    not in tcp, illegal  E7EB 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E7ED BD   F0AA     11        jsr    GSRSR     status  E7F0 E7   45                 stb    wzstat,u  check if properly setup  E7F2 C1   13                 cmpb   #WSINIT   SHOULD BE >E7F4 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E7F8 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E7FB                         ordx   wzipad+2,IU  E7FB 10AA                    fdb    $10aaFIO Simulation Structure             13:34:30  Jun 16, 2024   Page   62wz socket interface routines                          E7FD                         doindx wzipad+2,IU  E7FD C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E7FF 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E801 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E804                         incd  E804 104C                    fdb    $104c                               endm  E806 26   07                 bne    01f  E808 EC   C8 16              ldd    wzipad+2,u  E80B                         incd  E80B 104C                    fdb    $104c                               endm  E80D 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E80F EC   C8 12    01        ldd    wzdprt,u  check destination port  E812 27   4A                 beq    skcner5   is not set, error                     *  E814 BD   F152               jsr    PSRDPOR   set destination port  E817 31   C8 14              leay   wzipad,u  load socket  E81A BD   F12C               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E81D BD   E6A9               jsr    sknewp    get new  E820 ED   C8 10              std    wzsprt,u  tell us what you took  E823 BD   F0C8               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E826 C6   04                 ldb    #WCCONN  E828 E7   44                 stb    wzcmnd,u  E82A BD   F076               jsr    PSRCR     do connect                     *                     *                     *  E82D BD   E6C7     conlb1    jsr    skfres  E830 BD   F0AA               jsr    GSRSR     update status  E833 E7   45                 stb    wzstat,u  E835 C1   17                 cmpb   #WSESTB  E837 27   0A                 beq    90f  E839 C1   00                 cmpb   #WSCLSD  E83B 27   16                 beq    skcner2  E83D 108E E82D               ldy    #conlb1  E841 20   04                 bra    polext                     *  E843 4F            90        clra  E844 C6   08                 ldb    #R_CONNECTFIO Simulation Structure             13:34:30  Jun 16, 2024   Page   63wz socket interface routines                          E846 39            99        rts                                          *                     * polexit, Y=where to return                     *  E847 10AF 0F       polext    sty    tsagin,x  here to restart  E84A C6   BA                 ldb    #POLPRI  E84C E7   05                 stb    tsprir,x  E84E 108E FFFF               ldy    #$ffFF  E852 39                      rts                       E853 C6   0C       skcner2   ldb    #R_DISCON  E855 20   EF                 bra    99b                       E857 BD   E7A8     skcner6   jsr    skclin    reset open  E85A 86   0F                 lda    #15       not properly setup  E85C 20   0E                 bra    09f  E85E 86   0E       skcner5   lda    #14       destination port not set  E860 20   0A                 bra    09f  E862 86   0A       skcner4   lda    #10       device not initialized  E864 20   06                 bra    09f  E866 86   0B       skcner1   lda    #11       IP address invalid  E868 20   02                 bra    09f  E86A 86   0D       skcner3   lda    #13  E86C C6   C0       09        ldb    #E_SOCKET  E86E 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E870  skbind    equ    *  E870 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E873 BD   E6BB               jsr    wzdevt  E876 1026 00EC               lbne   rdrqer1  E87A BD   E6CE               jsr    skctcp    check TCP  E87D 27   12                 beq    01f  E87F BD   E6D7               jsr    skcudp    check UDP >E882 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E886 BD   F0AA               jsr    GSRSR     statusFIO Simulation Structure             13:34:30  Jun 16, 2024   Page   64wz socket interface routines                          E889 E7   45                 stb    wzstat,u  E88B C1   22                 cmpb   #WSUDP    check  E88D 27   0D                 beq    03f  E88F 20   07                 bra    04f                       E891 BD   F0AA     01        jsr    GSRSR     status  E894 E7   45                 stb    wzstat,u  E896 C1   13                 cmpb   #WSINIT   should be >E898 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E89C BD   E6A9     03        jsr    sknewp  E89F ED   C8 12              std    wzdprt,u  E8A2 BD   F152               jsr    PSRDPOR   destination port  E8A5 EC   C8 10              ldd    wzsprt,u  E8A8 BD   F0C8               jsr    PSRPORT   source port                     *  E8AB 31   C8 14              leay   wzipad,u  E8AE BD   F12C               jsr    PSRDIP    source IP                     *  E8B1 4F                      clra  E8B2 C6   09                 ldb    #R_BIND  E8B4 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8B5  sklist    equ    *  E8B5 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8B8 BD   E6BB               jsr    wzdevt  E8BB 1026 00A7     02        lbne   rdrqer1  E8BF BD   E6CE               jsr    skctcp  E8C2 26   F7                 bne    02b                     *                     * go on                     *                     *  E8C4 BD   F0AA               jsr    GSRSR     status  E8C7 E7   45                 stb    wzstat,u                     *  E8C9 C1   00                 cmpb   #WSCLSD   closed?  E8CB 27   0F                 beq    80f  E8CD C1   13                 cmpb   #WSINIT   openedFIO Simulation Structure             13:34:31  Jun 16, 2024   Page   65wz socket interface routines                          E8CF 26   0F                 bne    90f                     *  E8D1 C6   02                 ldb    #WCLIST  E8D3 E7   44                 stb    wzcmnd,u  E8D5 BD   F076               jsr    PSRCR                     *  E8D8 4F                      clra  E8D9 C6   0A                 ldb    #R_LISTEN  E8DB 39                      rts                                          *  E8DC 4F            80        clra  E8DD C6   02                 ldb    #R_CLOSE  E8DF 39                      rts                     *  E8E0 108E E8B5     90        ldy    #sklist  E8E4 7E   E847               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8E7  skacpt    equ    *  E8E7 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8EA BD   E6BB               jsr    wzdevt >E8ED 1026 0075     02        lbne   rdrqer1  E8F1 BD   E6CE               jsr    skctcp  E8F4 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E8F6 BD   F0AA               jsr    GSRSR     status  E8F9 E7   45                 stb    wzstat,u  E8FB C1   17                 cmpb   #WSESTB   connected  E8FD 26   10                 bne    01f  E8FF BD   F143               jsr    GSRDPOR   fill in peer port  E902 ED   C8 12              std    wzdprt,u  E905 31   C8 14              leay   wzipad,u  E908 BD   F115               jsr    GSRDIP                     *  E90B 4F                      clra  E90C C6   0B                 ldb    #R_ACCEPT  E90E 39                      rts                     *  E90F C1   00       01        cmpb   #WSCLSD  E911 26   04                 bne    02fFIO Simulation Structure             13:34:31  Jun 16, 2024   Page   66wz socket interface routines                          E913 4F                      clra  E914 C6   02                 ldb    #R_CLOSE  E916 39                      rts                     *  E917 108E E8E7     02        ldy    #skacpt  E91B 7E   E847               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E91E  skreqrd   equ    *  E91E BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E921 BD   E6BB               jsr    wzdevt >E924 1026 003E     02        lbne   rdrqer1  E928 BD   E6CE               jsr    skctcp    check TCP  E92B 26   F7                 bne    02b                     *                     * go on                     *                     *  E92D BD   F0AA               jsr    GSRSR  E930 E7   45                 stb    wzstat,u  update status  E932 C1   00                 cmpb   #WSCLSD  E934 27   27                 beq    60f  E936 BD   F261               jsr    GSRRXRS   data available?  E939 ED   48                 std    wzxfer,u  E93B 26   1C                 bne    70f                     *  E93D A6   C8 26              lda    wztype,u  check flags  E940 85   01                 bita   #WFNBLK   non block  E942 26   11                 bne    75f                     *  E944 E6   45                 ldb    wzstat,u  E946 C1   1C                 cmpb   #WSCLWT  E948 27   13                 beq    60f  E94A C1   17       17        cmpb   #WSESTB   still active  E94C 27   00                 beq    20f                                          *  E94E 108E E91E     20        ldy    #skreqrd  E952 7E   E847               jmp    polext                                          *************************  E955 4F            75        clraFIO Simulation Structure             13:34:31  Jun 16, 2024   Page   67wz socket interface routines                          E956 C6   15                 ldb    #R_RQRDNB tell no data  E958 39                      rts                                          * data present  E959 4F            70        clra  E95A C6   05                 ldb    #R_RQRD  E95C 39                      rts                                          * close socket and return  E95D C6   06       60        ldb    #PIPES  E95F BD   E448               jsr    send_SI   send to main CPU  E962 4F                      clra  E963 C6   02                 ldb    #R_CLOSE  E965 39                      rts                                            E966 86   82       rdrqer1   lda    #130  E968 C6   C0                 ldb    #E_SOCKET  E96A 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock, X=task struct                     *               E96B  skrecv    equ    *  E96B BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E96E BD   E6BB               jsr    wzdevt >E971 1026 FFF1               lbne   rdrqer1  E975 BD   E6CE     02        jsr    skctcp  E978 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E97A BD   F261               jsr    GSRRXRS   received size                     * D total aviable data  E97D 108E 0020               ldy    #fifo     target  E981 BD   F331               jsr    RDSK2FB   transfer datat to fifo  E984 ED   48                 std    wzxfer,u  save it                     *                     * here check if PROT_XLTEOF is set                     *  E986 6D   C8 28              tst    wzprot,u  PROT_XLTEOL is $8000  E989 2A   18                 bpl    01f                     * do EOL conversion in fifo buffer  E98B 34   36                 pshs   d,x,y  E98D 1F   01                 tfr    d,x       count  E98F 108E 0020               ldy    #fifoFIO Simulation Structure             13:34:31  Jun 16, 2024   Page   68wz socket interface routines                          E993 A6   A4       03        lda    0,y  E995 81   0A                 cmpa   #LF       is line feed  E997 26   02                 bne    02f  E999 86   0D                 lda    #CR       make it Return  E99B A7   A0       02        sta    0,y+  E99D 30   1F                 leax   -1,x      count  E99F 26   F2                 bne    03b  E9A1 35   36                 puls   d,x,y                     *  E9A3 C6   40       01        ldb    #WCRECV  E9A5 E7   44                 stb    wzcmnd,u  E9A7 BD   F076               jsr    PSRCR     tell sender we took it                       E9AA C6   06                 ldb    #R_READ   tell data in fifo  E9AC 4F                      clra  E9AD 39                      rts                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9AE  skreqwr   equ    *  E9AE BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9B1 BD   E6BB               jsr    wzdevt >E9B4 1026 FFAE     02        lbne   rdrqer1  E9B8 BD   E6CE               jsr    skctcp  E9BB 26   F7                 bne    02b                     *                     * go on                     *                     *  E9BD BD   F0AA               jsr    GSRSR  E9C0 E7   45                 stb    wzstat,u  update status  E9C2 C1   00                 cmpb   #WSCLSD  E9C4 27   12                 beq    30f  E9C6 BD   F215               jsr    GSRTXFR   free size (remaining)  E9C9 10A3 4A                 cmpd   wzrqln,u  would it fit  E9CC 24   11                 bhs    70f                     *  E9CE E6   45       10        ldb    wzstat,u  E9D0 C1   1C                 cmpb   #WSCLWT  E9D2 27   04                 beq    30f  E9D4 C1   17                 cmpb   #WSESTB  E9D6 27   16                 beq    20f                     * connection broken?  E9D8 CC   0000     30        ldd    #0FIO Simulation Structure             13:34:32  Jun 16, 2024   Page   69wz socket interface routines                          E9DB ED   48                 std    wzxfer,u  E9DD 20   06                 bra    60f                     * data space is enough  E9DF 4F            70        clra  E9E0 C6   03                 ldb    #R_RQWR  E9E2 39                      rts                                          * data space exhausted, would block  E9E3 4F            72        clra                     **        ldb     #R_RQWRWB  E9E4 39                      rts                                          * close socket and return  E9E5 C6   06       60        ldb    #PIPES  E9E7 BD   E448               jsr    send_SI   send to main CPU  E9EA 4F                      clra  E9EB C6   02                 ldb    #R_CLOSE  E9ED 39                      rts                                          *  E9EE 108E E9AE     20        ldy    #skreqwr  E9F2 7E   E847               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9F5  sksend    equ    *  E9F5 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9F8 BD   E6BB               jsr    wzdevt  E9FB 1026 FF67     02        lbne   rdrqer1  E9FF BD   E6CE               jsr    skctcp  EA02 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *                     *        jsr     GSRTXFR         free size (remaining)  EA04 EC   4A                 ldd    wzrqln,u  data to xfer                     * D = total available space  EA06 6D   C8 28              tst    wzprot,u  check if PROT_XLTEOL is set  EA09 2A   18                 bpl    01f                     *  do EOL conversion in fifo buffer  EA0B 34   36                 pshs   d,x,y  EA0D 1F   01                 tfr    d,x       countFIO Simulation Structure             13:34:32  Jun 16, 2024   Page   70wz socket interface routines                          EA0F 108E 0020               ldy    #fifo  EA13 A6   A4       03        lda    0,y  EA15 81   0D                 cmpa   #CR       Return?  EA17 26   02                 bne    02f  EA19 86   0A                 lda    #LF       make it Line feed  EA1B A7   A0       02        sta    0,y+  EA1D 30   1F                 leax   -1,x      count  EA1F 26   F2                 bne    03b  EA21 35   36                 puls   d,x,y                     *  EA23 108E 0020     01        ldy    #fifo     target  EA27 BD   F37F               jsr    WRFB2SK   transfer from fifo to socket  EA2A ED   48                 std    wzxfer,u  save it  EA2C C6   20                 ldb    #WCSEND  EA2E E7   44                 stb    wzcmnd,u  EA30 BD   F076               jsr    PSRCR     tell sender it is coming                       EA33 C6   04                 ldb    #R_WRITE  tell data in fifo  EA35 4F                      clra  EA36 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA37  skurrdf   equ    *  EA37 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA3A BD   E6BB               jsr    wzdevt  EA3D 1026 FF25     02        lbne   rdrqer1  EA41 BD   E6D7               jsr    skcudp  EA44 27   05                 beq    03f  EA46 BD   E6E0               jsr    skcraw  EA49 26   F2                 bne    02b  EA4B               03                     *                     * go on                     *                     *  EA4B EC   C8 20              ldd    wzurms,u  check remaining size  EA4E 26   4B                 bne    84f                     *                     * no  packet data present, wait for it                     *  EA50 BD   F0AA               jsr    GSRSR  EA53 E7   45                 stb    wzstat,u  update status  EA55 C1   00                 cmpb   #WSCLSDFIO Simulation Structure             13:34:32  Jun 16, 2024   Page   71wz socket interface routines                          EA57 27   46                 beq    60f  EA59 BD   F261               jsr    GSRRXRS   data available?  EA5C ED   7E                 std    -2,s      test D  EA5E 26   19                 bne    22f       keep waiting                     * no data yet, check socket state  EA60 E6   45                 ldb    wzstat,u  EA62 C1   1C                 cmpb   #WSCLWT  EA64 27   39                 beq    60f  EA66 C1   22                 cmpb   #WSUDP    still active  EA68 27   08                 beq    20f  EA6A C1   32                 cmpb   #WSIRAW  EA6C 27   04                 beq    20f  EA6E C1   42                 cmpb   #WSMRAW  EA70 27   00                 beq    20f                     *  EA72 108E EA37     20        ldy    #skurrdf  EA76 7E   E847               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurms                     *  EA79 31   C8 1A    22        leay   wzuipa,u  EA7C CC   0008               ldd    #8        size of header  EA7F BD   EDD5               jsr    bmread    copy data                     *                     * move pointer                     *  EA82 BD   F278               jsr    GSRRXRP  EA85 C3   0008               addd   #8  EA88 BD   F287               jsr    PSRRXRP   update pointer  EA8B C6   40                 ldb    #WCRECV  EA8D E7   44                 stb    wzcmnd,u  process move  EA8F BD   F076               jsr    PSRCR                     *  EA92 EC   C8 20              ldd    wzurms,u  EA95 1083 05C0               cmpd   #MAX_UDP  max size  EA99 22   0D                 bhi    78f                     *  EA9B 4F            84        clra  EA9C C6   21                 ldb    #R_RDFRM  EA9E 39                      rts                                          * close socket and return  EA9F C6   06       60        ldb    #PIPES  EAA1 BD   E448               jsr    send_SI   send to main CPU  EAA4 4F                      clra  EAA5 C6   02                 ldb    #R_CLOSE  EAA7 39                      rts                                          *  EAA8 BD   E7A8     78        jsr    skclin    close  EAAB C6   C0                 ldb    #E_SOCKET  EAAD 39                      rtsFIO Simulation Structure             13:34:33  Jun 16, 2024   Page   72wz socket interface routines                                                                  ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EAAE  skurrd    equ    *  EAAE BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAB1 BD   E6BB               jsr    wzdevt  EAB4 1026 FEAE     02        lbne   rdrqer1  EAB8 BD   E6D7               jsr    skcudp  EABB 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  EABD EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  EAC0 108E 0020               ldy    #fifo     target  EAC4 BD   F331               jsr    RDSK2FB   transfer data  EAC7 34   06                 pshs   d         xferred count  EAC9 EC   C8 20              ldd    wzurms,u  update  EACC A3   E1                 subd   0,s++  EACE ED   C8 20              std    wzurms,u  new remaining                     *  EAD1 C6   40       01        ldb    #WCRECV  EAD3 E7   44                 stb    wzcmnd,u  set processed  EAD5 BD   F076               jsr    PSRCR                     *  EAD8 4F                      clra  EAD9 C6   22                 ldb    #R_RRDFD  EADB 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EADC  skurwt    equ    *  EADC BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EADF BD   E6BB               jsr    wzdevtFIO Simulation Structure             13:34:33  Jun 16, 2024   Page   73wz socket interface routines                          EAE2 1026 FE80     02        lbne   rdrqer1  EAE6 BD   E6D7               jsr    skcudp  EAE9 27   05                 beq    03f  EAEB BD   E6E0               jsr    skcraw  EAEE 26   F2                 bne    02b  EAF0               03                     *                     * go on                     *                     *  EAF0 EC   C8 12              ldd    wzdprt,u  check illegal port  EAF3 1027 0084               lbeq   78f                     *  EAF7 EC   C8 14              ldd    wzipad,u  EAFA                         ordx   wzipad+2,IU  EAFA 10AA                    fdb    $10aa  EAFC                         doindx wzipad+2,IU  EAFC C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >EAFE 1027 0079               lbeq   78f                     * set network registers  EB02 EC   C8 12              ldd    wzdprt,u  EB05 BD   F152               jsr    PSRDPOR                       EB08 31   C8 14              leay   wzipad,u  EB0B BD   F12C               jsr    PSRDIP  EB0E EC   C8 10              ldd    wzsprt,u  EB11 26   11                 bne    04f                     *  EB13 EC   C8 10              ldd    wzsprt,u  already set?  EB16 26   09                 bne    16f  EB18 BD   E6A9               jsr    sknewp    get new source port  EB1B ED   C8 10              std    wzsprt,u  EB1E ED   C8 1E              std    wzuprt,u  set also return port  EB21 BD   F0C8     16        jsr    PSRPORT                     *  EB24 108E EB2B     04        ldy    #skuwr2   do remainder  EB28 7E   E847               jmp    polext                                          *                     * after intial setup. loop here                     *               EB2B  skusnm    equ    *  EB2B BD   E6C7     skuwr2    jsr    skfres    set socket base  EB2E BD   E6BB               jsr    wzdevt    devie active >EB31 1026 FFAD               lbne   02b       no  EB35 BD   E6D7               jsr    skcudp    check open method  EB38 26   A8                 bne    02b                     *  EB3A BD   F0AA               jsr    GSRSR  EB3D E7   45                 stb    wzstat,u  update statusFIO Simulation Structure             13:34:33  Jun 16, 2024   Page   74wz socket interface routines                          EB3F C1   00                 cmpb   #WSCLSD   closed  EB41 27   2F                 beq    60f  EB43 BD   F215               jsr    GSRTXFR   free size  EB46 10A3 C8 20              cmpd   wzurms,u  EB4A 24   19                 bhs    10f                     * no space yet  EB4C E6   45                 ldb    wzstat,u  EB4E C1   1C                 cmpb   #WSCLWT   is closing  EB50 27   20                 beq    60f  EB52 C1   22                 cmpb   #WSUDP  EB54 27   08                 beq    20f  EB56 C1   32                 cmpb   #WSIRAW   IPRAW  EB58 27   04                 beq    20f  EB5A C1   42                 cmpb   #WSMRAW   MACRAW  EB5C 27   00                 beq    20f                     *  EB5E 108E EADC     20        ldy    #skurwt  EB62 7E   E847               jmp    polext    keep polling                     *  EB65 EC   C8 20    10        ldd    wzurms,u  EB68 1083 05C0               cmpd   #MAX_UDP  too big  EB6C 22   0D                 bhi    78f                     *  EB6E 4F                      clra  EB6F C6   23                 ldb    #R_RSNDTO  EB71 39                      rts                       EB72 C6   06       60        ldb    #PIPES  EB74 BD   E448               jsr    send_SI   send to main CPU  EB77 4F                      clra  EB78 C6   02                 ldb    #R_CLOSE  EB7A 39                      rts                       EB7B BD   E7A8     78        jsr    skclin    close  EB7E C6   C0                 ldb    #E_SOCKET  EB80 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EB81  skusnt    equ    *  EB81 BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EB84 BD   E6BB               jsr    wzdevt  EB87 1026 FDDB     02        lbne   rdrqer1FIO Simulation Structure             13:34:34  Jun 16, 2024   Page   75wz socket interface routines                          EB8B BD   E6D7               jsr    skcudp  EB8E 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EB90 EC   C8 20              ldd    wzurms,u  total data                     *  EB93 108E 0020               ldy    #fifo     target  EB97 BD   F37F               jsr    WRFB2SK   fifo to socket  EB9A 34   06                 pshs   d  EB9C EC   C8 20              ldd    wzurms,u  all loaded  EB9F A3   E1                 subd   0,s++  EBA1 ED   C8 20              std    wzurms,u  EBA4 26   11                 bne    01f                       EBA6 EC   C8 22              ldd    wzuwrp,u  is it used  EBA9 BD   F252               jsr    PSRTXWP   set write pointer                       EBAC C6   20                 ldb    #WCSEND  EBAE E7   44                 stb    wzcmnd,u  EBB0 BD   F076               jsr    PSRCR  EBB3 4F                      clra  EBB4 C6   24                 ldb    #R_WSNDTO data taken  EBB6 39                      rts                       EBB7 4F            01        clra  EBB8 C6   25                 ldb    #R_SNDTOM ask for more  EBBA 39                      rts                                          ***************************************************************                     *                     * netblock, read block                     * the method is special, we need to send a request                     * over the net first (send) before new data can be returned                     * request sits at fido_us2/fifo_us3                     * X=task struct, U=wzsock                     *                     * requires exclusive and permanent access to fifo and                     * therefore a CPU09GPP/09NET combo where for this device                     * the socket drivers are not active                     *                     ***************************************************************                                    EBBB  sknbrr    equ    *  EBBB BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EBBE BD   E6BB               jsr    wzdevt  EBC1 1026 FDA1     02        lbne   rdrqer1  EBC5 BD   E6CE               jsr    skctcpFIO Simulation Structure             13:34:34  Jun 16, 2024   Page   76wz socket interface routines                          EBC8 26   F7                 bne    02b                     *                     *                     *  EBCA BD   F0AA               jsr    GSRSR     get status  EBCD E7   45                 stb    wzstat,u  update sock  EBCF C1   17                 cmpb   #WSESTB   established  EBD1 26   45                 bne    sknbe1    error                     *  EBD3 BD   F215               jsr    GSRTXFR   get free space  EBD6 1083 0004               cmpd   #NBRQLN  EBDA 25   36                 blo    sknbrp1   go poll                     *                     * read, send command info to server                     *  EBDC CC   0004               ldd    #NBRQLN   actual size of request  EBDF 108E 001C               ldy    #fifo_us2 where request is present  EBE3 BD   F37F               jsr    WRFB2SK  EBE6 C6   20                 ldb    #WCSEND   tell socket we put it  EBE8 E7   44                 stb    wzcmnd,u  EBEA BD   F076               jsr    PSRCR                     *                     * read is 2 phase, receive response from server                     *  EBED BD   F0AA     sknbrp2   jsr    GSRSR  EBF0 E7   45                 stb    wzstat,u  EBF2 C1   17                 cmpb   #WSESTB   check socket state  EBF4 26   22                 bne    sknbe1  EBF6 BD   F261               jsr    GSRRXRS   check response  EBF9 34   06                 pshs   d  EBFB EC   4A                 ldd    wzrqln,u  requested data  EBFD C3   0004               addd   #NBRQLN  EC00 10A3 E1                 cmpd   0,s++     allows for other data packet sizes  EC03 23   16                 bls    01f  EC05 E6   45                 ldb    wzstat,u  still active  EC07 C1   1C                 cmpb   #WSCLWT  EC09 27   0D                 beq    sknbe1    bail out  EC0B 108E EBED               ldy    #sknbrp2  wait until                     *                     * poll loop                     *  EC0F 7E   E847     02        jmp    polext                     *  EC12 108E EBBB     sknbrp1   ldy    #sknbrr  EC16 20   F7                 bra    02b                     *  EC18 C6   C0       sknbe1    ldb    #E_SOCKET  EC1A 39                      rts                     * we have data in socket  EC1B C6   82       01        ldb    #R_RQRBLK  EC1D 4F                      clra  EC1E 39                      rtsFIO Simulation Structure             13:34:35  Jun 16, 2024   Page   77wz socket interface routines                                                                  ***************************************************************                     * here data is moved from the socket to the fifo                     * write 4 bytes back to fifo_us2/fifo_us3                     ***************************************************************               EC1F  sknbrd    equ    *  EC1F BD   E6C7               jsr    skfres  EC22 BD   E6BB               jsr    wzdevt  EC25 1026 FD3D     02        lbne   rdrqer1  EC29 BD   E6CE               jsr    skctcp  EC2C 26   F7                 bne    02b                     *                     * when we arrive here, the data has arrived                     *  EC2E CC   0204     01        ldd    #NBSIZE   512+4  EC31 ED   4A                 std    wzrqln,u  fool RDSK2FB  EC33 108E 001C               ldy    #fifo_us2 data contains cmd info  EC37 BD   F331               jsr    RDSK2FB  EC3A C6   40                 ldb    #WCRECV   tell socket we took it  EC3C E7   44                 stb    wzcmnd,u  EC3E BD   F076               jsr    PSRCR                     * transfer only data part  EC41 CC   0200               ldd    #BUFSIZ   set data size  EC44 ED   48                 std    wzxfer,u  EC46 ED   4A                 std    wzrqln,u                     *  EC48 C6   83                 ldb    #R_RDRBLK tell caller, data in fifo_us2 and fifo  EC4A 39                      rts                                          ***************************************************************                     *                     * netblock, write block                     *                     ***************************************************************               EC4B  sknbsr    equ    *  EC4B BD   E6C7               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC4E BD   E6BB               jsr    wzdevt  EC51 1026 FD11     02        lbne   rdrqer1  EC55 BD   E6CE               jsr    skctcp  EC58 26   F7                 bne    02b                     *  EC5A BD   F0AA               jsr    GSRSR     status  EC5D E7   45                 stb    wzstat,u  EC5F C1   17                 cmpb   #WSESTB   still there?  EC61 26   16                 bne    sknbe10                     *  EC63 BD   F215               jsr    GSRTXFR   get free space  EC66 34   06                 pshs   d  EC68 CC   0004               ldd    #NBRQLNFIO Simulation Structure             13:34:35  Jun 16, 2024   Page   78wz socket interface routines                          EC6B E3   4A                 addd   wzrqln,u  EC6D 10A3 E1                 cmpd   0,s++  EC70 23   0F                 bls    70f                     *  EC72 108E EC4B               ldy    #sknbsr  EC76 7E   E847               jmp    polext                     *  EC79 CC   0000     sknbe10   ldd    #0  EC7C ED   48                 std    wzxfer,u  EC7E C6   C0                 ldb    #E_SOCKET  EC80 39                      rts                       EC81 4F            70        clra  EC82 C6   80                 ldb    #R_RQSBLK  EC84 39                      rts                                          ***************************************************************                     *                     *                     ***************************************************************               EC85  sknbsd    equ    *  EC85 BD   E6C7               jsr    skfres  EC88 BD   E6BB               jsr    wzdevt  EC8B 1026 FCD7     02        lbne   rdrqer1  EC8F BD   E6CE               jsr    skctcp  EC92 26   F7                 bne    02b                                          *                     * data to write, cnd +data                     *  EC94 CC   0204     70        ldd    #NBSIZE   save original  EC97 ED   4A                 std    wzrqln,u  fool WFB2SK  EC99 108E 001C               ldy    #fifo_us2 where cmd sits  EC9D BD   F37F               jsr    WRFB2SK  ECA0 C6   20                 ldb    #WCSEND   send it now  ECA2 E7   44                 stb    wzcmnd,u  ECA4 BD   F076               jsr    PSRCR  ECA7 CC   0200               ldd    #BUFSIZ  ECAA ED   48                 std    wzxfer,u  make it correct  ECAC ED   4A                 std    wzrqln,u  ECAE 4F                      clra  ECAF C6   81                 ldb    #R_SNDBLK tell host we did  ECB1 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               ECB2  skspcl    equ    *                     *FIO Simulation Structure             13:34:35  Jun 16, 2024   Page   79wz socket interface routines                          ECB2 34   10                 pshs   x  ECB4 E6   0C                 ldb    tstval,x  get index  ECB6 C1   03                 cmpb   #MAXTBL  ECB8 22   18                 bhi    01f       illegal  ECBA 58                      aslb  ECBB 8E   ECD9               ldx    #functb  ECBE 10AE 85                 ldy    b,x       get special function  ECC1 27   0F                 beq    01f       not valid  ECC3 35   10                 puls   x                     *  ECC5 AD   A4                 jsr    0,y       do function  ECC7 26   05                 bne    90f                     *  ECC9 4F                      clra  ECCA C6   0F                 ldb    #R_SPCL  ECCC 20   0A                 bra    99f                     *  ECCE 86   A2       90        lda    #162  ECD0 20   04                 bra    02f                     *  ECD2 35   10       01        puls   x  ECD4 86   A1                 lda    #161  ECD6               02  ECD6 C6   C0                 ldb    #E_SOCKET                     *  ECD8 39            99        rts                       ECD9 ECE1          functb    fdb    wzwdev    write device settings  ECDB ECE1                    fdb    wzwdev  ECDD ED0B                    fdb    wzrdev    read device settings  ECDF ED27                    fdb    showrg               0003  MAXTBL    equ    ((*-functb)/2)-1                                          *                     * write W5500 basic device settings                     *                     * X hold the task table                     * U holds the special sock address                     *  ECE1               wzwdev  ECE1 C6   08                 ldb    #8  ECE3                         trfr   B,E  ECE3 1F                      fcb    $1f  ECE4 9E                      fcb    B<<4|E                               endm  ECE5 DE   1A                 ldu    fifo_us1  device info area  ECE7 31   C4                 leay   0,u       myip  ECE9 BD   EF0D               jsr    PCRSIP    source IP  ECEC 31   44                 leay   4,u  ECEE BD   EEA1               jsr    PCRSNM    subnet mask  ECF1 31   48                 leay   8,u  ECF3 BD   EE73               jsr    PCRGA     gateway IPFIO Simulation Structure             13:34:36  Jun 16, 2024   Page   80wz socket interface routines                          ECF6 31   4C                 leay   12,u  ECF8 BD   EED7               jsr    PCRSHA    hardware address                     *  ECFB A6   C8 12              lda    18,u      ON/OFF  ECFE 27   04                 beq    01f  ED00 C6   F8                 ldb    #%11111000 all on  ED02 20   02                 bra    02f  ED04 C6   78       01        ldb    #%01111000 all off  ED06 BD   F02B     02        jsr    PCRPHY  ED09 4F                      clra             no error return status  ED0A 39                      rts                                          *                     * read W5500 basic device settings                     *  ED0B               wzrdev  ED0B C6   08                 ldb    #8  ED0D                         trfr   B,E       select first socket  ED0D 1F                      fcb    $1f  ED0E 9E                      fcb    B<<4|E                               endm  ED0F DE   1A                 ldu    fifo_us1  ED11 31   C4                 leay   0,u       overwrite what was set  ED13 BD   EEF6               jsr    GCRSIP  ED16 31   44                 leay   4,u  ED18 BD   EE8A               jsr    GCRSNM  ED1B 31   48                 leay   8,u  ED1D BD   EE5C               jsr    GCRGA  ED20 31   4C                 leay   12,u  ED22 BD   EEB8               jsr    GCRSHA  ED25 4F                      clra             no error return status  ED26 39                      rts                                          *                     * debug service, read selected registers                     *  ED27               showrg  ED27 C6   08                 ldb    #8  ED29                         trfr   B,E       select first socket  ED29 1F                      fcb    $1f  ED2A 9E                      fcb    B<<4|E                               endm  ED2B DE   1A                 ldu    fifo_us1  ED2D 33   C8 20              leau   32,u      skip network data area  ED30 BD   F049               jsr    GSRMR  ED33 E7   C0                 stb    0,u+  ED35 BD   F0AA               jsr    GSRSR  ED38 E7   C0                 stb    0,u+  ED3A BD   F1D9               jsr    GSRRBFS  ED3D E7   C0                 stb    0,u+                       ED3F C6   3D                 ldb    #'=FIO Simulation Structure             13:34:36  Jun 16, 2024   Page   81wz socket interface routines                          ED41 E7   C0                 stb    0,u+                       ED43 31   C4                 leay   0,u  ED45 BD   EEF6               jsr    GCRSIP  ED48 33   44                 leau   4,u  ED4A 31   C4                 leay   0,u  ED4C BD   EE5C               jsr    GCRGA  ED4F 33   44                 leau   4,u                       ED51 C6   23                 ldb    #'#  ED53 E7   C0                 stb    0,u+                       ED55 31   C4                 leay   0,u  ED57 BD   EEB8               jsr    GCRSHA  ED5A 33   46                 leau   6,u                       ED5C C6   23                 ldb    #'#  ED5E E7   C0                 stb    0,u+                       ED60 31   C4                 leay   0,u  ED62 BD   EE8A               jsr    GCRSNM  ED65 33   44                 leau   4,u                       ED67 C6   3D                 ldb    #'=  ED69 E7   C0                 stb    0,u+                       ED6B BD   F03A               jsr    GCRVERS  ED6E ED   C1                 std    0,u++                       ED70 C6   23                 ldb    #'#  ED72 E7   C4                 stb    0,u  ED74 4F                      clra                       ED75 39                      rts                                                               * X hold the task table                     * U holds the sock address                     *   skintrp  ED76               skdisc  ED76               sksmac  ED76               skskep  ED76 86   FF                 lda    #255  ED78 A7   47                 sta    wzerr,u  ED7A C6   C0                 ldb    #E_SOCKET                                            ED7C 39                      rts                                    ED7D  oldorg    set    *                     *                     * hardware register orgaizationFIO Simulation Structure             13:34:36  Jun 16, 2024   Page   82wzspi, basic spi routines                                                *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       ED7D                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               ED7D  spinit    equ    *  ED7D 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  ED7F B7   8080               sta    SPIBASE+spicmd  ED82 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               ED83  spistr2   equ    *  ED83 CE   8080               ldu    #SPIBASE  SPI base TODO  ED86                         trfr   F,B  ED86 1F                      fcb    $1f  ED87 F9                      fcb    F<<4|B                               endm  ED88 5D                      tstb             register pointerFIO Simulation Structure             13:34:37  Jun 16, 2024   Page   83wzspi, basic spi routines                             ED89 27   09                 beq    01f       OK, valid  ED8B 34   04                 pshs   b  ED8D C4   03                 andb   #RSVREG   reserved loctation  ED8F 5D                      tstb             xxx10xxx  is invalid!  ED90 35   04                 puls   b  ED92 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  ED94 4D            01        tsta             cmd flag  ED95 27   04                 beq    04f  ED97 1A   01                 sec              write   100  ED99 20   02                 bra    05f  ED9B 1C   FE       04        clc              read    000                     *  ED9D 59            05        rolb             set READ/WRITE bit  [2...0]  ED9E 58                      lslb             set variable length data [00]  ED9F 58                      lslb                     *                     * here the actual SPI action starts                     *  EDA0                         seti   disable   interrupts  EDA0 1A   50                 orcc   #FF|IF                               endm  EDA2 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  EDA3 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  EDA5 A7   C4                 sta    spicmd,u  EDA7 AF   44                 stx    hibyta,u  and shift out  EDA9 E7   44                 stb    hibyta,u  and shift out  EDAB 1A   04                 sez  EDAD 39                      rts  EDAE 1C   FB       09        clz  EDB0 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               EDB1  byterd    equ    *  EDB1 34   47                 pshs   cc,d,u  EDB3 4F                      clra  EDB4 8D   CD                 bsr    spistr2 >EDB6 1026 007E               lbne   09f  EDBA E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EDBC E6   45                 ldb    lobyta,u  read byte  EDBE 4F                      clra  EDBF ED   61                 std    1,s  EDC1 20   69                 bra    sprend                                          *FIO Simulation Structure             13:34:37  Jun 16, 2024   Page   84wzspi, basic spi routines                                                * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               EDC3  wordrd    equ    *  EDC3 34   47                 pshs   cc,d,u  EDC5 4F                      clra >EDC6 BD   ED83               jsr    spistr2  EDC9 26   6D                 bne    09f  EDCB E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EDCD A6   45                 lda    lobyta,u  read byte  EDCF E6   45                 ldb    lobyta,u  read byte  EDD1 ED   61                 std    1,s  EDD3 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               EDD5  bmread    equ    *  EDD5 34   77                 pshs   cc,d,x,y,u  EDD7 4F                      clra  EDD8 BD   F278               jsr    GSRRXRP  EDDB 1F   01                 tfr    d,x  EDDD CE   8080               ldu    #SPIBASE  EDE0 34   40                 pshs   u  EDE2 1A   50                 orcc   #$50  EDE4 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EDE6 A7   C4                 sta    spicmd,u  EDE8 AF   44                 stx    hibyta,u  start address  EDEA BD   F322               jsr    tsk2rx  EDED E7   44                 stb    hibyta,u  EDEF EC   63                 ldd    3,s       old D  EDF1                         trfr   D,W       count  EDF1 1F                      fcb    $1f  EDF2 06                      fcb    D<<4|W                               endm  EDF3 1F   12                 tfr    x,y       mem pointer  EDF5 10AE 67                 ldy    7,s       old Y  EDF8 E7   44                 stb    hibyta,u  shift out  EDFA 33   45                 leau   lobyta,u  EDFC                         tfm4   U,Y  EDFC 113B                    fdb    $113b  EDFE 32                      fcb    U<<4|Y                               endm  EDFF 35   40                 puls   u         old U  EE01 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  EE03 A7   C4                 sta    spicmd,uFIO Simulation Structure             13:34:37  Jun 16, 2024   Page   85wzspi, basic spi routines                                                * X = old read pointer, 0,s byte wount  EE05 1F   10                 tfr    x,d  EE07 E3   61                 addd   1,s       move pointer  EE09 BD   F287               jsr    PSRRXRP   update pointer  EE0C 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EE0E  bytewr    equ    *  EE0E 34   47                 pshs   cc,d,u  EE10 86   01                 lda    #1  EE12 BD   ED83               jsr    spistr2  EE15 26   21                 bne    09f                     *  EE17 A6   62                 lda    2,s  EE19 A7   44                 sta    hibyta,u  EE1B 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EE1D  wordwr    equ    *  EE1D 34   47                 pshs   cc,d,u  EE1F 86   01                 lda    #1  EE21 BD   ED83               jsr    spistr2  EE24 26   12                 bne    09f                     *  EE26 EC   61                 ldd    1,s  EE28 A7   44                 sta    hibyta,u  EE2A E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EE2C 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EE2E A7   C4                 sta    spicmd,u  EE30 A6   E4                 lda    0,s       sez  EE32 8A   04                 ora    #4  EE34 A7   E4       02        sta    0,s  EE36 35   C7                 puls   cc,d,u,pc                     *  EE38 A6   E4       09        lda    0,s       clz  EE3A 84   FB                 anda   #255-4  EE3C 20   F6                 bra    02b                     FIO Simulation Structure             13:34:38  Jun 16, 2024   Page   86wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EE3E 34   56       GCRMR     pshs   d,x,u  EE40 5F                      clrb  EE41                         trfr   B,F  EE41 1F                      fcb    $1f  EE42 9F                      fcb    B<<4|FFIO Simulation Structure             13:34:38  Jun 16, 2024   Page   87wzspi, basic spi routines                                                          endm  EE43 8E   0000               ldx    #WZMR  EE46 BD   EDB1               jsr    byterd  EE49 ED   E4                 std    0,s  EE4B 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EE4D 34   16       PCRMR     pshs   d,x  EE4F 5F                      clrb  EE50                         trfr   B,F  EE50 1F                      fcb    $1f  EE51 9F                      fcb    B<<4|F                               endm  EE52 8E   0000               ldx    #WZMR  EE55 EC   E4                 ldd    0,s >EE57 BD   EE0E               jsr    bytewr  EE5A 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EE5C 34   16       GCRGA     pshs   d,x  EE5E 5F                      clrb  EE5F                         trfr   B,F  EE5F 1F                      fcb    $1f  EE60 9F                      fcb    B<<4|F                               endm  EE61 8E   0001               ldx    #WZGAR0  EE64 BD   EDC3               jsr    wordrd  EE67 ED   A4                 std    0,y  EE69 8E   0003               ldx    #WZGAR2  EE6C BD   EDC3               jsr    wordrd  EE6F ED   22                 std    2,y  EE71 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EE73 34   16       PCRGA     pshs   d,x  EE75 5F                      clrb  EE76                         trfr   B,F  EE76 1F                      fcb    $1f  EE77 9F                      fcb    B<<4|F                               endm  EE78 8E   0001               ldx    #WZGAR0  EE7B EC   A4                 ldd    0,y >EE7D BD   EE1D               jsr    wordwr  EE80 8E   0003               ldx    #WZGAR2FIO Simulation Structure             13:34:38  Jun 16, 2024   Page   88wzspi, basic spi routines                             EE83 EC   22                 ldd    2,y >EE85 BD   EE1D               jsr    wordwr  EE88 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EE8A 34   16       GCRSNM    pshs   d,x  EE8C 5F                      clrb  EE8D                         trfr   B,F  EE8D 1F                      fcb    $1f  EE8E 9F                      fcb    B<<4|F                               endm  EE8F 8E   0005               ldx    #WZSUBR0  EE92 BD   EDC3               jsr    wordrd  EE95 ED   A4                 std    0,y  EE97 8E   0007               ldx    #WZSUBR2  EE9A BD   EDC3               jsr    wordrd  EE9D ED   22                 std    2,y  EE9F 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EEA1 34   16       PCRSNM    pshs   d,x  EEA3 5F                      clrb  EEA4                         trfr   B,F  EEA4 1F                      fcb    $1f  EEA5 9F                      fcb    B<<4|F                               endm  EEA6 8E   0005               ldx    #WZSUBR0  EEA9 EC   A4                 ldd    0,y  EEAB BD   EE1D               jsr    wordwr  EEAE 8E   0007               ldx    #WZSUBR2  EEB1 EC   22                 ldd    2,y  EEB3 BD   EE1D               jsr    wordwr  EEB6 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EEB8 34   16       GCRSHA    pshs   d,x  EEBA 5F                      clrb  EEBB                         trfr   B,F  EEBB 1F                      fcb    $1f  EEBC 9F                      fcb    B<<4|F                               endm  EEBD 8E   0009               ldx    #WZSHAR0  EEC0 BD   EDC3               jsr    wordrdFIO Simulation Structure             13:34:39  Jun 16, 2024   Page   89wzspi, basic spi routines                             EEC3 ED   A4                 std    0,y  EEC5 8E   000B               ldx    #WZSHAR2  EEC8 BD   EDC3               jsr    wordrd  EECB ED   22                 std    2,y  EECD 8E   000D               ldx    #WZSHAR4  EED0 BD   EDC3               jsr    wordrd  EED3 ED   24                 std    4,y  EED5 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  EED7 34   16       PCRSHA    pshs   d,x  EED9 5F                      clrb  EEDA                         trfr   B,F  EEDA 1F                      fcb    $1f  EEDB 9F                      fcb    B<<4|F                               endm  EEDC 8E   0009               ldx    #WZSHAR0  EEDF EC   A4                 ldd    0,y  EEE1 BD   EE1D               jsr    wordwr  EEE4 8E   000B               ldx    #WZSHAR2  EEE7 EC   22                 ldd    2,y  EEE9 BD   EE1D               jsr    wordwr  EEEC 8E   000D               ldx    #WZSHAR4  EEEF EC   24                 ldd    4,y  EEF1 BD   EE1D               jsr    wordwr  EEF4 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  EEF6 34   16       GCRSIP    pshs   d,x  EEF8 5F                      clrb  EEF9                         trfr   B,F  EEF9 1F                      fcb    $1f  EEFA 9F                      fcb    B<<4|F                               endm  EEFB 8E   000F               ldx    #WZSIPR0  EEFE BD   EDC3               jsr    wordrd  EF01 ED   A4                 std    0,y  EF03 8E   0011               ldx    #WZSIPR2  EF06 BD   EDC3               jsr    wordrd  EF09 ED   22                 std    2,y  EF0B 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             13:34:39  Jun 16, 2024   Page   90wzspi, basic spi routines                             EF0D 34   16       PCRSIP    pshs   d,x  EF0F 5F                      clrb  EF10                         trfr   B,F  EF10 1F                      fcb    $1f  EF11 9F                      fcb    B<<4|F                               endm  EF12 8E   000F               ldx    #WZSIPR0  EF15 EC   A4                 ldd    0,y  EF17 BD   EE1D               jsr    wordwr  EF1A 8E   0011               ldx    #WZSIPR2  EF1D EC   22                 ldd    2,y  EF1F BD   EE1D               jsr    wordwr  EF22 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  EF24 34   16       GCRILLT   pshs   d,x  EF26 5F                      clrb  EF27                         trfr   B,F  EF27 1F                      fcb    $1f  EF28 9F                      fcb    B<<4|F                               endm  EF29 8E   0013               ldx    #WZILLT0  EF2C BD   EDC3               jsr    wordrd  EF2F ED   E4                 std    0,s  EF31 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  EF33 34   16       PCRILLT   pshs   d,x  EF35 5F                      clrb  EF36                         trfr   B,F  EF36 1F                      fcb    $1f  EF37 9F                      fcb    B<<4|F                               endm  EF38 8E   0013               ldx    #WZILLT0  EF3B EC   E4                 ldd    0,s  EF3D BD   EE1D               jsr    wordwr  EF40 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  EF42 34   16       GCRIR     pshs   d,x  EF44 5F                      clrb  EF45                         trfr   B,F  EF45 1F                      fcb    $1f  EF46 9F                      fcb    B<<4|FFIO Simulation Structure             13:34:39  Jun 16, 2024   Page   91wzspi, basic spi routines                                                          endm  EF47 8E   0015               ldx    #WZIR  EF4A BD   EDB1               jsr    byterd  EF4D ED   E4                 std    0,s  EF4F 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  EF51 34   16       PCRIR     pshs   d,x  EF53 5F                      clrb  EF54                         trfr   B,F  EF54 1F                      fcb    $1f  EF55 9F                      fcb    B<<4|F                               endm  EF56 8E   0015               ldx    #WZIR  EF59 EC   E4                 ldd    0,s  EF5B BD   EE0E               jsr    bytewr  EF5E 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  EF60 34   16       GCRIMR    pshs   d,x  EF62 5F                      clrb  EF63                         trfr   B,F  EF63 1F                      fcb    $1f  EF64 9F                      fcb    B<<4|F                               endm  EF65 8E   0016               ldx    #WZIMR  EF68 BD   EDB1               jsr    byterd  EF6B ED   E4                 std    0,s  EF6D 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  EF6F 34   16       PCRIMR    pshs   d,x  EF71 5F                      clrb  EF72                         trfr   B,F  EF72 1F                      fcb    $1f  EF73 9F                      fcb    B<<4|F                               endm  EF74 8E   0016               ldx    #WZIMR  EF77 EC   E4                 ldd    0,s  EF79 BD   EE0E               jsr    bytewr  EF7C 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             13:34:40  Jun 16, 2024   Page   92wzspi, basic spi routines                                                *  EF7E 34   16       GCRSIR    pshs   d,x  EF80 5F                      clrb  EF81                         trfr   B,F  EF81 1F                      fcb    $1f  EF82 9F                      fcb    B<<4|F                               endm  EF83 8E   0017               ldx    #WZSIR  EF86 BD   EDB1               jsr    byterd  EF89 ED   E4                 std    0,s  EF8B 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  EF8D 34   16       PCRSIR    pshs   d,x  EF8F 5F                      clrb  EF90                         trfr   B,F  EF90 1F                      fcb    $1f  EF91 9F                      fcb    B<<4|F                               endm  EF92 8E   0017               ldx    #WZSIR  EF95 EC   E4                 ldd    0,s  EF97 BD   EE0E               jsr    bytewr  EF9A 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  EF9C 34   16       GCRSIMR   pshs   d,x  EF9E 5F                      clrb  EF9F                         trfr   B,F  EF9F 1F                      fcb    $1f  EFA0 9F                      fcb    B<<4|F                               endm  EFA1 8E   0018               ldx    #WZSIMR  EFA4 BD   EDB1               jsr    byterd  EFA7 ED   E4                 std    0,s  EFA9 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  EFAB 34   16       PCRSIMR   pshs   d,x  EFAD 5F                      clrb  EFAE                         trfr   B,F  EFAE 1F                      fcb    $1f  EFAF 9F                      fcb    B<<4|F                               endm  EFB0 8E   0018               ldx    #WZSIMR  EFB3 EC   E4                 ldd    0,sFIO Simulation Structure             13:34:40  Jun 16, 2024   Page   93wzspi, basic spi routines                             EFB5 BD   EE0E               jsr    bytewr  EFB8 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EFBA 34   16       GCRRTR    pshs   d,x  EFBC 5F                      clrb  EFBD                         trfr   B,F  EFBD 1F                      fcb    $1f  EFBE 9F                      fcb    B<<4|F                               endm  EFBF 8E   0019               ldx    #WZRTR0  EFC2 BD   EDC3               jsr    wordrd  EFC5 ED   E4                 std    0,s  EFC7 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EFC9 34   16       PCRRTR    pshs   d,x  EFCB 5F                      clrb  EFCC                         trfr   B,F  EFCC 1F                      fcb    $1f  EFCD 9F                      fcb    B<<4|F                               endm  EFCE 8E   0019               ldx    #WZRTR0  EFD1 EC   E4                 ldd    0,s  EFD3 BD   EE1D               jsr    wordwr  EFD6 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EFD8 34   16       GCRRCR    pshs   d,x  EFDA 5F                      clrb  EFDB                         trfr   B,F  EFDB 1F                      fcb    $1f  EFDC 9F                      fcb    B<<4|F                               endm  EFDD 8E   001B               ldx    #WZRCR  EFE0 BD   EDB1               jsr    byterd  EFE3 ED   E4                 std    0,s  EFE5 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EFE7 34   16       PCRRCR    pshs   d,x  EFE9 5F                      clrbFIO Simulation Structure             13:34:40  Jun 16, 2024   Page   94wzspi, basic spi routines                             EFEA                         trfr   B,F  EFEA 1F                      fcb    $1f  EFEB 9F                      fcb    B<<4|F                               endm  EFEC 8E   001B               ldx    #WZRCR  EFEF EC   E4                 ldd    0,s  EFF1 BD   EE0E               jsr    bytewr  EFF4 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EFF6 34   16       GCRURP    pshs   d,x  EFF8 5F                      clrb  EFF9                         trfr   B,F  EFF9 1F                      fcb    $1f  EFFA 9F                      fcb    B<<4|F                               endm  EFFB 8E   002C               ldx    #WZUPRT0  EFFE BD   EDC3               jsr    wordrd  F001 ED   E4                 std    0,s  F003 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  F005 34   16       GCRUIP    pshs   d,x  F007 5F                      clrb  F008                         trfr   B,F  F008 1F                      fcb    $1f  F009 9F                      fcb    B<<4|F                               endm  F00A 8E   0028               ldx    #WZUIPR0  F00D BD   EDC3               jsr    wordrd  F010 ED   A4                 std    0,y  F012 8E   002A               ldx    #WZUIPR2  F015 BD   EDC3               jsr    wordrd  F018 ED   22                 std    2,y  F01A 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  F01C 34   56       GCRPHY    pshs   d,x,u  F01E 8E   002E               ldx    #WZPHY  F021 5F                      clrb  F022                         trfr   B,F  F022 1F                      fcb    $1f  F023 9F                      fcb    B<<4|FFIO Simulation Structure             13:34:41  Jun 16, 2024   Page   95wzspi, basic spi routines                                                          endm  F024 BD   EDB1               jsr    byterd  F027 ED   E4                 std    0,s  F029 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  F02B 34   56       PCRPHY    pshs   d,x,u  F02D 8E   002E               ldx    #WZPHY  F030 5F                      clrb  F031                         trfr   B,F  F031 1F                      fcb    $1f  F032 9F                      fcb    B<<4|F                               endm  F033 EC   E4                 ldd    0,s  F035 BD   EE0E               jsr    bytewr  F038 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  F03A 34   56       GCRVERS   pshs   d,x,u  F03C 8E   0039               ldx    #WZVERS  F03F 5F                      clrb  F040                         trfr   B,F  F040 1F                      fcb    $1f  F041 9F                      fcb    B<<4|F                               endm  F042 BD   EDB1               jsr    byterd  F045 ED   E4                 std    0,s  F047 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             13:34:41  Jun 16, 2024   Page   96wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  F049 34   16       GSRMR     psh    d,x  F04B BD   F307               jsr    tsk2rg  F04E 8E   0000               ldx    #SNMR  F051 BD   EDB1               jsr    byterd  F054 ED   E4                 std    0,s  F056 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  F058 34   16       PSRMR     pshs   d,x  F05A BD   F307               jsr    tsk2rgFIO Simulation Structure             13:34:41  Jun 16, 2024   Page   97wzspi, basic spi routines                             F05D 8E   0000               ldx    #SNMR  F060 EC   E4                 ldd    0,s  F062 BD   EE0E               jsr    bytewr  F065 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  F067 34   16       GSRCR     pshs   d,x  F069 BD   F307               jsr    tsk2rg  F06C 8E   0001               ldx    #SNCR  F06F BD   EDB1               jsr    byterd  F072 ED   E4                 std    0,s  F074 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  F076 34   16       PSRCR     pshs   d,x  F078 BD   F307               jsr    tsk2rg  F07B 8E   0001               ldx    #SNCR  F07E EC   E4                 ldd    0,s  F080 BD   EE0E               jsr    bytewr  F083 8D   E2       01        bsr    GSRCR  F085 5D                      tstb  F086 26   FB                 bne    01b       wait command to be consumed  F088 E7   61                 stb    1,s       set return  F08A 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  F08C 34   16       GSRIR     pshs   d,x  F08E BD   F307               jsr    tsk2rg  F091 8E   0002               ldx    #SNIR  F094 BD   EDB1               jsr    byterd  F097 ED   E4                 std    0,s  F099 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  F09B 34   16       PSRIR     pshs   d,x  F09D BD   F307               jsr    tsk2rg  F0A0 8E   0002               ldx    #SNIR  F0A3 EC   E4                 ldd    0,sFIO Simulation Structure             13:34:41  Jun 16, 2024   Page   98wzspi, basic spi routines                             F0A5 BD   EE0E               jsr    bytewr  F0A8 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  F0AA 34   16       GSRSR     pshs   d,x  F0AC BD   F307               jsr    tsk2rg  F0AF 8E   0003               ldx    #SNSR  F0B2 BD   EDB1               jsr    byterd  F0B5 ED   E4                 std    0,s  F0B7 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  F0B9 34   16       GSRPORT   pshs   d,x  F0BB BD   F307               jsr    tsk2rg  F0BE 8E   0004               ldx    #SNPORT0  F0C1 BD   EDC3               jsr    wordrd  F0C4 ED   E4                 std    0,s  F0C6 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  F0C8 34   16       PSRPORT   pshs   d,x  F0CA BD   F307               jsr    tsk2rg  F0CD 8E   0004               ldx    #SNPORT0  F0D0 EC   E4                 ldd    0,s  F0D2 BD   EE1D               jsr    wordwr  F0D5 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  F0D7 34   16       GSRDHAR   pshs   d,x  F0D9 BD   F307               jsr    tsk2rg  F0DC 8E   0006               ldx    #SNDHAR0  F0DF BD   EDC3               jsr    wordrd  F0E2 ED   A4                 std    0,y  F0E4 8E   0008               ldx    #SNDHAR2  F0E7 BD   EDC3               jsr    wordrd  F0EA ED   22                 std    2,y  F0EC 8E   000A               ldx    #SNDHAR4  F0EF BD   EDC3               jsr    wordrdFIO Simulation Structure             13:34:42  Jun 16, 2024   Page   99wzspi, basic spi routines                             F0F2 ED   24                 std    4,y  F0F4 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  F0F6 34   16       PSRDHAR   pshs   d,x  F0F8 BD   F307               jsr    tsk2rg  F0FB 8E   0006               ldx    #SNDHAR0  F0FE EC   A4                 ldd    0,y  F100 BD   EE1D               jsr    wordwr  F103 8E   0008               ldx    #SNDHAR2  F106 EC   22                 ldd    2,y  F108 BD   EE1D               jsr    wordwr  F10B 8E   000A               ldx    #SNDHAR4  F10E EC   24                 ldd    4,y  F110 BD   EE1D               jsr    wordwr  F113 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  F115 34   16       GSRDIP    pshs   d,x  F117 BD   F307               jsr    tsk2rg  F11A 8E   000C               ldx    #SNDIPR0  F11D BD   EDC3               jsr    wordrd  F120 ED   A4                 std    0,y  F122 8E   000E               ldx    #SNDIPR2  F125 BD   EDC3               jsr    wordrd  F128 ED   22                 std    2,y  F12A 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  F12C 34   16       PSRDIP    pshs   d,x  F12E BD   F307               jsr    tsk2rg  F131 8E   000C               ldx    #SNDIPR0  F134 EC   A4                 ldd    0,y  F136 BD   EE1D               jsr    wordwr  F139 8E   000E               ldx    #SNDIPR2  F13C EC   22                 ldd    2,y  F13E BD   EE1D               jsr    wordwr  F141 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             13:34:42  Jun 16, 2024   Page  100wzspi, basic spi routines                                                *  F143 34   16       GSRDPOR   pshs   d,x  F145 BD   F307               jsr    tsk2rg  F148 8E   0010               ldx    #SNDPOR0  F14B BD   EDC3               jsr    wordrd  F14E ED   E4                 std    0,s  F150 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  F152 34   16       PSRDPOR   pshs   d,x  F154 BD   F307               jsr    tsk2rg  F157 8E   0010               ldx    #SNDPOR0  F15A EC   E4                 ldd    0,s  F15C BD   EE1D               jsr    wordwr  F15F 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  F161 34   16       GSRMSS    pshs   d,x  F163 BD   F307               jsr    tsk2rg  F166 8E   0012               ldx    #SNMSSR0  F169 BD   EDC3               jsr    wordrd  F16C ED   E4                 std    0,s  F16E 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  F170 34   16       PSRMSS    pshs   d,x  F172 BD   F307               jsr    tsk2rg  F175 8E   0012               ldx    #SNMSSR0  F178 EC   E4                 ldd    0,s  F17A BD   EE1D               jsr    wordwr  F17D 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  F17F 34   16       GSRPROT   pshs   d,x  F181 BD   F307               jsr    tsk2rg  F184 8E   0014               ldx    #SNPROTO  F187 BD   EDB1               jsr    byterd  F18A ED   E4                 std    0,sFIO Simulation Structure             13:34:42  Jun 16, 2024   Page  101wzspi, basic spi routines                             F18C 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  F18E 34   16       PSRPROT   pshs   d,x  F190 BD   F307               jsr    tsk2rg  F193 8E   0014               ldx    #SNPROTO  F196 EC   E4                 ldd    0,s  F198 BD   EE0E               jsr    bytewr  F19B 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  F19D 34   16       GSRTOS    pshs   d,x  F19F BD   F307               jsr    tsk2rg  F1A2 8E   0015               ldx    #SNTOS  F1A5 BD   EDB1               jsr    byterd  F1A8 ED   E4                 std    0,s  F1AA 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  F1AC 34   16       PSRTOS    pshs   d,x  F1AE BD   F307               jsr    tsk2rg  F1B1 8E   0015               ldx    #SNTOS  F1B4 EC   E4                 ldd    0,s  F1B6 BD   EE0E               jsr    bytewr  F1B9 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  F1BB 34   16       GSRTTL    pshs   d,x  F1BD BD   F307               jsr    tsk2rg  F1C0 8E   0016               ldx    #SNTTL  F1C3 BD   EDB1               jsr    byterd  F1C6 ED   E4                 std    0,s  F1C8 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             13:34:43  Jun 16, 2024   Page  102wzspi, basic spi routines                             F1CA 34   16       PSRTTL    pshs   d,x  F1CC BD   F307               jsr    tsk2rg  F1CF 8E   0016               ldx    #SNTTL  F1D2 EC   E4                 ldd    0,s  F1D4 BD   EE0E               jsr    bytewr  F1D7 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  F1D9 34   16       GSRRBFS   pshs   d,x  F1DB BD   F307               jsr    tsk2rg  F1DE 8E   001E               ldx    #SNRBFSZ  F1E1 BD   EDB1               jsr    byterd  F1E4 ED   E4                 std    0,s  F1E6 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  F1E8 34   16       PSRRBFS   pshs   d,x  F1EA BD   F307               jsr    tsk2rg  F1ED 8E   001E               ldx    #SNRBFSZ  F1F0 EC   E4                 ldd    0,s  F1F2 BD   EE0E               jsr    bytewr  F1F5 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  F1F7 34   16       GSRTBFS   pshs   d,x  F1F9 BD   F307               jsr    tsk2rg  F1FC 8E   001F               ldx    #SNTBFSZ  F1FF BD   EDB1               jsr    byterd  F202 ED   E4                 std    0,s  F204 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  F206 34   16       PSRTBFS   pshs   d,x  F208 BD   F307               jsr    tsk2rg  F20B 8E   001F               ldx    #SNTBFSZ  F20E EC   E4                 ldd    0,s  F210 BD   EE0E               jsr    bytewr  F213 35   96                 puls   d,x,pcFIO Simulation Structure             13:34:43  Jun 16, 2024   Page  103wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  F215 34   16       GSRTXFR   pshs   d,x  F217 BD   F307               jsr    tsk2rg  F21A 8E   0020               ldx    #SNTXFR0  [R]  F21D BD   EDC3               jsr    wordrd  F220 ED   E4       01        std    0,s  F222 BD   EDC3               jsr    wordrd  F225 10A3 E4                 cmpd   0,s       read more times and exit  F228 26   F6                 bne    01b       when 2 reads are equal  F22A 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F22C 34   16       GSRTXRP   pshs   d,x  F22E BD   F307               jsr    tsk2rg  F231 8E   0022               ldx    #SNTXRP0  [R]  F234 BD   EDC3               jsr    wordrd  F237 ED   E4       01        std    0,s  F239 BD   EDC3               jsr    wordrd  F23C 10A3 E4                 cmpd   0,s       read more times and exit  F23F 26   F6                 bne    01b       when 2 reads are equal  F241 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F243 34   16       GSRTXWP   pshs   d,x  F245 BD   F307               jsr    tsk2rg  F248 8E   0024               ldx    #SNTXWP0  [RW]  F24B BD   EDC3               jsr    wordrd  F24E ED   E4                 std    0,s  F250 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F252 34   16       PSRTXWP   pshs   d,x  F254 BD   F307               jsr    tsk2rg  F257 8E   0024               ldx    #SNTXWP0  F25A EC   E4                 ldd    0,s  F25C BD   EE1D               jsr    wordwrFIO Simulation Structure             13:34:43  Jun 16, 2024   Page  104wzspi, basic spi routines                             F25F 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F261 34   16       GSRRXRS   pshs   d,x  F263 BD   F307               jsr    tsk2rg  F266 8E   0026               ldx    #SNRXRZ0  [R]  F269 BD   EDC3               jsr    wordrd  F26C ED   E4       01        std    0,s  F26E BD   EDC3               jsr    wordrd  F271 10A3 E4                 cmpd   0,s       read more times and exit  F274 26   F6                 bne    01b       when 2 reads are equal  F276 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F278 34   16       GSRRXRP   pshs   d,x  F27A BD   F307               jsr    tsk2rg  F27D 8E   0028               ldx    #SNRXRP0  [RW]  F280 BD   EDC3               jsr    wordrd  F283 ED   E4                 std    0,s  F285 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F287 34   16       PSRRXRP   pshs   d,x >F289 BD   F307               jsr    tsk2rg  F28C 8E   0028               ldx    #SNRXRP0  F28F EC   E4                 ldd    0,s  F291 BD   EE1D               jsr    wordwr  F294 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F296 34   16       GSRRXWP   pshs   d,x >F298 BD   F307               jsr    tsk2rg  F29B 8E   002A               ldx    #SNRXWP0  [R]  F29E BD   EDC3               jsr    wordrd  F2A1 ED   E4       01        std    0,s  F2A3 BD   EDC3               jsr    wordrd  F2A6 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             13:34:44  Jun 16, 2024   Page  105wzspi, basic spi routines                             F2A9 26   F6                 bne    01b       when 2 reads are equal  F2AB 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F2AD 34   16       GSRIMR    pshs   d,x >F2AF BD   F307               jsr    tsk2rg  F2B2 8E   002C               ldx    #SNIMR  F2B5 BD   EDB1               jsr    byterd  F2B8 ED   E4                 std    0,s  F2BA 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F2BC 34   16       PSRIMR    pshs   d,x >F2BE BD   F307               jsr    tsk2rg  F2C1 8E   002C               ldx    #SNIMR  F2C4 EC   E4                 ldd    0,s  F2C6 BD   EE0E               jsr    bytewr  F2C9 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F2CB 34   16       GSRFRAG   pshs   d,x >F2CD BD   F307               jsr    tsk2rg  F2D0 8E   002D               ldx    #SNFRAG0  F2D3 BD   EDC3               jsr    wordrd  F2D6 ED   E4                 std    0,s  F2D8 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F2DA 34   16       PSRFRAG   pshs   d,x >F2DC BD   F307               jsr    tsk2rg  F2DF 8E   002D               ldx    #SNFRAG0  F2E2 EC   E4                 ldd    0,s  F2E4 BD   EE1D               jsr    wordwr  F2E7 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             13:34:44  Jun 16, 2024   Page  106wzspi, basic spi routines                                                * return byte in B                     *  F2E9 34   16       GSKATM    pshs   d,x >F2EB BD   F307               jsr    tsk2rg  F2EE 8E   002F               ldx    #SNKATIM  F2F1 BD   EDB1               jsr    byterd  F2F4 ED   E4                 std    0,s  F2F6 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F2F8 34   16       PSRKATM   pshs   d,x >F2FA BD   F307               jsr    tsk2rg  F2FD 8E   002F               ldx    #SNKATIM  F300 EC   E4                 ldd    0,s  F302 BD   EE0E               jsr    bytewr  F305 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F307  tsk2rg    equ    *  F307                         trfr   E,B  F307 1F                      fcb    $1f  F308 E9                      fcb    E<<4|B                               endm  F309 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F30A 1C   FE                 clc              make reg bits + '01'  F30C 59                      rolb             socket register  F30D 1A   01                 sec  F30F 59                      rolb             xxx 01 ...                     *  F310                         trfr   B,F  F310 1F                      fcb    $1f  F311 9F                      fcb    B<<4|F                               endm  F312 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F313  tsk2tx    equ    *  F313                         trfr   E,B  F313 1F                      fcb    $1f  F314 E9                      fcb    E<<4|BFIO Simulation Structure             13:34:44  Jun 16, 2024   Page  107wzspi, basic spi routines                                                          endm  F315 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F316 1A   01                 sec              make reg bits + '10'  F318 59                      rolb             sock TX buffer  F319 1C   FE                 clc  F31B 59                      rolb                     *  F31C 1A   01                 sec  F31E 59                      rolb             write bit     '1'                     *  F31F 58                      lslb             variable size '00'  F320 58                      lslb             xxx 10 100                     *  F321 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F322  tsk2rx    equ    *  F322                         trfr   E,B  F322 1F                      fcb    $1f  F323 E9                      fcb    E<<4|B                               endm  F324 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F325 1A   01                 sec              make reg bits + '11'  F327 59                      rolb             sock RX buffer  F328 1A   01                 sec              make reg bits + '11'  F32A 59                      rolb                     *  F32B 1C   FE                 clc  F32D 59                      rolb             read bit     '0'                     *  F32E 58                      lslb             variable size '00'  F32F 58                      lslb             xxx 11 000  F330 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=target, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F331 34   76       RDSK2FB   pshs   d,x,y,u                     *  F333 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F336 23   02                 bls    01f  F338 EC   4A                 ldd    wzrqln,u  mandatory size  F33A 1F   01       01        tfr    D,X       save for laterFIO Simulation Structure             13:34:45  Jun 16, 2024   Page  108wzspi, basic spi routines                             F33C ED   E4                 std    0,s       save xfrerred old  D  F33E ED   48                 std    wzxfer,u  F340 27   3B                 beq    15f       no data                     *  F342 BD   F278               jsr    GSRRXRP  F345 34   06                 pshs   d         save socket read pointer [5,6]  F347 1F   02                 tfr    D,Y                     *  F349 CE   8080               ldu    #SPIBASE  F34C 34   01                 pshs   cc        [4]  F34E                         pshsw  [2,3]  F34E 1038                    fdb    $1038                               endm  F350 34   40                 pshs   u         [0,1]  F352 1A   50                 orcc   #$50      disable interrupts  F354 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F356 A7   C4                 sta    spicmd,u  F358 10AF 44                 sty    hibyta,u  start address                      >F35B BD   F322               jsr    tsk2rx    SOCK# to buffer address                       F35E E7   44                 stb    hibyta,u  F360 10AE 6B                 ldy    11,s      target  F363 E7   44                 stb    hibyta,u  shift out first data byte  F365 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F367                         trfr   X,W  F367 1F                      fcb    $1f  F368 16                      fcb    X<<4|W                               endm  F369                         tfm4   U,Y  F369 113B                    fdb    $113b  F36B 32                      fcb    U<<4|Y                               endm  F36C 35   40                 puls   u         [0,1]  F36E 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F370 A7   C4                 sta    spicmd,u  F372                         pulsw  restore   E:F              [2,3]  F372 1039                    fdb    $1039                               endm  F374 35   01                 puls   cc        [4]                     *  F376 35   06                 puls   d         old read pointer         [5,6]  F378 E3   E4                 addd   0,s       adjust transferred  F37A BD   F287               jsr    PSRRXRP   update pointer                     *  F37D 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=target                     * E=socket#FIO Simulation Structure             13:34:45  Jun 16, 2024   Page  109wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F37F 34   76       WRFB2SK   pshs   d,x,y,u  F381 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F384 23   02                 bls    01f  F386 EC   4A                 ldd    wzrqln,u  F388 1F   01       01        tfr    d,x  F38A ED   E4                 std    0,s  F38C ED   48                 std    wzxfer,u  report size  F38E 27   52                 beq    15f                     *  F390 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F394 26   05                 bne    24f  F396 BD   F243               jsr    GSRTXWP   get write pointer  F399 20   02                 bra    25f  F39B 1F   20       24        tfr    y,d                     *  F39D 34   06       25        pshs   d  F39F 1F   02                 tfr    D,Y                     *  F3A1 CE   8080               ldu    #SPIBASE  F3A4 34   01                 pshs   cc  F3A6                         pshsw  save      E:F  F3A6 1038                    fdb    $1038                               endm  F3A8 34   40                 pshs   u  F3AA 1A   50                 orcc   #$50  F3AC 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F3AE A7   C4                 sta    spicmd,u  F3B0 10AF 44                 sty    hibyta,u  start address                       F3B3 BD   F313               jsr    tsk2tx                       F3B6 E7   44                 stb    hibyta,u  F3B8 10AE 6B                 ldy    11,s      target  F3BB 33   44                 leau   hibyta,u  the first to shift out  F3BD                         trfr   X,W  F3BD 1F                      fcb    $1f  F3BE 16                      fcb    X<<4|W                               endm  F3BF                         tfm3   Y,U  F3BF 113A                    fdb    $113a  F3C1 23                      fcb    Y<<4|U                               endm  F3C2 35   40                 puls   u  F3C4 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F3C6 A7   C4                 sta    spicmd,u  F3C8                         pulsw  restore   E:F!!  F3C8 1039                    fdb    $1039                               endm  F3CA 35   01                 puls   ccFIO Simulation Structure             13:34:45  Jun 16, 2024   Page  110wzspi, basic spi routines                                                *  F3CC 35   06                 puls   d         old write pointer  F3CE E3   E4                 addd   0,s  F3D0 EE   66                 ldu    6,s       restore U  F3D2 AE   C8 26              ldx    wztype,u  F3D5 8C   0002               cmpx   #SK_DGRM  F3D8 27   05                 beq    10f  F3DA BD   F252     11        jsr    PSRTXWP   update pointer  F3DD 20   03                 bra    15f                       F3DF ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F3E2 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             13:34:45  Jun 16, 2024   Page  111Debug Interface Routines                                                   F3E4               DB_main  F3E4 8D   4F                 bsr    DB_test   see if debug routines present  F3E6 6E   9F C002            jmp    [DEBUGROM+2]  F3EA               DB_pdata  F3EA 8D   49                 bsr    DB_test   see if debug routines present  F3EC 6E   9F C004            jmp    [DEBUGROM+4]  F3F0               DB_phex  F3F0 8D   43                 bsr    DB_test   see if debug routines present  F3F2 6E   9F C006            jmp    [DEBUGROM+6]  F3F6               DB_phex2  F3F6 8D   3D                 bsr    DB_test   see if debug routines present  F3F8 6E   9F C008            jmp    [DEBUGROM+8]  F3FC               DB_pcrlf  F3FC 8D   37                 bsr    DB_test   see if debug routines present  F3FE 6E   9F C00A            jmp    [DEBUGROM+10]  F402               DB_check  F402 8D   31                 bsr    DB_test   see if debug routines present  F404 6E   9F C00C            jmp    [DEBUGROM+12]  F408               DB_config  F408 8D   2B                 bsr    DB_test   see if debug routines present  F40A 6E   9F C00E            jmp    [DEBUGROM+14]  F40E 34   17       DB_msg    pshs   cc,d,x  F410 AE   65                 ldx    1+2+2,s   get return address  F412 EC   81                 ldd    ,x++      get mask word  F414 B4   0401               anda   DB_cntrl  F417 F4   0402               andb   DB_cntrl+1  F41A 34   04                 pshs   b  F41C AA   E0                 ora    ,s+  F41E 27   04                 beq    10f       jump if flag not set  F420 30   02                 leax   2,x       skip over false address & fall through  F422 20   02                 bra    20f  F424 AE   84       10        ldx    ,x        get false branch label  F426 AF   65       20        stx    1+2+2,s   fix up return address  F428 35   97                 puls   cc,d,x,pc return                     *  F42A               DB_pspace  F42A               DB_outsp  F42A 34   16                 pshs   d,x  F42C 8E   F433               ldx    #00f  F42F 8D   B9                 bsr    DB_pdata  F431 35   96                 puls   d,x,pc  F433 20 00         00        fcc    ' ',0                       F435 34   07       DB_test   pshs   cc,d  F437 FC   C000               ldd    DEBUGROM  Debug rom present?  F43A 1083 1234               cmpd   #$1234    special marker  F43E 27   05                 beq    99f       yes - exit  F440 35   07                 puls   cc,d      no - abort DB_xx function  F442 32   62                 leas   2,s  F444 39                      rts  F445 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             13:34:46  Jun 16, 2024   Page  112Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             13:34:46  Jun 16, 2024   Page  113Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   BUFSIZ   0200   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E05E   CPUtraps FFF0   CR       000D   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F402   DB_cntrl 0401   DB_confi F408   DB_iflg  0400   DB_main  F3E4   DB_msg   F40E   DB_outsp F42A   DB_pcrlf F3FC   DB_pdata F3EA   DB_phex  F3F0   DB_phex2 F3F6   DB_pspac F42A   DB_test  F435   DBmsg00  E012   DBmsg01  E02A   DBmsg02  E04A   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5F3   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    003E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func14 0028   D_func15 002A   D_func16 002C   D_func17 002E   D_func18 0030   D_func19 0032   D_func1A 0034   D_func1B 0036   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   003A   D_inthan 0038   D_test   003C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2F5   FIFO_put E31A   FIFOgeta E2EC   FIFOputa E312   FIOPRI   FFCE   FIO_get  E2CA   FIO_lock 0446   FIO_rel  E2DF   GCRGA    EE5C   GCRILLT  EF24   GCRIMR   EF60   GCRIR    EF42   GCRMR    EE3E   GCRPHY   F01C   GCRRCR   EFD8   GCRRTR   EFBA   GCRSHA   EEB8   GCRSIMR  EF9C   GCRSIP   EEF6   GCRSIR   EF7E   GCRSNM   EE8A   GCRUIP   F005   GCRURP   EFF6   GCRVERS  F03A   GSKATM   F2E9   GSRCR    F067   GSRDHAR  F0D7   GSRDIP   F115   GSRDPOR  F143   GSRFRAG  F2CB   GSRIMR   F2AD   GSRIR    F08C   GSRMR    F049   GSRMSS   F161   GSRPORT  F0B9   GSRPROT  F17F   GSRRBFS  F1D9   GSRRXRP  F278   GSRRXRS  F261   GSRRXWP  F296   GSRSR    F0AA   GSRTBFS  F1F7   GSRTOS   F19D   GSRTTL   F1BB   GSRTXFR  F215   GSRTXRP  F22C   GSRTXWP  F243   HANGS    0001   HRECSIZ  0004   H_cpu    E472   H_fio    E496   IF       0010   INTS     0002   IO_end   E393   IO_han   E335   IRQ_han  E3B2   IRQmsg10 E3BF   IS       0003   IU       0002   IX       0000   IY       0001   LF       000A   MAXHIST  0010   MAXTBL   0003   MAX_DEV  0001   MAX_S_NU 001C   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NBRQLN   0004   NBSIZE   0204   NET      0001   NUM_TSK  0459   O_CLOSE  0020   O_INTRPT 0038   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EE73   PCRILLT  EF33   PCRIMR   EF6F   PCRIR    EF51   PCRMR    EE4D   PCRPHY   F02B   PCRRCR   EFE7   PCRRTR   EFC9   PCRSHA   EED7   PCRSIMR  EFAB   PCRSIP   EF0D   PCRSIR   EF8D   PCRSNM   EEA1   PF_INET  0002   PF_UNIX  0001   PIPES    0006   POLPRI   FFBA   PROT_EGP 0008   PROT_ICM 0001   PROT_IGM 0002   PROT_XLT 8000   PSRCR    F076   PSRDHAR  F0F6   PSRDIP   F12C   PSRDPOR  F152   PSRFRAG  F2DA   PSRIMR   F2BC   PSRIR    F09B   PSRKATM  F2F8   PSRMR    F058   PSRMSS   F170   PSRPORT  F0C8   PSRPROT  F18E   PSRRBFS  F1E8   PSRRXRP  F287   PSRTBFS  F206   PSRTOS   F1AC   PSRTTL   F1CA   FIO Simulation Structure             13:34:47  Jun 16, 2024   Page  114Debug Interface Routines                            PSRTXWP  F252   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F331   REJECT   0080   ROMLOorg E000   ROM_ERR  E0D3   ROM_VERS 0020   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOCK  000E   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_ERRBLK 0084   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_PDATA  000B   R_RD1C   0009   R_RDFRM  0021   R_RDOK   0005   R_RDRBLK 0083   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_RQRBLK 0082   R_RQRD   0005   R_RQRDNB 0015   R_RQSBLK 0080   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   R_SNDBLK 0081   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E406   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_IRAW  0004   SK_MRAW  0003   SK_NONBL 0100   SK_SPONC 0200   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_RDRBLK 00D8   S_READ   0030   S_RQRBLK 00D0   S_RQRD   0028   S_RQSBLK 00C0   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDBLK 00C8   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WFSPOC   0002   WRFB2SK  F37F   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSIRAW   0032   WSLACK   001D   WSLIST   0014   WSMRAW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1DF   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3AE   bittab   E784   bmread   EDD5   bt2num   E773   byterd   EDB1   bytewr   EE0E   change   E4BA   chproc   040C   clock_ti 0455   conlb1   E82D   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   FIO Simulation Structure             13:34:47  Jun 16, 2024   Page  115Debug Interface Routines                            cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E07D   fio_fsz  E07B   fio_irq  E22A   fio_msg  E294   fio_rese E1EA   fio_resp E2AE   fio_star E09B   fio_wait E20D   fiointe  E293   functb   ECD9   getjo1   E502   getjo2   E511   getjo4   E518   getjo6   E521   getjo8   E523   getjob   E4FC   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3D7   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   E57B   makrdy   E566   max_trn  E07F   mod_name 0002   mod_tbl  E1D9   mod_type 0000   no_dev   E15A   num2bt   E769   nwp_strt 0000   oldorg   ED7D   polext   E847   putru1   E53A   putru2   E541   putru4   E54F   putru5   E55E   putru6   E562   putrun   E52D   rdrqer1  E966   rom_bad  E0D1   rom_firq E0A4   rom_init E080   rom_int  E0C6   rom_nmi  E09E   rom_swi  E0AB   rom_swi2 E0B1   rom_swi3 E0B8   rom_trap E0BF   rsche2   E4D1   rsche3   E4E5   rsched   E4C0   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E6A6   send_SI  E448   set_tabl E112   showrg   ED27   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E8E7   skbind   E870   skclin   E7A8   skclos   E78D   skcner1  E866   skcner2  E853   skcner3  E86A   skcner4  E862   skcner5  E85E   skcner6  E857   skconn   E7DA   skcraw   E6E0   skctcp   E6CE   skcudp   E6D7   skdisc   ED76   skdvini  E64E   skfres   E6C7   skinit   E631   skinthan E6A5   skintrp  E78D   sklist   E8B5   sknbe1   EC18   sknbe10  EC79   sknbrd   EC1F   sknbrp1  EC12   sknbrp2  EBED   sknbrr   EBBB   sknbsd   EC85   sknbsr   EC4B   sknewp   E6A9   sknone   E64B   skopen   E6ED   skoper1  E75F   skoper2  E763   skowfo   E747   skrecv   E96B   skreqrd  E91E   skreqwr  E9AE   sksend   E9F5   skskep   ED76   sksmac   ED76   skspcl   ECB2   sktest   E6A2   skurrd   EAAE   skurrdf  EA37   skurwt   EADC   skusnm   EB2B   skusnt   EB81   skuwr2   EB2B   sleep    E5A0   sleep7   E5C8   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   ED7D   spista   0000   spistr2  ED83   sprend   EE2C   stbinit  E0E0   sto_chk  E161   swtchu   E4F1   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1CD   timerchk E1D3   timerin  E1C7   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F307   tsk2rx   F322   tsk2tx   F313   tskend   049E   tskinit  E16F   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E587   wakeu3   E58E   wakeu4   E592   wakeu5   E594   wakeup   E57C   wlocip   0370   wordrd   EDC3   wordwr   EE1D   wzanyp   0457   wzcmnd   0004   wzdctr   0001   wzdevt   E6BB   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzifga   E00E   wzifip   E006   wzifma   E000   wzifnm   E00A   wzipad   0014   wzmyip   0000   wzprot   0028   wzrdev   ED0B   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzwdev   ECE1   wzxfer   0008   xmtint   E5D5   