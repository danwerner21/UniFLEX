               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     06:07:02  Jan 10, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                     SWTPc      Intelligent I/O Proce     06:07:02  Jan 10, 2024   Page    2Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     06:07:03  Jan 10, 2024   Page    3Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     06:07:03  Jan 10, 2024   Page    4Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     06:07:03  Jan 10, 2024   Page    5Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     06:07:03  Jan 10, 2024   Page    6Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     06:07:03  Jan 10, 2024   Page    7Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     06:07:04  Jan 10, 2024   Page    8Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * should match nwp_codes.h  and MAX_S_NUM                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  0004               D_func2   rmb    2         2  0006               D_func3   rmb    2         3  0008               D_func4   rmb    2         4  000A               D_func5   rmb    2         5  000C               D_func6   rmb    2         6  000E               D_func7   rmb    2         7  0010               D_func8   rmb    2         8  0012               D_func9   rmb    2         9  0014               D_funcA   rmb    2         A  0016               D_funcB   rmb    2         B  0018               D_funcC   rmb    2         C  001A               D_funcD   rmb    2         D  001C               D_funcE   rmb    2         E  001E               D_funcF   rmb    2         F                     *  0020               D_func10  rmb    2         10  0022               D_func11  rmb    2         11  0024               D_func12  rmb    2         12  0026               D_func13  rmb    2         13                     *  0028               D_inthan  rmb    2         14 Interrupt poller/handlerSWTPc      Intelligent I/O Proce     06:07:04  Jan 10, 2024   Page    9Device     Table Structure                            002A               D_init    rmb    2         15 Device initialization  002C               D_test    rmb    2         16 Test for device present                     *  002E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     06:07:04  Jan 10, 2024   Page   10History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     06:07:04  Jan 10, 2024   Page   11IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 06:07:04  Jan 10, 2024   Page   12IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 06:07:04  Jan 10, 2024   Page   13IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                                               *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMCRW    equ    $42       sock mac raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commands               0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receiveTask       Structure                 06:07:05  Jan 10, 2024   Page   14IOP        Memory Layout                                                                0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001                         rmb    1         [*] (pre= $00)  sock has fifo allocated  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parameters                     *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                                    002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP addressTask       Structure                 06:07:05  Jan 10, 2024   Page   15IOP        Memory Layout                              0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_RAW    equ    3         raw socket                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             06:07:05  Jan 10, 2024   Page   16IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             06:07:06  Jan 10, 2024   Page   17IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             06:07:06  Jan 10, 2024   Page   18Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0030  ROM_VERSION equ  $30       Major/Minor Version of IOP ROM                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)FIO Simulation Structure             06:07:06  Jan 10, 2024   Page   19Dual_Port RAM Structure                                            0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 generic socket error, actual is passed                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               0001  R_OPEN    equ    $01       [S]  Device open successful               0002  R_CLOSE   equ    $02       [S]  Device close successful               0003  R_RQWR    equ    $03       [S]  request for write               0004  R_WRITE   equ    $04       [S]  write data via fifo to net               0005  R_RQRD    equ    $05       [S]  request for read data               0006  R_READ    equ    $06       [S]  read data via fifo from net               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to macFIO Simulation Structure             06:07:06  Jan 10, 2024   Page   20Dual_Port RAM Structure                                            0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *               0015  MAX_S_NUM equ    21        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             06:07:06  Jan 10, 2024   Page   21Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             06:07:07  Jan 10, 2024   Page   22CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0B3                    fdb    rom_trap  Unused  FFF2 E0AC                    fdb    rom_swi3  SWI3  FFF4 E0A5                    fdb    rom_swi2  SWI2  FFF6 E098                    fdb    rom_firq  FIRQ  FFF8 E3A7                    fdb    IRQ_han   IRQ  FFFA E09F                    fdb    rom_swi   SWI  FFFC E092                    fdb    rom_nmi   Background debug  FFFE E05F                    fdb    rom_init  Reset                     FIO Simulation Structure             06:07:07  Jan 10, 2024   Page   23System     RESET Code                                                      E000                         org    ROMLOorg                       E000 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM',0  E009 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E029 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E03D 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               E05A  fio_fsz   equ    *         device fifo size               E05C  fio_dsz   equ    *+2       device RAM size               E05E  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E05A 0200                    fdb    512       fio_fsz FIFO SIZE  E05C 0400                    fdb    1024      fio_dsz DEVICE SIZE  E05E 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *                     * System RESET code                     *  E05F 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E063                         ldmd   3  E063 113D                    fdb    $113d  E065 03                      fcb    3                               endm                                          *                     * for background debugger                     *                     **        lda     #$15                     **        sta     ACIAC         init debug acia                     **        clr     bdbsta        echo on                       E066 8E   E3A7               ldx    #IRQ_han  IRQ  E069 BF   7F00               stx    $7f00     GPPMON vector  E06C BD   E60F               jsr    skinit                                                                 E06F               myloop                       E06F 86   28                 lda    #SPI_RST+SPI_AUT  E071 B7   8080               sta    SPIBASE+spicmd                     FIO Simulation Structure             06:07:07  Jan 10, 2024   Page   24System     RESET Code                                                      E074 C6   08                 ldb    #8  E076                         trfr   B,E  E076 1F                      fcb    $1f  E077 9E                      fcb    B<<4|E                               endm  E078 BD   EE80               jsr    GSRSR >E07B 7E   E06F               jmp    myloop                                           >E07E 17   0053     20        lbsr   stbinit   go initialize system memory                       E081 10FE 049C     30        lds    tsktab    Task 0 Stack  E085 32   E9 00D7            leas   TSKSIZ,s  E089 17   0152               lbsr   fio_reset  E08C 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E08F               fio_start  E08F 7E   E4AC     10        jmp    rsched                                          FIO Simulation Structure             06:07:07  Jan 10, 2024   Page   25ROM        Interrupt Fielders                                              E092 8D   26       rom_nmi   bsr    rom_int  E094 4E 4D 49 00             fcc    'NMI',0  E098 8D   20       rom_firq  bsr    rom_int  E09A 46 49 52 51             fcc    'FIRQ',0  E09F 8D   19       rom_swi   bsr    rom_int  E0A1 53 57 49 00             fcc    'SWI',0  E0A5 8D   13       rom_swi2  bsr    rom_int  E0A7 53 57 49 32             fcc    'SWI2',0  E0AC 8D   0C       rom_swi3  bsr    rom_int  E0AE 53 57 49 33             fcc    'SWI3',0  E0B3 8D   05       rom_trap  bsr    rom_int  E0B5 54 52 41 50             fcc    'TRAP',0                       E0BA 8E   E0C7     rom_int   ldx    #ROM_ERR  E0BD BD   F1C2               jsr    DB_pdata  E0C0 35   10                 puls   x  E0C2 BD   F1C2               jsr    DB_pdata  E0C5 20   FE       rom_bad   bra    *                     *  E0C7 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             06:07:07  Jan 10, 2024   Page   26Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0D4 8E   0000     stbinit   ldx    #0        s  clear all variables  E0D7 CC   0000               ldd    #0  E0DA ED   81       10        std    ,x++  E0DC 8C   3EFF               cmpx   #end_vars done yet?  E0DF 25   F9                 blo    10b                       E0E1 CC   0D04               ldd    #DEBUG  E0E4 FD   0401               std    DB_cntrl                                            E0E7 B6   E05E               lda    max_trn   shared with main CPU  E0EA 48                      asla             *2  E0EB 8B   04                 adda   #4        fixed system tasks  E0ED B7   0459               sta    NUM_TSK                     * >E0F0 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0F3 8E   040E     15        ldx    #SI_Q     set queue empty  E0F6 BF   0444               stx    SI_Q_ptr  E0F9 8E   0447               ldx    #int_buf  reset message in pointer  E0FC BF   0453               stx    int_ptr                      >E0FF 17   0061     17        lbsr   tskinit   initialize tasks                       E102 17   10DB     18        lbsr   DB_config display configuration  E105 39                      rts                                          *                     * Set up system tables                     *  E106               set_tables  E106 108E 04A0               ldy    #dev_tab  E10A 8E   E5DF               ldx    #DEV_SOCK  E10D AF   22                 stx    dev_type,y  E10F AD   98 2A              jsr    [D_init,x]                                          * Compute configuration  E112 CE   E1CD               ldu    #mod_tbl  tables with module refs  E115 AE   C4       12        ldx    mod_type,u  E117 27   09                 beq    20f       jump if end of module table  E119 AD   98 2C              jsr    [D_test,x] check for device  E11C 25   04                 bcs    15f       jump if found  E11E 33   44                 leau   MOD_SIZE,u  E120 20   F3                 bra    12b                     *FIO Simulation Structure             06:07:08  Jan 10, 2024   Page   27Table      Initialization                             E122               15  E122               20                     * -- All done setting up configuration                       E122 CC   04C6               ldd    #SYS_TABS start of system tables  E125 1F   03                 tfr    d,u                     * -- Task table  E127 86   D7                 lda    #TSKSIZ  E129 F6   0459               ldb    NUM_TSK  E12C 3D                      mul  E12D FF   049C               stu    tsktab >E130 17   0022               lbsr   sto_chk   check for system table space overflow  E133 FF   049E               stu    tskend                     *                     * -- All done  E136 39            90        rts                     *  E137 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E14E 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E155 33   CB       sto_chk   leau   d,u       compute new end pointer  E157 1183 3EFF               cmpu   #end_vars overflow?  E15B 22   03                 bhi    10f       yes - return error  E15D 1C   FE                 clc              no         - return OK  E15F 39                      rts  E160 1A   01       10        sec              ..         bad owies  E162 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E163 BE   049C     tskinit   ldx    tsktab  E166 BF   0409               stx    utask  E169 F6   0459               ldb    NUM_TSK   # tasks in system  E16C 34   04                 pshs   b  E16E 10BE 049C               ldy    tsktab    task 1  E172 31   A9 00D7            leay   TSKSIZ,y  E176               10                                            E176 86   04       11        lda    #TFREE    mark all tasks free  E178 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             06:07:08  Jan 10, 2024   Page   28Table      Initialization                             E17B 26   02                 bne    15f  E17D 86   05                 lda    #TSYS     the system task is never free  E17F A7   04       15        sta    tsstat,x  E181 86   FF                 lda    #$FF      not associated with a terminal  E183 A7   0D                 sta    tsdev,x  E185 A7   0E                 sta    tsdev+1,x  E187 33   89 00D7            leau   TSKSIZ,x  initialize stack  E18B CC   E32B               ldd    #IO_han  E18E 34   20                 pshs   y  E190 AC   E1                 cmpx   ,s++      task 1?  E192 26   03                 bne    20f       no - normal I/O handling task  E194 CC   E3FB               ldd    #SI_HAN   yes - special terminal interrupt handling task  E197 36   06       20        pshu   d  E199 EF   88 11              stu    usp,x  E19C EF   88 13              stu    umark0,x  E19F 30   89 00D7            leax   TSKSIZ,x  E1A3 6A   E4                 dec    0,s       done?  E1A5 26   CF                 bne    10b  E1A7 32   61                 leas   1,s       clean up stack  E1A9 CC   0000               ldd    #0        nothing running or sleeping  E1AC FD   0403               std    runlst  E1AF FD   0405               std    slplst  E1B2 FD   0407               std    slplst+tsslnk  E1B5 30   A4                 leax   0,y       start interrupt handling task  E1B7 BD   E552               jsr    makrdy  E1BA 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1BB 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1BD B7   8400               sta    tim_base  interrupt enable  E1C0 39                      rts                                                         E1C1  timerack  equ    *  E1C1 86   01                 lda    #1  E1C3 B7   8401               sta    tim_rest  reset interrupt  E1C6 39                      rts                       E1C7 B6   8400     timerchk  lda    tim_base  E1CA 84   80                 anda   #%10000000 interrupt flag  E1CC 39                      rtsFIO Simulation Structure             06:07:08  Jan 10, 2024   Page   29IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1CD  mod_tbl   equ    *  E1CD E5DF E1D3               fdb    DEV_SOCK,WZ5_name  E1D1 0000                    fdb    0                     *  E1D3 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             06:07:08  Jan 10, 2024   Page   30FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     *  E1DE               fio_reset                     * when here, all storage locations have been erased already                     *  E1DE 8E   0000               ldx    #0  E1E1 9F   14                 stx    fifo_get  set Q pointers  E1E3 9F   16                 stx    fifo_put  E1E5 8E   0370               ldx    #WZNETOF  E1E8 9F   1A                 stx    fifo_us1  E1EA 8E   0220               ldx    #WZSKOFF  E1ED 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1EF 86   08                 lda    #8  E1F1 A7   84       01        sta    wzenum,x  E1F3 30   88 2A              leax   WZSIZE,x  to next  E1F6 4A                      deca  E1F7 26   F8                 bne    01b                     *  E1F9 BE   E05C               ldx    fio_dsz  E1FC 30   1E                 leax   -2,x      one from top  E1FE CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E201 C6   FF       fio_wait  ldb    #255      Spin counter                     *  E203               00  E203 6D   84                 tst    0,x       fio_cpuF  E205 27   16                 beq    10f                     *  E207 5A                      decb  E208 26   F9                 bne    00b       jump back if not ready                     *  E20A 33   5F                 leau   -1,u  E20C 1183 0000               cmpu   #0  E210 26   EF                 bne    fio_wait  E212 8E   E03D               ldx    #CPU_down  E215 17   0FAA               lbsr   DB_pdata  E218 17   0FA1               lbsr   DB_main  E21B 20   C1                 bra    fio_reset                     * reset OK  E21D 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     *  E21E BE   0453     fio_irq   ldx    int_ptr   input message pointer  E221 96   00                 lda    cpu_fio   move REQUEST  E223 A7   80                 sta    ,x+FIO Simulation Structure             06:07:09  Jan 10, 2024   Page   31FIO        Simulation Routines                        E225 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E227 ED   81                 std    ,x++  E229 96   03                 lda    cpu_fio2  specific DATA  E22B A7   80                 sta    ,x+  E22D DC   04                 ldd    cpu_fio3  device major/minor  E22F ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E231 FE   E05C               ldu    fio_dsz  E234 33   5F                 leau   -1,u  E236 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E238 BF   0453               stx    int_ptr   update pointer  E23B 108E 0447               ldy    #int_buf  get message from buffer  E23F A6   A4                 lda    0,y       -- Send interrupt command?  E241 81   38                 cmpa   #S_INTRPT  E243 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E245 10BF 0453               sty    int_ptr   reset pointer  E249 E6   23                 ldb    3,y       signal  E24B AE   24                 ldx    4,y       SOCK reference                     *  E24D BD   E62D               jsr    sdev_sig  send device signal  E250 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E252 BE   049C     30        ldx    tsktab    search for an available task  E255 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E258 A6   04       32        lda    tsstat,x  E25A 81   04                 cmpa   #TFREE    looking for a "free" task  E25C 27   0E                 beq    40f                     *  E25E 30   89 00D7            leax   TSKSIZ,x  E262 5A                      decb  E263 26   F3                 bne    32b                     *  E265 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E267 BD   E288               jsr    fio_msg  E26A 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E26C 108E 0447     40        ldy    #int_buf  get message from buffer  E270 10BF 0453               sty    int_ptr   reset pointer  E274 E6   A0                 ldb    ,y+       command byte  REQUESTFIO Simulation Structure             06:07:09  Jan 10, 2024   Page   32FIO        Simulation Routines                        E276 E7   09                 stb    tscmd,x   save for task  E278 EC   A1                 ldd    ,y++      sequence #    task ID  E27A ED   0A                 std    tsseq,x  E27C E6   A0                 ldb    ,y+       command specific DATA  E27E E7   0C                 stb    tstval,x  E280 EC   A1                 ldd    ,y++      associate with terminal major/minor  E282 ED   0D                 std    tsdev,x  E284 BD   E552               jsr    makrdy    make task ready to run                     *  E287 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  E288 34   54       fio_msg   pshs   b,x,u     save register  E28A FE   E05C               ldu    fio_dsz  E28D 33   5E                 leau   -2,u      one off top  E28F D7   09                 stb    fio_cpu   set up mailbox value                       E291 86   FF       5         lda    #$FF      tell CPU mailbox full  E293 A7   C4                 sta    0,u       fio_cpuF  E295 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  E298 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E29A 27   06                 beq    20f       jump if consumed                     *  E29C 30   1F                 leax   -1,x      time-out yet?  E29E 26   F8                 bne    10b                     *  E2A0 20   F3                 bra    05b       try again                     *  E2A2 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E2A4 34   16       fio_response pshs d,x  E2A6 8D   18                 bsr    FIO_get   access FIO  E2A8 BE   0409               ldx    utask     task ID  E2AB EC   0A                 ldd    tsseq,x  E2AD DD   0A                 std    fio_cpu1  E2AF EC   0D                 ldd    tsdev,x   device info  E2B1 DD   0D                 std    fio_cpu3FIO Simulation Structure             06:07:09  Jan 10, 2024   Page   33FIO        Simulation Routines                        E2B3 A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2B5 97   0C                 sta    fio_cpu2  E2B7 E6   61                 ldb    1,s       is RESPONSE code >E2B9 BD   E288               jsr    fio_msg  E2BC 8D   17                 bsr    FIO_rel   release FIO  E2BE 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2C0 34   76       FIO_get   pshs   d,x,y,u   save registers  E2C2 108E 0446     10        ldy    #FIO_lock is the device locked  E2C6 6D   A4                 tst    0,y  E2C8 27   07                 beq    20f       no - go get it                     *  E2CA C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2CC BD   E58C               jsr    sleep  E2CF 20   F1                 bra    10b       try again                     *  E2D1 6C   A4       20        inc    0,y       mark in use  E2D3 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2D5 34   76       FIO_rel   pshs   d,x,y,u  E2D7 108E 0446               ldy    #FIO_lock  E2DB 6F   A4                 clr    0,y  E2DD BD   E568               jsr    wakeup  E2E0 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2E2 34   04       FIFOgeta  pshs   b  E2E4 8D   05                 bsr    FIFO_get  E2E6 35   02                 puls   a  E2E8 1E   89                 exg    a,b  E2EA 39                      rts                     *  E2EB 34   12       FIFO_get  pshs   a,x  E2ED DC   12                 ldd    fifo_cnt  any data?  E2EF 27   15                 beq    99f       no - exit                     *  E2F1                         decd   yes       - adjust count  E2F1 104A                    fdb    $104a                               endm  E2F3 DD   12                 std    fifo_cnt  E2F5 9E   14                 ldx    fifo_get  get consumer pointer  E2F7 E6   88 20              ldb    fifo,x    fetch byteFIO Simulation Structure             06:07:09  Jan 10, 2024   Page   34FIO        Simulation Routines                        E2FA 30   01                 leax   1,x       bump pointer  E2FC BC   E05A               cmpx   fio_fsz   end of fifo?  E2FF 26   03                 bne    10f                     *  E301 8E   0000               ldx    #0        reset pointer                     *  E304 9F   14       10        stx    fifo_get                     *  E306 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E308 34   04       FIFOputa  pshs   b  E30A 1F   89                 tfr    a,b  E30C 8D   02                 bsr    FIFO_put  E30E 35   84                 puls   b,pc                     *  E310 34   16       FIFO_put  pshs   d,x  E312 9E   16                 ldx    fifo_put  get consumer pointer  E314 E7   88 20              stb    fifo,x    store byte  E317 30   01                 leax   1,x       bump pointer  E319 BC   E05A               cmpx   fio_fsz   end of FIFO?  E31C 26   03                 bne    10f                     *  E31E 8E   0000               ldx    #0        reset pointer  E321 9F   16       10        stx    fifo_put                     *  E323 DC   12                 ldd    fifo_cnt  E325                         incd  E325 104C                    fdb    $104c                               endm  E327 DD   12                 std    fifo_cnt  E329 35   96       99        puls   d,x,pcFIO Simulation Structure             06:07:10  Jan 10, 2024   Page   35IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E32B               IO_han    seti   block     interrupts  E32B 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E32D               10        clri  E32D 1C   AF                 andcc  #!(FF|IF)                               endm  E32F BE   0409               ldx    utask     get task control block address  E332 A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E334 44                      lsra             isolate    command  E335 44                      lsra  E336 44                      lsra                     **        lsra  E337 81   15                 cmpa   #MAX_S_NUM  E339 22   69                 bhi    bad_cmd                     *  E33B 48                      lsla             --   word index on command  E33C 34   10                 pshs   x  E33E 8E   04A0               ldx    #dev_tab  E341 AE   02                 ldx    dev_type,x get handler table address  E343 10AE 86                 ldy    a,x       get processor address  E346 35   10                 puls   x  E348 34   20                 pshs   y  E34A 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E34D 27   0A                 beq    05f       else it is target ponter  E34F 10AF E4                 sty    0,s  E352 108E 0000               ldy    #0  E356 10AF 0F                 sty    tsagin,x  reset pointer  E359 35   20       05        puls   y         change address  E35B 4F                      clra                     *  E35C 8E   E389               ldx    #IO_end   interrupt handler address  E35F 34   10                 pshs   x  E361 BE   0409               ldx    utask     task pointer  E364 10EF 88 15              sts    umark1,x  E368 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             06:07:10  Jan 10, 2024   Page   36IO         Command Handler                            E36A 1E   03                 exg    d,u  E36C 84   07                 anda   #%00000111 mask off address bits  E36E 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E370 AD   A4                 jsr    0,y       perform operation & return status  E372 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E374 BE   0409               ldx    utask     restore task pointer  E377 108C FFFF               cmpy   #$ffff  E37B 26   09                 bne    20f                     * task is NOT done yet  E37D 86   BA                 lda    #POLPRI  E37F A7   05                 sta    tsprir,x  at lower prio  E381 BD   E4A6               jsr    change  E384 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E386 BD   E2A4     20        jsr    fio_response                     *                     * task is done                     *  E389               IO_end    seti   mask      interrupts  E389 1A   50                 orcc   #FF|IF                               endm  E38B BE   0409               ldx    utask     restore task control block address  E38E A7   0C                 sta    tstval,x  remember transaction value sent  E390 E7   09                 stb    tscmd,x   and command response  E392 86   04                 lda    #TFREE    mark task "terminated & free"  E394 A7   04                 sta    tsstat,x  E396 86   FF                 lda    #$FF      disassociate from any terminal  E398 A7   0D                 sta    tsdev,x  E39A A7   0E                 sta    tsdev+1,x  E39C 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E39E BD   E4AC     90        jsr    rsched    run other tasks >E3A1 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E3A4               bad_cmdFIO Simulation Structure             06:07:10  Jan 10, 2024   Page   37IO         Command Handler                            E3A4 C6   81                 ldb    #E_BADCMD error code  E3A6 39                      rtsFIO Simulation Structure             06:07:10  Jan 10, 2024   Page   38Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3A7  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3A7 BE   E05C     10        ldx    fio_dsz  E3AA 30   1F                 leax   -1,x  E3AC A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3AE 27   03                 beq    99f       no - move on  E3B0 BD   E21E               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3B3 3B            99        rti              return from interrupt                     *  E3B4 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3BF 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             06:07:10  Jan 10, 2024   Page   39Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3CC 34   36       int_all   pshs   d,x,y  E3CE F6   0459               ldb    NUM_TSK  E3D1 C0   02                 subb   #2  E3D3 34   04                 pshs   b  E3D5 BE   049C               ldx    tsktab  E3D8 30   89 01AE            leax   2*TSKSIZ,x                     *  E3DC EC   61       10        ldd    1,s  E3DE 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3E1 26   0C                 bne    20f                     *  E3E3 BC   0409               cmpx   utask     make sure I don't get blown away  E3E6 27   07                 beq    20f                     *  E3E8 34   16                 pshs   d,x  E3EA BD   E5C1               jsr    xmtint    interrupt task  E3ED 35   16                 puls   d,x                     *  E3EF 30   89 00D7  20        leax   TSKSIZ,x  next task  E3F3 6A   E4                 dec    0,s       more tasks?  E3F5 26   E5                 bne    10b  E3F7 32   61                 leas   1,s                     *  E3F9 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             06:07:11  Jan 10, 2024   Page   40Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E3FB 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E3FF                         seti  E3FF 1A   50                 orcc   #FF|IF                               endm  E401 FE   0444               ldu    SI_Q_ptr  get current Q ptr  E404 1183 040E               cmpu   #SI_Q     anything in Q?  E408 26   07                 bne    20f       yes - go process it                     *  E40A C6   D8                 ldb    #SIQPRI   wait for something to do  E40C BD   E58C               jsr    sleep  E40F 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E411 E6   C2       20        ldb    0,-u      B = Interrupt #  E413 34   04                 pshs   b  E415 EC   C3                 ldd    0,--u     A = Device #  E417 34   06                 pshs   d  E419 EC   C3                 ldd    0,--u     task ID  E41B 34   06                 pshs   d         save registers  E41D FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E420 E6   63                 ldb    3,s       set up to flush all input for this terminal                     **!       jsr     ttftab     X=ttytab, U=device table                     **!       jsr     flushi  E422                         clri   allow     interrupts  E422 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E424 BD   E2C0               jsr    FIO_get   get access to FIO  E427 EC   E1                 ldd    0,s++     task ID  E429 DD   0A                 std    fio_cpu1  E42B EC   E1                 ldd    ,s++      terminal #  E42D DD   0D                 std    fio_cpu3  terminal  E42F E6   E0                 ldb    ,s+       interrupt #  E431 D7   0C                 stb    fio_cpu2  signal  E433 C6   07                 ldb    #R_INTRPT  E435 BD   E288               jsr    fio_msg   send interrupt message  E438 BD   E2D5               jsr    FIO_rel   release access to FIO  E43B 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = SOCK address                     *   jsr send_SIFIO Simulation Structure             06:07:11  Jan 10, 2024   Page   41Terminal   Interrupt Handling Task                                       *  E43D 34   76       send_SI   pshs   d,x,y,u   save registers  E43F FE   0444               ldu    SI_Q_ptr  get Q head  E442 1183 0444               cmpu   #SI_Q_ptr check for overflow  E446 24   0D                 bhs    90f       exit if so - sorry                     *  E448 34   04                 pshs   b                     **!       ldd     ttask,x    task id  E44A ED   C1                 std    0,u++                     **!       ldd     tdevic,x   get terminal #  E44C ED   C1                 std    0,u++     place value in Queue  E44E 35   04                 puls   b  E450 E7   C0                 stb    0,u+  E452 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E455 108E 040E     90        ldy    #SI_Q     wake up Queue server  E459 BD   E568               jsr    wakeup  E45C 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             06:07:11  Jan 10, 2024   Page   42History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E45E 34   16       H_cpu     pshs   d,x  E460 BE   049A               ldx    hstptr    get history queue pointer  E463 96   00                 lda    cpu_fio  E465 A7   84                 sta    hst_cmd,x  E467 96   01                 lda    cpu_fio1  E469 A7   01                 sta    hst_seq,x  E46B 96   04                 lda    cpu_fio3  E46D A7   02                 sta    hst_tty,x  E46F 96   03                 lda    cpu_fio2  E471 A7   03                 sta    hst_val,x  E473 30   04                 leax   HRECSIZ,x  E475 8C   049A               cmpx   #hstptr   end of Queue?  E478 25   03                 blo    10f  E47A 8E   045A               ldx    #hstbuf  E47D BF   049A     10        stx    hstptr  E480 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E482 34   16       H_fio     pshs   d,x  E484 BE   049A               ldx    hstptr    get history queue pointer  E487 96   09                 lda    fio_cpu  E489 A7   84                 sta    hst_cmd,x  E48B 96   0A                 lda    fio_cpu1  E48D A7   01                 sta    hst_seq,x  E48F 96   0D                 lda    fio_cpu3  E491 A7   02                 sta    hst_tty,x  E493 96   0C                 lda    fio_cpu2  E495 A7   03                 sta    hst_val,x  E497 30   04                 leax   HRECSIZ,x  E499 8C   049A               cmpx   #hstptr   end of Queue?  E49C 25   03                 blo    10f  E49E 8E   045A               ldx    #hstbuf  E4A1 BF   049A     10        stx    hstptr  E4A4 35   96                 puls   d,x,pcFIO Simulation Structure             06:07:11  Jan 10, 2024   Page   43Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4A6 BE   0409     change    ldx    utask     point to task table entry >E4A9 17   006D               lbsr   putrun    put on ready list                     *  E4AC               rsched    seti   mask      interrupts  E4AC 1A   50                 orcc   #FF|IF                               endm  E4AE BE   0409               ldx    utask     point to current task  E4B1 10EF 88 13              sts    umark0,x  save stack pointers  E4B5 BE   049C               ldx    tsktab    point to task table  E4B8 8D   23                 bsr    swtchu    switch users  E4BA 7F   040D               clr    idle      reset idle/running flag                     *  E4BD 7F   040C     rsche2    clr    chproc    reset change flag >E4C0 17   0025               lbsr   getjob    get a new task  E4C3 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4C5 86   7F       05        lda    #127      set higheset priority  E4C7 B7   040B               sta    jobpri    set as current  E4CA                         clri   clear     interrupts  E4CA 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4CC 12                      nop  E4CD                         seti  E4CD 1A   50                 orcc   #FF|IF                               endm  E4CF 20   EC                 bra    rsche2    loop til find a ready one                     *  E4D1 F7   040B     rsche3    stb    jobpri    set new priority  E4D4 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             06:07:12  Jan 10, 2024   Page   44Scheduler  routines                                   E4D6 BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4D9 CC   0001               ldd    #1        return 1 to new task  E4DC 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4DD 35   20       swtchu    puls   y         get return address  E4DF BF   0409               stx    utask     set up new running task  E4E2 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4E6 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             06:07:12  Jan 10, 2024   Page   45Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4E8 5F            getjob    clrb             clear      flag  E4E9 BE   0403               ldx    runlst    point to head of list  E4EC 27   1F                 beq    getjo6    empty list?                     *  E4EE A6   04       getjo1    lda    tsstat,x  get status byte  E4F0 81   01                 cmpa   #TRUN     is it in run state?  E4F2 26   1B                 bne    getjo8                     *  E4F4 5D                      tstb             first      in list?  E4F5 27   06                 beq    getjo2                     *  E4F7 EC   84                 ldd    tslink,x  remove from list  E4F9 ED   A4                 std    tslink,y  E4FB 20   07                 bra    getjo4                     *  E4FD 10AE 84       getjo2    ldy    tslink,x  remove from list head  E500 10BF 0403               sty    runlst    set new head                     *  E504 E6   05       getjo4    ldb    tsprir,x  get priority  E506 6F   84                 clr    tslink,x  zero out link  E508 6F   01                 clr    tslink+1,x so not run list  E50A 86   FF                 lda    #$ff      set ne status  E50C 39                      rts              return                         *  E50D 4F            getjo6    clra             set        eq status  E50E 39                      rts                     *  E50F 1F   12       getjo8    tfr    x,y       save old pos  E511 AE   84                 ldx    tslink,x  follow link  E513 27   F8                 beq    getjo6                     *  E515 C6   01                 ldb    #1        set flag  E517 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             06:07:12  Jan 10, 2024   Page   46Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E519 34   01       putrun    pshs   cc        save status  E51B                         seti   mask      interrupts  E51B 1A   50                 orcc   #FF|IF                               endm  E51D 10BE 0403               ldy    runlst    point to head  E521 26   0A                 bne    putru2  E523 BF   0403               stx    runlst    set new head                     *  E526 CC   0000     putru1    ldd    #0        set last link  E529 ED   84                 std    tslink,x  E52B 35   81                 puls   cc,pc     return                     *  E52D E6   05       putru2    ldb    tsprir,x  get priority  E52F E1   25                 cmpb   tsprir,y  look for correct prior slot  E531 2F   08                 ble    putru4                     *  E533 FC   0403               ldd    runlst  E536 BF   0403               stx    runlst    set new head  E539 20   0F                 bra    putru5    link in rest                     *  E53B 1F   23       putru4    tfr    y,u       save last look  E53D 10AE A4                 ldy    tslink,y  follow link  E540 27   0C                 beq    putru6                     *  E542 E1   25                 cmpb   tsprir,y  check priority  E544 2F   F5                 ble    putru4                     *  E546 EC   C4                 ldd    tslink,u  link into list here  E548 AF   C4                 stx    tslink,u                     *  E54A ED   84       putru5    std    tslink,x  E54C 35   81                 puls   cc,pc     return                     *  E54E AF   C4       putru6    stx    tslink,u  E550 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             06:07:12  Jan 10, 2024   Page   47Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E552 86   01       makrdy    lda    #TRUN     set status  E554 A7   04                 sta    tsstat,x  E556 CC   0000               ldd    #0        clear events flag  E559 ED   06                 std    tsevnt,x  E55B 8D   BC                 bsr    putrun    put on ready list  E55D E6   05                 ldb    tsprir,x  get priority  E55F F1   040B               cmpb   jobpri    higher than current?  E562 2F   03                 ble    makrd6                     *  E564 7C   040C               inc    chproc    set change flag                     *  E567 39            makrd6    rts              return    FIO Simulation Structure             06:07:13  Jan 10, 2024   Page   48Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E568 34   57       wakeup    pshs   cc,d,x,u  save registers  E56A                         seti   mask      interupts  E56A 1A   50                 orcc   #FF|IF                               endm  E56C CE   0405               ldu    #slplst  E56F AE   42                 ldx    tsslnk,u  point to sleep list  E571 27   0B                 beq    wakeu4                     *  E573 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E576 27   08                 beq    wakeu5  E578 33   84                 leau   0,x       mark this entry                     *  E57A AE   02       wakeu3    ldx    tsslnk,x  follow chain  E57C 26   F5                 bne    wakeu2    end of list?                     *  E57E 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E580 34   70       wakeu5    pshs   x,y,u     save registers  E582 EC   02                 ldd    tsslnk,x  remove from list  E584 ED   42                 std    tsslnk,u  E586 8D   CA                 bsr    makrdy    put on ready list  E588 35   70                 puls   u,x,y  E58A 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             06:07:13  Jan 10, 2024   Page   49Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E58C 34   51       sleep     pshs   cc,x,u    save registers  E58E BE   0409               ldx    utask     point to task  E591 6D   08                 tst    tssgnl,x  any signals waiting?  E593 26   1F                 bne    sleep7                     *  E595                         seti   mask      ints  E595 1A   50                 orcc   #FF|IF                               endm  E597 E7   05                 stb    tsprir,x  set priority  E599 10AF 06                 sty    tsevnt,x  set event  E59C 86   02                 lda    #TSLEEP   set status  E59E A7   04                 sta    tsstat,x  E5A0 FC   0407               ldd    slplst+tsslnk get head of list  E5A3 ED   02                 std    tsslnk,x  set new link  E5A5 BF   0407               stx    slplst+tsslnk set new head  E5A8 17   FF01               lbsr   rsched    reschedule cpu                       E5AB BE   0409     20        ldx    utask     get task entry  E5AE 6D   08                 tst    tssgnl,x  any signals waiting?  E5B0 26   02                 bne    sleep7                     *  E5B2 35   D1                 puls   cc,x,u,pc return                     *  E5B4 BE   0409     sleep7    ldx    utask     reset signal  E5B7 6F   08                 clr    tssgnl,x  E5B9 EC   88 15              ldd    umark1,x  stack reset point  E5BC 35   51                 puls   cc,x,u    reset cc and registers  E5BE 1F   04                 tfr    d,s       change stacks  E5C0 39                      rts              returnFIO Simulation Structure             06:07:13  Jan 10, 2024   Page   50Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5C1 34   76       xmtint    pshs   d,x,y,u   save registers  E5C3 A6   04                 lda    tsstat,x  get task state  E5C5 81   01                 cmpa   #TRUN     running?  E5C7 26   06                 bne    10f       no - try something else                     *  E5C9 86   01                 lda    #1        set signal  E5CB A7   08                 sta    tssgnl,x  E5CD 20   0E                 bra    99f       exit                     *  E5CF 81   02       10        cmpa   #TSLEEP   task sleeping?  E5D1 26   0A                 bne    99f       no - can't send interrupt                     *  E5D3 86   01                 lda    #1        set signal  E5D5 A7   08                 sta    tssgnl,x  E5D7 10AE 06                 ldy    tsevnt,x  wake task up >E5DA 17   FF8B               lbsr   wakeup                     *  E5DD 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             06:07:13  Jan 10, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5DF               DEV_SOCK  E5DF E3A4                    fdb    bad_cmd   0  E5E1 E665                    fdb    skopen    S_OPEN    1 open socket  E5E3 E6DE                    fdb    skclos    S_CLOSE   2 close socket  E5E5 E8D9                    fdb    skreqwr   S_RQWR    3 request write to socket  E5E7 E91A                    fdb    sksend    S_SEND    4 write data to socket  E5E9 E86F                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5EB E8B7                    fdb    skrecv    S_RECV    6 read data from socket  E5ED EB4C                    fdb    skintrp   S_INTRPT  7 interrupt socket  E5EF E72B                    fdb    skconn    S_CONNECT 8 connect socket  E5F1 E7C1                    fdb    skbind    S_BIND    9 bind socket  E5F3 E806                    fdb    sklist    S_LISTEN  10 listen on socket  E5F5 E838                    fdb    skacpt    S_ACCEPT  11 accept connection  E5F7 EB4C                    fdb    skdisc    S_DISCON  12 disconnect socket  E5F9 EB4C                    fdb    sksmac    S_SNDMAC  13 send mac  E5FB EB4C                    fdb    skskep    S_SNDKEP  14 send keep alive  E5FD EA94                    fdb    skspcl    S_SPCL    15 special command  E5FF E93C                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E601 E9A1                    fdb    skurrd    S_RREAD   17 read data readfrom  E603 E9CB                    fdb    skurwt    S_WRQSTO  18 request write sendto  E605 EA5E                    fdb    skusnt    S_WSNDTO  19 write data sendto  E607 EA15                    fdb    skusnm    S_WSNDTM  20 write data send more                     *  E609 E62C                    fdb    skinthan  16 socket interrupt handler  E60B E60F                    fdb    skinit    17 socket initialization  E60D E629                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                          *                     * do everything to init the system                     *               E60F  skinit    equ    *  E60F BD   EB53               jsr    spinit    set SPI  E612 C6   80                 ldb    #%10000000 software reset  E614 BD   EC23               jsr    PCRMR  E617 BD   EC14     01        jsr    GCRMR  E61A 5D                      tstb  E61B 2B   FA                 bmi    01bFIO Simulation Structure             06:07:14  Jan 10, 2024   Page   52wz socket interface routines                          E61D C6   78                 ldb    #%01111000 power up  E61F BD   EE01               jsr    PCRPHY    set the PHY part  E622 CC   8000               ldd    #32768  E625 FD   0457               std    wzanyp    set value for Source port  E628 39                      rts                                          *                     * test if device is present                     *  E629 1A   01       sktest    sec              yes  E62B 39                      rts                                          *                     * skinthan, fromddevice table                     *               E62C  skinthan  equ    *  E62C 39                      rts                                          *                     * device signal handle                     *               E62D  sdev_sig  equ    *  E62D 39                      rts                                          *                     * get a new source port                     *  E62E FC   0457     sknewp    ldd    wzanyp    else create one  E631                         incd  E631 104C                    fdb    $104c                               endm  E633 1083 FFF0               cmpd   #$FFF0  E637 25   03                 blo    03f  E639 CC   8000               ldd    #$8000  E63C FD   0457     03        std    wzanyp  E63F 39                      rts                                                               *                     * wzdevt, device test, return Z if running, NZ if not                     *  E640 34   22       wzdevt    pshs   a,y  E642 109E 1A                 ldy    fifo_us1  device info  E645 A6   A8 12              lda    wzdsta,y  E648 81   FF                 cmpa   #$ff      open  E64A 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info                     *  E64C A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E64E                         trfr   A,EFIO Simulation Structure             06:07:14  Jan 10, 2024   Page   53wz socket interface routines                          E64E 1F                      fcb    $1f  E64F 8E                      fcb    A<<4|E                               endm  E650 6F   47                 clr    wzerr,u   init result  E652 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E653 34   06       skctcp    pshs   d  E655 EC   C8 26              ldd    wztype,u  SOCK_STREAM  E658 C1   01                 cmpb   #SK_STRM  is TCP  E65A 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E65C 34   06       skcudp    pshs   d  E65E EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E661 C1   02                 cmpb   #SK_DGRM  is UDP  E663 35   86                 puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E665  skopen    equ    * >E665 BD   E64C               jsr    skfres                     *                     * check if DEVICE is active                     * >E668 BD   E640               jsr    wzdevt  E66B 27   06                 beq    11f  E66D BD   E6F9               jsr    skclin    NO, close internal and don't start >E670 16   003D     04        lbra   skoper1                     *                     * retry, we do all things                     *  E673 A6   42       11        lda    wzfsta,u  check if allocated by OS  E675 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  E677 6F   43                 clr    wzflg,u   erase flags  E679 EC   C8 24              ldd    wzfaml,u  E67C C1   02                 cmpb   #AF_INETFIO Simulation Structure             06:07:14  Jan 10, 2024   Page   54wz socket interface routines                          E67E 26   F0                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E680 EC   C8 26              ldd    wztype,u  E683 C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E685 27   10                 beq    01f  E687 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E689 27   08                 beq    21f  E68B C1   03                 cmpb   #SK_RAW   SOCK_RAW  E68D 26   25                 bne    skoper2                     * raw socket  E68F C6   04                 ldb    #%00000100 MACRAW  E691 20   06                 bra    07f                     * dgram  E693 C6   02       21        ldb    #%00000010 UDP  E695 20   02                 bra    07f                     * TCP socket  E697 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E699 BD   EE2E     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E69C C6   01                 ldb    #WCOPEN   open the device  E69E E7   44                 stb    wzcmnd,u  copy command  E6A0 BD   EE4C               jsr    PSRCR                     *                     * interrupts not expected                     *  E6A3 BD   EE80     21        jsr    GSRSR     get status  E6A6 E7   45                 stb    wzstat,u  E6A8 C1   00                 cmpb   #WSCLSD  E6AA 27   F7                 beq    21b       wait until updated                     *  E6AC 4F                      clra  E6AD C6   01                 ldb    #R_OPEN   response  E6AF 39            99        rts                     *  E6B0 86   01       skoper1   lda    #1        device not initialized  E6B2 20   02                 bra    12f  E6B4 86   02       skoper2   lda    #2        type error  E6B6 C6   C0       12        ldb    #E_SOCKET  E6B8 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E6BA 34   10       num2bt    pshs   x  E6BC 8E   E6D5               ldx    #bittab  E6BF 3A                      abxFIO Simulation Structure             06:07:14  Jan 10, 2024   Page   55wz socket interface routines                          E6C0 E6   84                 ldb    0,x  E6C2 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E6C4 34   10       bt2num    pshs   x  E6C6 8E   E6D5               ldx    #bittab  E6C9 6F   E2                 clr    0,-s  E6CB E1   80       02        cmpb   0,x+  E6CD 27   04                 beq    01f  E6CF 6C   E4                 inc    0,s  E6D1 20   F8                 bra    02b  E6D3 35   94       01        puls   b,x,pc                                          * table  E6D5 00            bittab    fcb    0  E6D6 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E6DA 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                          ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E6DE  skclos    equ    *  E6DE BD   E64C               jsr    skfres  E6E1 C6   08                 ldb    #WCDISC  E6E3 E7   44                 stb    wzcmnd,u  E6E5 BD   EE4C               jsr    PSRCR     send disconnect                     *  E6E8 8D   0F                 bsr    skclin  E6EA                         clrd  E6EA 104F                    fdb    $104f                               endm  E6EC ED   C8 24              std    wzfaml,u  E6EF ED   C8 26              std    wztype,u  E6F2 ED   C8 28              std    wzprot,u                     *  E6F5 4F                      clra  E6F6 C6   02                 ldb    #R_CLOSE  response  E6F8 39                      rts                                          *                     * wzclin, close interal                     *  E6F9 34   06       skclin    pshs   d  E6FB C6   10                 ldb    #WCCLOS   do close  E6FD E7   44                 stb    wzcmnd,u  E6FF BD   EE4C               jsr    PSRCR                     *FIO Simulation Structure             06:07:15  Jan 10, 2024   Page   56wz socket interface routines                                             * erase registers in device                     *  E702 CC   0000               ldd    #0  E705 BD   EE9E               jsr    PSRPORT   source port                     *  E708 A6   42                 lda    wzfsta,u  E70A 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E70C A7   42                 sta    wzfsta,u  E70E CC   0000               ldd    #0  E711 ED   48                 std    wzxfer,u  clear remaining size                     *  E713 BD   EE80     91        jsr    GSRSR  E716 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E718 CC   0000               ldd    #0  E71B ED   C8 10              std    wzsprt,u  erase old info  E71E ED   C8 14              std    wzipad,u  E721 ED   C8 16              std    wzipad+2,u  E724 ED   C8 12              std    wzdprt,u  E727 E7   43                 stb    wzflg,u   clear flags                     *  E729 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E72B  skconn    equ    *  E72B BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E72E BD   E640               jsr    wzdevt  E731 27   06                 beq    01f >E733 BD   E6DE               jsr    skclos    NO, don't start >E736 16   007A     02        lbra   skcner4  E739 BD   E653     01        jsr    skctcp    not in tcp, illegal  E73C 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E73E BD   EE80     11        jsr    GSRSR     status  E741 E7   45                 stb    wzstat,u  check if properly setup  E743 C1   13                 cmpb   #WSINIT   SHOULD BE >E745 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E749 EC   C8 14              ldd    wzipad,u  check if dest IP == nullFIO Simulation Structure             06:07:15  Jan 10, 2024   Page   57wz socket interface routines                          E74C                         ordx   wzipad+2,IU  E74C 10AA                    fdb    $10aa  E74E                         doindx wzipad+2,IU  E74E C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E750 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E752 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E755                         incd  E755 104C                    fdb    $104c                               endm  E757 26   07                 bne    01f  E759 EC   C8 16              ldd    wzipad+2,u  E75C                         incd  E75C 104C                    fdb    $104c                               endm  E75E 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E760 EC   C8 12    01        ldd    wzdprt,u  check destination port  E763 27   4A                 beq    skcner5   is not set, error                     *  E765 BD   EF28               jsr    PSRDPOR   set destination port  E768 31   C8 14              leay   wzipad,u  load socket  E76B BD   EF02               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E76E BD   E62E               jsr    sknewp    get new  E771 ED   C8 10              std    wzsprt,u  tell us what you took  E774 BD   EE9E               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E777 C6   04                 ldb    #WCCONN  E779 E7   44                 stb    wzcmnd,u  E77B BD   EE4C               jsr    PSRCR     do connect                     *                     *                     *  E77E BD   E64C     conlb1    jsr    skfres  E781 BD   EE80               jsr    GSRSR     update status  E784 E7   45                 stb    wzstat,u  E786 C1   17                 cmpb   #WSESTB  E788 27   0A                 beq    90f  E78A C1   00                 cmpb   #WSCLSD  E78C 27   16                 beq    skcner2  E78E 108E E77E               ldy    #conlb1  E792 20   04                 bra    polext                     *FIO Simulation Structure             06:07:15  Jan 10, 2024   Page   58wz socket interface routines                          E794 4F            90        clra  E795 C6   08                 ldb    #R_CONNECT  E797 39            99        rts                                          *                     * polexit, Y=where to return                     *  E798 10AF 0F       polext    sty    tsagin,x  here to restart  E79B C6   BA                 ldb    #POLPRI  E79D E7   05                 stb    tsprir,x  E79F 108E FFFF               ldy    #$ffFF  E7A3 39                      rts                       E7A4 C6   0C       skcner2   ldb    #R_DISCON  E7A6 20   EF                 bra    99b                       E7A8 BD   E6F9     skcner6   jsr    skclin    reset open  E7AB 86   0F                 lda    #15       not properly setup  E7AD 20   0E                 bra    09f  E7AF 86   0E       skcner5   lda    #14       destination port not set  E7B1 20   0A                 bra    09f  E7B3 86   0A       skcner4   lda    #10       device not initialized  E7B5 20   06                 bra    09f  E7B7 86   0B       skcner1   lda    #11       IP address invalid  E7B9 20   02                 bra    09f  E7BB 86   0D       skcner3   lda    #13  E7BD C6   C0       09        ldb    #E_SOCKET  E7BF 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E7C1  skbind    equ    *  E7C1 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E7C4 BD   E640               jsr    wzdevt  E7C7 1026 00E7               lbne   rdrqer1  E7CB BD   E653               jsr    skctcp    check TCP  E7CE 27   12                 beq    01f  E7D0 BD   E65C               jsr    skcudp    check UDP >E7D3 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *FIO Simulation Structure             06:07:16  Jan 10, 2024   Page   59wz socket interface routines                                             *  E7D7 BD   EE80               jsr    GSRSR     status  E7DA E7   45                 stb    wzstat,u  E7DC C1   22                 cmpb   #WSUDP    check  E7DE 27   0D                 beq    03f  E7E0 20   07                 bra    04f                       E7E2 BD   EE80     01        jsr    GSRSR     status  E7E5 E7   45                 stb    wzstat,u  E7E7 C1   13                 cmpb   #WSINIT   should be >E7E9 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E7ED BD   E62E     03        jsr    sknewp  E7F0 ED   C8 12              std    wzdprt,u  E7F3 BD   EF28               jsr    PSRDPOR   destination port  E7F6 EC   C8 10              ldd    wzsprt,u  E7F9 BD   EE9E               jsr    PSRPORT   source port                     *  E7FC 31   C8 14              leay   wzipad,u  E7FF BD   EF02               jsr    PSRDIP    source IP                     *  E802 4F                      clra  E803 C6   09                 ldb    #R_BIND  E805 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E806  sklist    equ    *  E806 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E809 BD   E640               jsr    wzdevt  E80C 1026 00A2     02        lbne   rdrqer1  E810 BD   E653               jsr    skctcp  E813 26   F7                 bne    02b                     *                     * go on                     *                     *  E815 BD   EE80               jsr    GSRSR     status  E818 E7   45                 stb    wzstat,u                     *  E81A C1   00                 cmpb   #WSCLSD   closed?FIO Simulation Structure             06:07:16  Jan 10, 2024   Page   60wz socket interface routines                          E81C 27   0F                 beq    80f  E81E C1   13                 cmpb   #WSINIT   opened  E820 26   0F                 bne    90f                     *  E822 C6   02                 ldb    #WCLIST  E824 E7   44                 stb    wzcmnd,u  E826 BD   EE4C               jsr    PSRCR                     *  E829 4F                      clra  E82A C6   0A                 ldb    #R_LISTEN  E82C 39                      rts                                          *  E82D 4F            80        clra  E82E C6   02                 ldb    #R_CLOSE  E830 39                      rts                     *  E831 108E E806     90        ldy    #sklist  E835 7E   E798               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E838  skacpt    equ    *  E838 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E83B BD   E640               jsr    wzdevt >E83E 1026 0070     02        lbne   rdrqer1  E842 BD   E653               jsr    skctcp  E845 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E847 BD   EE80               jsr    GSRSR     status  E84A E7   45                 stb    wzstat,u  E84C C1   17                 cmpb   #WSESTB   connected  E84E 26   10                 bne    01f  E850 BD   EF19               jsr    GSRDPOR   fill in peer port  E853 ED   C8 12              std    wzdprt,u  E856 31   C8 14              leay   wzipad,u  E859 BD   EEEB               jsr    GSRDIP                     *  E85C 4F                      clra  E85D C6   0B                 ldb    #R_ACCEPT  E85F 39                      rts                     *FIO Simulation Structure             06:07:16  Jan 10, 2024   Page   61wz socket interface routines                          E860 C1   00       01        cmpb   #WSCLSD  E862 26   04                 bne    02f  E864 4F                      clra  E865 C6   02                 ldb    #R_CLOSE  E867 39                      rts                     *  E868 108E E838     02        ldy    #skacpt  E86C 7E   E798               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E86F  skreqrd   equ    *  E86F BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E872 BD   E640               jsr    wzdevt >E875 1026 0039     02        lbne   rdrqer1  E879 BD   E653               jsr    skctcp    check TCP  E87C 26   F7                 bne    02b                     *                     * go on                     *                     *  E87E BD   EE80               jsr    GSRSR  E881 E7   45                 stb    wzstat,u  update status  E883 BD   F037               jsr    GSRRXRS   data available?  E886 ED   48                 std    wzxfer,u  E888 26   20                 bne    70f                     *  E88A A6   C8 26              lda    wztype,u  check flags  E88D 85   01                 bita   #WFNBLK   non block  E88F 26   15                 bne    75f                     *  E891 E6   45                 ldb    wzstat,u  E893 C1   17       17        cmpb   #WSESTB   still active  E895 27   08                 beq    20f                       E897 C1   1C                 cmpb   #WSCLWT  E899 27   13                 beq    60f  E89B C1   00                 cmpb   #WSCLSD  E89D 27   0F                 beq    60f                     *  E89F 108E E86F     20        ldy    #skreqrd  E8A3 7E   E798               jmp    polext                     FIO Simulation Structure             06:07:17  Jan 10, 2024   Page   62wz socket interface routines                                             *************************  E8A6 4F            75        clra  E8A7 C6   15                 ldb    #R_RQRDNB tell no data  E8A9 39                      rts                                          * data present  E8AA 4F            70        clra  E8AB C6   05                 ldb    #R_RQRD  E8AD 39                      rts                                          * close socket and return  E8AE 4F            60        clra  E8AF C6   02                 ldb    #R_CLOSE  E8B1 39                      rts                                            E8B2 86   82       rdrqer1   lda    #130  E8B4 C6   C0                 ldb    #E_SOCKET  E8B6 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock                     *               E8B7  skrecv    equ    *  E8B7 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8BA BD   E640               jsr    wzdevt >E8BD 1026 FFF1               lbne   rdrqer1  E8C1 BD   E653     02        jsr    skctcp  E8C4 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E8C6 BD   F037               jsr    GSRRXRS   received size                     * D total aviable data  E8C9 BD   F107               jsr    RDSK2FB   transfer datat to fifo  E8CC ED   48                 std    wzxfer,u  save it  E8CE C6   40                 ldb    #WCRECV  E8D0 E7   44                 stb    wzcmnd,u  E8D2 BD   EE4C               jsr    PSRCR     tell sender we took it                       E8D5 C6   06                 ldb    #R_READ   tell data in fifo  E8D7 4F                      clra  E8D8 39                      rts                                          ***************************************************************                     *FIO Simulation Structure             06:07:17  Jan 10, 2024   Page   63wz socket interface routines                                             * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E8D9  skreqwr   equ    *  E8D9 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8DC BD   E640               jsr    wzdevt >E8DF 1026 FFCF     02        lbne   rdrqer1  E8E3 BD   E653               jsr    skctcp  E8E6 26   F7                 bne    02b                     *                     * go on                     *                     *  E8E8 BD   EE80               jsr    GSRSR  E8EB E7   45                 stb    wzstat,u  update status  E8ED BD   EFEB               jsr    GSRTXFR   free size (remaining)  E8F0 10A3 4A                 cmpd   wzrqln,u  would it fit  E8F3 24   15                 bhs    70f                     *  E8F5 E6   45       10        ldb    wzstat,u  E8F7 C1   17                 cmpb   #WSESTB  E8F9 27   18                 beq    20f  E8FB C1   1C                 cmpb   #WSCLWT  E8FD 27   11                 beq    60f  E8FF C1   00                 cmpb   #WSCLSD  E901 26   10                 bne    20f  E903 CC   0000               ldd    #0  E906 ED   48                 std    wzxfer,u  E908 20   06                 bra    60f                     * data space  E90A 4F            70        clra  E90B C6   03                 ldb    #R_RQWR  E90D 39                      rts                                          * data space exhausted, would block  E90E 4F            72        clra                     **        ldb     #R_RQWRWB  E90F 39                      rts                                          * close socket and return  E910 C6   02       60        ldb    #R_CLOSE  E912 39                      rts                                          *  E913 108E E8D9     20        ldy    #skreqwr  E917 7E   E798               jmp    polext                     FIO Simulation Structure             06:07:17  Jan 10, 2024   Page   64wz socket interface routines                                             ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E91A  sksend    equ    *  E91A BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E91D BD   E640               jsr    wzdevt >E920 1026 FF8E     02        lbne   rdrqer1  E924 BD   E653               jsr    skctcp  E927 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E929 BD   EFEB               jsr    GSRTXFR   free size (remaining)                     * D = total available space  E92C BD   F156               jsr    WRFB2SK   transfer from fifo to socket  E92F ED   48                 std    wzxfer,u  save it  E931 C6   20                 ldb    #WCSEND  E933 E7   44                 stb    wzcmnd,u  E935 BD   EE4C               jsr    PSRCR     tell sender it is coming                       E938 C6   04                 ldb    #R_WRITE  tell data in fifo  E93A 4F                      clra  E93B 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E93C  skurrdf   equ    *  E93C BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E93F BD   E640               jsr    wzdevt  E942 1026 FF6C     02        lbne   rdrqer1  E946 BD   E65C               jsr    skcudp  E949 26   F7                 bne    02b                     *                     * go on                     *FIO Simulation Structure             06:07:17  Jan 10, 2024   Page   65wz socket interface routines                                             *  E94B EC   C8 20              ldd    wzurms,u  check remaining size  E94E 26   43                 bne    84f                     *                     * no  packet data present, wait for it                     *  E950 BD   EE80               jsr    GSRSR  E953 E7   45                 stb    wzstat,u  update status  E955 BD   F037               jsr    GSRRXRS   data available?  E958 ED   7E                 std    -2,s      test D  E95A 26   15                 bne    22f       keep waiting                     * no data yet, check socket state  E95C E6   45                 ldb    wzstat,u  E95E C1   22                 cmpb   #WSUDP    still active  E960 27   08                 beq    20f                       E962 C1   1C                 cmpb   #WSCLWT  E964 27   31                 beq    60f  E966 C1   00                 cmpb   #WSCLSD  E968 27   2D                 beq    60f                     *       ldd     wzsprt,u                     *       jsr     PSRPORT         set source port                     *  E96A 108E E93C     20        ldy    #skurrdf  E96E 7E   E798               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurms                     *  E971 31   C8 1A    22        leay   wzuipa,u  E974 CC   0008               ldd    #8        size of header  E977 BD   EBAB               jsr    bmread    copy data                     *                     * move pointer                     *  E97A BD   F04E               jsr    GSRRXRP  E97D C3   0008               addd   #8  E980 BD   F05D               jsr    PSRRXRP   update pointer  E983 C6   40                 ldb    #WCRECV  E985 E7   44                 stb    wzcmnd,u  process move  E987 BD   EE4C               jsr    PSRCR                     *  E98A EC   C8 20              ldd    wzurms,u  E98D 1083 05C0               cmpd   #MAX_UDP  max size  E991 22   08                 bhi    78f                     *  E993 4F            84        clra  E994 C6   21                 ldb    #R_RDFRM  E996 39                      rts                                          * close socket and return  E997 4F            60        clra  E998 C6   02                 ldb    #R_CLOSEFIO Simulation Structure             06:07:18  Jan 10, 2024   Page   66wz socket interface routines                          E99A 39                      rts                                          *  E99B BD   E6F9     78        jsr    skclin    close  E99E C6   C0                 ldb    #E_SOCKET  E9A0 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E9A1  skurrd    equ    *  E9A1 BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9A4 BD   E640               jsr    wzdevt  E9A7 1026 FF07     02        lbne   rdrqer1  E9AB BD   E65C               jsr    skcudp  E9AE 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  E9B0 EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  E9B3 BD   F107               jsr    RDSK2FB   transfer data  E9B6 34   06                 pshs   d         xferred count  E9B8 EC   C8 20              ldd    wzurms,u  update  E9BB A3   E1                 subd   0,s++  E9BD ED   C8 20              std    wzurms,u  new remaining                     *  E9C0 C6   40       01        ldb    #WCRECV  E9C2 E7   44                 stb    wzcmnd,u  set processed  E9C4 BD   EE4C               jsr    PSRCR                     *  E9C7 4F                      clra  E9C8 C6   22                 ldb    #R_RRDFD  E9CA 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E9CB  skurwt    equ    *FIO Simulation Structure             06:07:18  Jan 10, 2024   Page   67wz socket interface routines                          E9CB BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9CE BD   E640               jsr    wzdevt  E9D1 1026 FEDD     02        lbne   rdrqer1  E9D5 BD   E65C               jsr    skcudp  E9D8 26   F7                 bne    02b                     *                     * go on                     *                     *  E9DA EC   C8 12              ldd    wzdprt,u  check illegal port >E9DD 1027 0077               lbeq   78f                     *  E9E1 EC   C8 14              ldd    wzipad,u  E9E4                         ordx   wzipad+2,IU  E9E4 10AA                    fdb    $10aa  E9E6                         doindx wzipad+2,IU  E9E6 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >E9E8 1027 006C               lbeq   78f                     * set network registers  E9EC EC   C8 12              ldd    wzdprt,u  E9EF BD   EF28               jsr    PSRDPOR                       E9F2 31   C8 14              leay   wzipad,u  E9F5 BD   EF02               jsr    PSRDIP  E9F8 EC   C8 10              ldd    wzsprt,u  E9FB 26   11                 bne    04f                     *  E9FD EC   C8 10              ldd    wzsprt,u  already set?  EA00 26   09                 bne    16f  EA02 BD   E62E               jsr    sknewp    get new source port  EA05 ED   C8 10              std    wzsprt,u  EA08 ED   C8 1E              std    wzuprt,u  set also return port  EA0B BD   EE9E     16        jsr    PSRPORT                     *  EA0E 108E EA15     04        ldy    #skuwr2   do remainder  EA12 7E   E798               jmp    polext                                          *                     * after intial setup. loop here                     *               EA15  skusnm    equ    *  EA15 BD   E64C     skuwr2    jsr    skfres    set socket base  EA18 BD   E640               jsr    wzdevt    devie active >EA1B 1026 FFB2               lbne   02b       no  EA1F BD   E65C               jsr    skcudp    check open method  EA22 26   AD                 bne    02b                     *FIO Simulation Structure             06:07:18  Jan 10, 2024   Page   68wz socket interface routines                          EA24 BD   EE80               jsr    GSRSR  EA27 E7   45                 stb    wzstat,u  update status  EA29 BD   EFEB               jsr    GSRTXFR   free size  EA2C 10A3 C8 20              cmpd   wzurms,u  EA30 24   15                 bhs    10f                     * no space yet  EA32 E6   45                 ldb    wzstat,u  EA34 C1   22                 cmpb   #WSUDP  EA36 27   08                 beq    20f                       EA38 C1   1C                 cmpb   #WSCLWT   is closing  EA3A 27   18                 beq    60f  EA3C C1   00                 cmpb   #WSCLSD   closed  EA3E 27   14                 beq    60f                     *  EA40 108E E9CB     20        ldy    #skurwt  EA44 7E   E798               jmp    polext    keep polling                     *  EA47 EC   C8 20    10        ldd    wzurms,u  EA4A 1083 05C0               cmpd   #MAX_UDP  too big  EA4E 22   08                 bhi    78f                     *  EA50 4F                      clra  EA51 C6   23                 ldb    #R_RSNDTO  EA53 39                      rts                       EA54 4F            60        clra  EA55 C6   02                 ldb    #R_CLOSE  EA57 39                      rts                       EA58 BD   E6F9     78        jsr    skclin    close  EA5B C6   C0                 ldb    #E_SOCKET  EA5D 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA5E  skusnt    equ    *  EA5E BD   E64C               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA61 BD   E640               jsr    wzdevt  EA64 1026 FE4A     02        lbne   rdrqer1  EA68 BD   E65C               jsr    skcudp  EA6B 26   F7                 bne    02b                     *FIO Simulation Structure             06:07:19  Jan 10, 2024   Page   69wz socket interface routines                                             * go on                     *                     * transfer fifo to socket data register  EA6D EC   C8 20              ldd    wzurms,u  total data                     *  EA70 BD   F156               jsr    WRFB2SK   fifo to socket  EA73 34   06                 pshs   d  EA75 EC   C8 20              ldd    wzurms,u  all loaded  EA78 A3   E1                 subd   0,s++  EA7A ED   C8 20              std    wzurms,u  EA7D 26   11                 bne    01f                       EA7F EC   C8 22              ldd    wzuwrp,u  is it used  EA82 BD   F028               jsr    PSRTXWP   set write pointer                       EA85 C6   20                 ldb    #WCSEND  EA87 E7   44                 stb    wzcmnd,u  EA89 BD   EE4C               jsr    PSRCR  EA8C 4F                      clra  EA8D C6   24                 ldb    #R_WSNDTO data taken  EA8F 39                      rts                       EA90 4F            01        clra  EA91 C6   25                 ldb    #R_SNDTOM ask for more  EA93 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               EA94  skspcl    equ    *                     *  EA94 34   10                 pshs   x  EA96 E6   0C                 ldb    tstval,x  get index  EA98 C1   04                 cmpb   #MAXTBL  EA9A 22   18                 bhi    01f       illegal  EA9C 58                      aslb  EA9D 8E   EABB               ldx    #functb  EAA0 10AE 85                 ldy    b,x       get special function  EAA3 27   0F                 beq    01f       not valid  EAA5 35   10                 puls   x                     *  EAA7 AD   A4                 jsr    0,y       do function  EAA9 26   05                 bne    90f                     *  EAAB 4F                      clra  EAAC C6   0F                 ldb    #R_SPCL  EAAE 20   0A                 bra    99f                     *  EAB0 86   A2       90        lda    #162FIO Simulation Structure             06:07:19  Jan 10, 2024   Page   70wz socket interface routines                          EAB2 20   04                 bra    02f                     *  EAB4 35   10       01        puls   x  EAB6 86   A1                 lda    #161  EAB8               02  EAB8 C6   C0                 ldb    #E_SOCKET                     *  EABA 39            99        rts                       EABB EAC3          functb    fdb    wzdev     set device settings  EABD EAC3                    fdb    wzdev  EABF EAED                    fdb    showrg  EAC1 0000                    fdb    0               0004  MAXTBL    equ    (*-functb)/2                                                               *                     * X hold the task table                     * U holds the special sock address                     *  EAC3               wzdev  EAC3 C6   08                 ldb    #8  EAC5                         trfr   B,E  EAC5 1F                      fcb    $1f  EAC6 9E                      fcb    B<<4|E                               endm  EAC7 DE   1A                 ldu    fifo_us1  device info area  EAC9 31   C4                 leay   0,u       myip  EACB BD   ECE3               jsr    PCRSIP    source IP  EACE 31   44                 leay   4,u  EAD0 BD   EC77               jsr    PCRSNM    subnet mask  EAD3 31   48                 leay   8,u  EAD5 BD   EC49               jsr    PCRGA     gateway IP  EAD8 31   4C                 leay   12,u  EADA BD   ECAD               jsr    PCRSHA    hardware address  EADD A6   C8 12              lda    18,u      ON/OFF  EAE0 27   04                 beq    01f  EAE2 C6   F8                 ldb    #%11111000 all on  EAE4 20   02                 bra    02f  EAE6 C6   78       01        ldb    #%01111000 all off  EAE8 BD   EE01     02        jsr    PCRPHY  EAEB 4F                      clra  EAEC 39                      rts                                          *                     *                     *  EAED               showrg  EAED C6   08                 ldb    #8  EAEF                         trfr   B,E       select first socket  EAEF 1F                      fcb    $1f  EAF0 9E                      fcb    B<<4|EFIO Simulation Structure             06:07:19  Jan 10, 2024   Page   71wz socket interface routines                                                       endm  EAF1 DE   1A                 ldu    fifo_us1  EAF3 33   C8 20              leau   32,u      skip network data area  EAF6 BD   EE1F               jsr    GSRMR  EAF9 E7   C0                 stb    0,u+  EAFB BD   EE80               jsr    GSRSR  EAFE E7   C0                 stb    0,u+  EB00 BD   EFAF               jsr    GSRRBFS  EB03 E7   C0                 stb    0,u+                       EB05 C6   3D                 ldb    #'=  EB07 E7   C0                 stb    0,u+                       EB09 BD   EE8F               jsr    GSRPORT  EB0C ED   C1                 std    0,u++  EB0E BD   EF19               jsr    GSRDPOR  EB11 ED   C1                 std    0,u++                       EB13 C6   23                 ldb    #'#  EB15 E7   C0                 stb    0,u+                       EB17 31   C4                 leay   0,u  EB19 BD   EEAD               jsr    GSRDHAR  EB1C 33   46                 leau   6,u                       EB1E C6   23                 ldb    #'#  EB20 E7   C0                 stb    0,u+                       EB22 31   C4                 leay   0,u  EB24 BD   EEEB               jsr    GSRDIP  EB27 33   44                 leau   4,u                       EB29 C6   3D                 ldb    #'=  EB2B E7   C0                 stb    0,u+                       EB2D BD   EF37               jsr    GSRMSS  EB30 ED   C1                 std    0,u++  EB32 BD   F037               jsr    GSRRXRS  EB35 ED   C1                 std    0,u++  EB37 BD   F04E               jsr    GSRRXRP  EB3A ED   C1                 std    0,u++  EB3C BD   F06C               jsr    GSRRXWP  EB3F ED   C1                 std    0,u++  EB41 BD   F0A1               jsr    GSRFRAG  EB44 ED   C1                 std    0,u++                       EB46 C6   23                 ldb    #'#  EB48 E7   C4                 stb    0,u  EB4A 4F                      clra                       EB4B 39                      rts                     FIO Simulation Structure             06:07:20  Jan 10, 2024   Page   72wz socket interface routines                                                                  * X hold the task table                     * U holds the sock address  EB4C               skintrp  EB4C               skdisc  EB4C               sksmac  EB4C               skskep  EB4C 86   FF                 lda    #255  EB4E A7   47                 sta    wzerr,u  EB50 C6   C0                 ldb    #E_SOCKET  EB52 39                      rts                                    EB53  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       EB53                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               EB53  spinit    equ    *  EB53 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  EB55 B7   8080               sta    SPIBASE+spicmd  EB58 39                      rts                     FIO Simulation Structure             06:07:20  Jan 10, 2024   Page   73wzspi, basic spi routines                                                *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               EB59  spistr2   equ    *  EB59 CE   8080               ldu    #SPIBASE  SPI base TODO  EB5C                         trfr   F,B  EB5C 1F                      fcb    $1f  EB5D F9                      fcb    F<<4|B                               endm  EB5E 5D                      tstb             register pointer  EB5F 27   09                 beq    01f       OK, valid  EB61 34   04                 pshs   b  EB63 C4   03                 andb   #RSVREG   reserved loctation  EB65 5D                      tstb             xxx10xxx  is invalid!  EB66 35   04                 puls   b  EB68 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  EB6A 4D            01        tsta             cmd flag  EB6B 27   04                 beq    04f  EB6D 1A   01                 sec              write   100  EB6F 20   02                 bra    05f  EB71 1C   FE       04        clc              read    000                     *  EB73 59            05        rolb             set READ/WRITE bit  [2...0]  EB74 58                      lslb             set variable length data [00]  EB75 58                      lslb                     *                     * here the actual SPI action starts                     *  EB76                         seti   disable   interrupts  EB76 1A   50                 orcc   #FF|IF                               endm  EB78 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  EB79 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  EB7B A7   C4                 sta    spicmd,u  EB7D AF   44                 stx    hibyta,u  and shift out  EB7F E7   44                 stb    hibyta,u  and shift out  EB81 1A   04                 sez  EB83 39                      rts  EB84 1C   FB       09        clz  EB86 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPIFIO Simulation Structure             06:07:20  Jan 10, 2024   Page   74wzspi, basic spi routines                                                * return B=value, D,X,Y,U preserved                     *               EB87  byterd    equ    *  EB87 34   47                 pshs   cc,d,u  EB89 4F                      clra  EB8A 8D   CD                 bsr    spistr2 >EB8C 1026 007E               lbne   09f  EB90 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EB92 E6   45                 ldb    lobyta,u  read byte  EB94 4F                      clra  EB95 ED   61                 std    1,s  EB97 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               EB99  wordrd    equ    *  EB99 34   47                 pshs   cc,d,u  EB9B 4F                      clra >EB9C BD   EB59               jsr    spistr2  EB9F 26   6D                 bne    09f  EBA1 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EBA3 A6   45                 lda    lobyta,u  read byte  EBA5 E6   45                 ldb    lobyta,u  read byte  EBA7 ED   61                 std    1,s  EBA9 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               EBAB  bmread    equ    *  EBAB 34   77                 pshs   cc,d,x,y,u  EBAD 4F                      clra  EBAE BD   F04E               jsr    GSRRXRP  EBB1 1F   01                 tfr    d,x  EBB3 CE   8080               ldu    #SPIBASE  EBB6 34   40                 pshs   u  EBB8 1A   50                 orcc   #$50  EBBA 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EBBC A7   C4                 sta    spicmd,u  EBBE AF   44                 stx    hibyta,u  start address  EBC0 BD   F0F8               jsr    tsk2rx  EBC3 E7   44                 stb    hibyta,u  EBC5 EC   63                 ldd    3,s       old DFIO Simulation Structure             06:07:21  Jan 10, 2024   Page   75wzspi, basic spi routines                             EBC7                         trfr   D,W       count  EBC7 1F                      fcb    $1f  EBC8 06                      fcb    D<<4|W                               endm  EBC9 1F   12                 tfr    x,y       mem pointer  EBCB 10AE 67                 ldy    7,s       old Y  EBCE E7   44                 stb    hibyta,u  shift out  EBD0 33   45                 leau   lobyta,u  EBD2                         tfm4   U,Y  EBD2 113B                    fdb    $113b  EBD4 32                      fcb    U<<4|Y                               endm  EBD5 35   40                 puls   u         old U  EBD7 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  EBD9 A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  EBDB 1F   10                 tfr    x,d  EBDD E3   61                 addd   1,s       move pointer  EBDF BD   F05D               jsr    PSRRXRP   update pointer  EBE2 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EBE4  bytewr    equ    *  EBE4 34   47                 pshs   cc,d,u  EBE6 86   01                 lda    #1  EBE8 BD   EB59               jsr    spistr2  EBEB 26   21                 bne    09f                     *  EBED A6   62                 lda    2,s  EBEF A7   44                 sta    hibyta,u  EBF1 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EBF3  wordwr    equ    *  EBF3 34   47                 pshs   cc,d,u  EBF5 86   01                 lda    #1  EBF7 BD   EB59               jsr    spistr2  EBFA 26   12                 bne    09f                     *  EBFC EC   61                 ldd    1,s  EBFE A7   44                 sta    hibyta,u  EC00 E7   44                 stb    hibyta,u                     *                     * common exit from SPI actionFIO Simulation Structure             06:07:21  Jan 10, 2024   Page   76wzspi, basic spi routines                                                *  EC02 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EC04 A7   C4                 sta    spicmd,u  EC06 A6   E4                 lda    0,s       sez  EC08 8A   04                 ora    #4  EC0A A7   E4       02        sta    0,s  EC0C 35   C7                 puls   cc,d,u,pc                     *  EC0E A6   E4       09        lda    0,s       clz  EC10 84   FB                 anda   #255-4  EC12 20   F6                 bra    02b                     FIO Simulation Structure             06:07:21  Jan 10, 2024   Page   77wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EC14 34   56       GCRMR     pshs   d,x,u  EC16 5F                      clrb  EC17                         trfr   B,F  EC17 1F                      fcb    $1f  EC18 9F                      fcb    B<<4|FFIO Simulation Structure             06:07:22  Jan 10, 2024   Page   78wzspi, basic spi routines                                                          endm  EC19 8E   0000               ldx    #WZMR  EC1C BD   EB87               jsr    byterd  EC1F ED   E4                 std    0,s  EC21 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EC23 34   16       PCRMR     pshs   d,x  EC25 5F                      clrb  EC26                         trfr   B,F  EC26 1F                      fcb    $1f  EC27 9F                      fcb    B<<4|F                               endm  EC28 8E   0000               ldx    #WZMR  EC2B EC   E4                 ldd    0,s >EC2D BD   EBE4               jsr    bytewr  EC30 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EC32 34   16       GCRGA     pshs   d,x  EC34 5F                      clrb  EC35                         trfr   B,F  EC35 1F                      fcb    $1f  EC36 9F                      fcb    B<<4|F                               endm  EC37 8E   0001               ldx    #WZGAR0  EC3A BD   EB99               jsr    wordrd  EC3D ED   A4                 std    0,y  EC3F 8E   0003               ldx    #WZGAR2  EC42 BD   EB99               jsr    wordrd  EC45 ED   22                 std    2,y  EC47 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EC49 34   16       PCRGA     pshs   d,x  EC4B 5F                      clrb  EC4C                         trfr   B,F  EC4C 1F                      fcb    $1f  EC4D 9F                      fcb    B<<4|F                               endm  EC4E 8E   0001               ldx    #WZGAR0  EC51 EC   A4                 ldd    0,y >EC53 BD   EBF3               jsr    wordwr  EC56 8E   0003               ldx    #WZGAR2FIO Simulation Structure             06:07:22  Jan 10, 2024   Page   79wzspi, basic spi routines                             EC59 EC   22                 ldd    2,y >EC5B BD   EBF3               jsr    wordwr  EC5E 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EC60 34   16       GCRSNM    pshs   d,x  EC62 5F                      clrb  EC63                         trfr   B,F  EC63 1F                      fcb    $1f  EC64 9F                      fcb    B<<4|F                               endm  EC65 8E   0005               ldx    #WZSUBR0  EC68 BD   EB99               jsr    wordrd  EC6B ED   A4                 std    0,y  EC6D 8E   0007               ldx    #WZSUBR2  EC70 BD   EB99               jsr    wordrd  EC73 ED   22                 std    2,y  EC75 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EC77 34   16       PCRSNM    pshs   d,x  EC79 5F                      clrb  EC7A                         trfr   B,F  EC7A 1F                      fcb    $1f  EC7B 9F                      fcb    B<<4|F                               endm  EC7C 8E   0005               ldx    #WZSUBR0  EC7F EC   A4                 ldd    0,y  EC81 BD   EBF3               jsr    wordwr  EC84 8E   0007               ldx    #WZSUBR2  EC87 EC   22                 ldd    2,y  EC89 BD   EBF3               jsr    wordwr  EC8C 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EC8E 34   16       GCRSHA    pshs   d,x  EC90 5F                      clrb  EC91                         trfr   B,F  EC91 1F                      fcb    $1f  EC92 9F                      fcb    B<<4|F                               endm  EC93 8E   0009               ldx    #WZSHAR0  EC96 BD   EB99               jsr    wordrdFIO Simulation Structure             06:07:22  Jan 10, 2024   Page   80wzspi, basic spi routines                             EC99 ED   A4                 std    0,y  EC9B 8E   000B               ldx    #WZSHAR2  EC9E BD   EB99               jsr    wordrd  ECA1 ED   22                 std    2,y  ECA3 8E   000D               ldx    #WZSHAR4  ECA6 BD   EB99               jsr    wordrd  ECA9 ED   24                 std    4,y  ECAB 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  ECAD 34   16       PCRSHA    pshs   d,x  ECAF 5F                      clrb  ECB0                         trfr   B,F  ECB0 1F                      fcb    $1f  ECB1 9F                      fcb    B<<4|F                               endm  ECB2 8E   0009               ldx    #WZSHAR0  ECB5 EC   A4                 ldd    0,y  ECB7 BD   EBF3               jsr    wordwr  ECBA 8E   000B               ldx    #WZSHAR2  ECBD EC   22                 ldd    2,y  ECBF BD   EBF3               jsr    wordwr  ECC2 8E   000D               ldx    #WZSHAR4  ECC5 EC   24                 ldd    4,y  ECC7 BD   EBF3               jsr    wordwr  ECCA 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  ECCC 34   16       GCRSIP    pshs   d,x  ECCE 5F                      clrb  ECCF                         trfr   B,F  ECCF 1F                      fcb    $1f  ECD0 9F                      fcb    B<<4|F                               endm  ECD1 8E   000F               ldx    #WZSIPR0  ECD4 BD   EB99               jsr    wordrd  ECD7 ED   A4                 std    0,y  ECD9 8E   0011               ldx    #WZSIPR2  ECDC BD   EB99               jsr    wordrd  ECDF ED   22                 std    2,y  ECE1 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             06:07:22  Jan 10, 2024   Page   81wzspi, basic spi routines                             ECE3 34   16       PCRSIP    pshs   d,x  ECE5 5F                      clrb  ECE6                         trfr   B,F  ECE6 1F                      fcb    $1f  ECE7 9F                      fcb    B<<4|F                               endm  ECE8 8E   000F               ldx    #WZSIPR0  ECEB EC   A4                 ldd    0,y  ECED BD   EBF3               jsr    wordwr  ECF0 8E   0011               ldx    #WZSIPR2  ECF3 EC   22                 ldd    2,y  ECF5 BD   EBF3               jsr    wordwr  ECF8 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  ECFA 34   16       GCRILLT   pshs   d,x  ECFC 5F                      clrb  ECFD                         trfr   B,F  ECFD 1F                      fcb    $1f  ECFE 9F                      fcb    B<<4|F                               endm  ECFF 8E   0013               ldx    #WZILLT0  ED02 BD   EB99               jsr    wordrd  ED05 ED   E4                 std    0,s  ED07 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  ED09 34   16       PCRILLT   pshs   d,x  ED0B 5F                      clrb  ED0C                         trfr   B,F  ED0C 1F                      fcb    $1f  ED0D 9F                      fcb    B<<4|F                               endm  ED0E 8E   0013               ldx    #WZILLT0  ED11 EC   E4                 ldd    0,s  ED13 BD   EBF3               jsr    wordwr  ED16 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  ED18 34   16       GCRIR     pshs   d,x  ED1A 5F                      clrb  ED1B                         trfr   B,F  ED1B 1F                      fcb    $1f  ED1C 9F                      fcb    B<<4|FFIO Simulation Structure             06:07:23  Jan 10, 2024   Page   82wzspi, basic spi routines                                                          endm  ED1D 8E   0015               ldx    #WZIR  ED20 BD   EB87               jsr    byterd  ED23 ED   E4                 std    0,s  ED25 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  ED27 34   16       PCRIR     pshs   d,x  ED29 5F                      clrb  ED2A                         trfr   B,F  ED2A 1F                      fcb    $1f  ED2B 9F                      fcb    B<<4|F                               endm  ED2C 8E   0015               ldx    #WZIR  ED2F EC   E4                 ldd    0,s  ED31 BD   EBE4               jsr    bytewr  ED34 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  ED36 34   16       GCRIMR    pshs   d,x  ED38 5F                      clrb  ED39                         trfr   B,F  ED39 1F                      fcb    $1f  ED3A 9F                      fcb    B<<4|F                               endm  ED3B 8E   0016               ldx    #WZIMR  ED3E BD   EB87               jsr    byterd  ED41 ED   E4                 std    0,s  ED43 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  ED45 34   16       PCRIMR    pshs   d,x  ED47 5F                      clrb  ED48                         trfr   B,F  ED48 1F                      fcb    $1f  ED49 9F                      fcb    B<<4|F                               endm  ED4A 8E   0016               ldx    #WZIMR  ED4D EC   E4                 ldd    0,s  ED4F BD   EBE4               jsr    bytewr  ED52 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             06:07:23  Jan 10, 2024   Page   83wzspi, basic spi routines                                                *  ED54 34   16       GCRSIR    pshs   d,x  ED56 5F                      clrb  ED57                         trfr   B,F  ED57 1F                      fcb    $1f  ED58 9F                      fcb    B<<4|F                               endm  ED59 8E   0017               ldx    #WZSIR  ED5C BD   EB87               jsr    byterd  ED5F ED   E4                 std    0,s  ED61 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  ED63 34   16       PCRSIR    pshs   d,x  ED65 5F                      clrb  ED66                         trfr   B,F  ED66 1F                      fcb    $1f  ED67 9F                      fcb    B<<4|F                               endm  ED68 8E   0017               ldx    #WZSIR  ED6B EC   E4                 ldd    0,s  ED6D BD   EBE4               jsr    bytewr  ED70 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  ED72 34   16       GCRSIMR   pshs   d,x  ED74 5F                      clrb  ED75                         trfr   B,F  ED75 1F                      fcb    $1f  ED76 9F                      fcb    B<<4|F                               endm  ED77 8E   0018               ldx    #WZSIMR  ED7A BD   EB87               jsr    byterd  ED7D ED   E4                 std    0,s  ED7F 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  ED81 34   16       PCRSIMR   pshs   d,x  ED83 5F                      clrb  ED84                         trfr   B,F  ED84 1F                      fcb    $1f  ED85 9F                      fcb    B<<4|F                               endm  ED86 8E   0018               ldx    #WZSIMR  ED89 EC   E4                 ldd    0,sFIO Simulation Structure             06:07:23  Jan 10, 2024   Page   84wzspi, basic spi routines                             ED8B BD   EBE4               jsr    bytewr  ED8E 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  ED90 34   16       GCRRTR    pshs   d,x  ED92 5F                      clrb  ED93                         trfr   B,F  ED93 1F                      fcb    $1f  ED94 9F                      fcb    B<<4|F                               endm  ED95 8E   0019               ldx    #WZRTR0  ED98 BD   EB99               jsr    wordrd  ED9B ED   E4                 std    0,s  ED9D 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  ED9F 34   16       PCRRTR    pshs   d,x  EDA1 5F                      clrb  EDA2                         trfr   B,F  EDA2 1F                      fcb    $1f  EDA3 9F                      fcb    B<<4|F                               endm  EDA4 8E   0019               ldx    #WZRTR0  EDA7 EC   E4                 ldd    0,s  EDA9 BD   EBF3               jsr    wordwr  EDAC 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EDAE 34   16       GCRRCR    pshs   d,x  EDB0 5F                      clrb  EDB1                         trfr   B,F  EDB1 1F                      fcb    $1f  EDB2 9F                      fcb    B<<4|F                               endm  EDB3 8E   001B               ldx    #WZRCR  EDB6 BD   EB87               jsr    byterd  EDB9 ED   E4                 std    0,s  EDBB 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EDBD 34   16       PCRRCR    pshs   d,x  EDBF 5F                      clrbFIO Simulation Structure             06:07:24  Jan 10, 2024   Page   85wzspi, basic spi routines                             EDC0                         trfr   B,F  EDC0 1F                      fcb    $1f  EDC1 9F                      fcb    B<<4|F                               endm  EDC2 8E   001B               ldx    #WZRCR  EDC5 EC   E4                 ldd    0,s  EDC7 BD   EBE4               jsr    bytewr  EDCA 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EDCC 34   16       GCRURP    pshs   d,x  EDCE 5F                      clrb  EDCF                         trfr   B,F  EDCF 1F                      fcb    $1f  EDD0 9F                      fcb    B<<4|F                               endm  EDD1 8E   002C               ldx    #WZUPRT0  EDD4 BD   EB99               jsr    wordrd  EDD7 ED   E4                 std    0,s  EDD9 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  EDDB 34   16       GCRUIP    pshs   d,x  EDDD 5F                      clrb  EDDE                         trfr   B,F  EDDE 1F                      fcb    $1f  EDDF 9F                      fcb    B<<4|F                               endm  EDE0 8E   0028               ldx    #WZUIPR0  EDE3 BD   EB99               jsr    wordrd  EDE6 ED   A4                 std    0,y  EDE8 8E   002A               ldx    #WZUIPR2  EDEB BD   EB99               jsr    wordrd  EDEE ED   22                 std    2,y  EDF0 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  EDF2 34   56       GCRPHY    pshs   d,x,u  EDF4 8E   002E               ldx    #WZPHY  EDF7 5F                      clrb  EDF8                         trfr   B,F  EDF8 1F                      fcb    $1f  EDF9 9F                      fcb    B<<4|FFIO Simulation Structure             06:07:24  Jan 10, 2024   Page   86wzspi, basic spi routines                                                          endm  EDFA BD   EB87               jsr    byterd  EDFD ED   E4                 std    0,s  EDFF 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  EE01 34   56       PCRPHY    pshs   d,x,u  EE03 8E   002E               ldx    #WZPHY  EE06 5F                      clrb  EE07                         trfr   B,F  EE07 1F                      fcb    $1f  EE08 9F                      fcb    B<<4|F                               endm  EE09 EC   E4                 ldd    0,s  EE0B BD   EBE4               jsr    bytewr  EE0E 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  EE10 34   56       GCRVERS   pshs   d,x,u  EE12 8E   0039               ldx    #WZVERS  EE15 5F                      clrb  EE16                         trfr   B,F  EE16 1F                      fcb    $1f  EE17 9F                      fcb    B<<4|F                               endm  EE18 BD   EB87               jsr    byterd  EE1B ED   E4                 std    0,s  EE1D 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             06:07:24  Jan 10, 2024   Page   87wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  EE1F 34   16       GSRMR     psh    d,x  EE21 BD   F0DD               jsr    tsk2rg  EE24 8E   0000               ldx    #SNMR  EE27 BD   EB87               jsr    byterd  EE2A ED   E4                 std    0,s  EE2C 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  EE2E 34   16       PSRMR     pshs   d,x  EE30 BD   F0DD               jsr    tsk2rgFIO Simulation Structure             06:07:25  Jan 10, 2024   Page   88wzspi, basic spi routines                             EE33 8E   0000               ldx    #SNMR  EE36 EC   E4                 ldd    0,s  EE38 BD   EBE4               jsr    bytewr  EE3B 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  EE3D 34   16       GSRCR     pshs   d,x  EE3F BD   F0DD               jsr    tsk2rg  EE42 8E   0001               ldx    #SNCR  EE45 BD   EB87               jsr    byterd  EE48 ED   E4                 std    0,s  EE4A 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  EE4C 34   16       PSRCR     pshs   d,x  EE4E BD   F0DD               jsr    tsk2rg  EE51 8E   0001               ldx    #SNCR  EE54 EC   E4                 ldd    0,s  EE56 BD   EBE4               jsr    bytewr  EE59 8D   E2       01        bsr    GSRCR  EE5B 5D                      tstb  EE5C 26   FB                 bne    01b       wait command to be consumed  EE5E E7   61                 stb    1,s       set return  EE60 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  EE62 34   16       GSRIR     pshs   d,x  EE64 BD   F0DD               jsr    tsk2rg  EE67 8E   0002               ldx    #SNIR  EE6A BD   EB87               jsr    byterd  EE6D ED   E4                 std    0,s  EE6F 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  EE71 34   16       PSRIR     pshs   d,x  EE73 BD   F0DD               jsr    tsk2rg  EE76 8E   0002               ldx    #SNIR  EE79 EC   E4                 ldd    0,sFIO Simulation Structure             06:07:25  Jan 10, 2024   Page   89wzspi, basic spi routines                             EE7B BD   EBE4               jsr    bytewr  EE7E 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  EE80 34   16       GSRSR     pshs   d,x  EE82 BD   F0DD               jsr    tsk2rg  EE85 8E   0003               ldx    #SNSR  EE88 BD   EB87               jsr    byterd  EE8B ED   E4                 std    0,s  EE8D 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  EE8F 34   16       GSRPORT   pshs   d,x  EE91 BD   F0DD               jsr    tsk2rg  EE94 8E   0004               ldx    #SNPORT0  EE97 BD   EB99               jsr    wordrd  EE9A ED   E4                 std    0,s  EE9C 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  EE9E 34   16       PSRPORT   pshs   d,x  EEA0 BD   F0DD               jsr    tsk2rg  EEA3 8E   0004               ldx    #SNPORT0  EEA6 EC   E4                 ldd    0,s  EEA8 BD   EBF3               jsr    wordwr  EEAB 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  EEAD 34   16       GSRDHAR   pshs   d,x  EEAF BD   F0DD               jsr    tsk2rg  EEB2 8E   0006               ldx    #SNDHAR0  EEB5 BD   EB99               jsr    wordrd  EEB8 ED   A4                 std    0,y  EEBA 8E   0008               ldx    #SNDHAR2  EEBD BD   EB99               jsr    wordrd  EEC0 ED   22                 std    2,y  EEC2 8E   000A               ldx    #SNDHAR4  EEC5 BD   EB99               jsr    wordrdFIO Simulation Structure             06:07:25  Jan 10, 2024   Page   90wzspi, basic spi routines                             EEC8 ED   24                 std    4,y  EECA 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  EECC 34   16       PSRDHAR   pshs   d,x  EECE BD   F0DD               jsr    tsk2rg  EED1 8E   0006               ldx    #SNDHAR0  EED4 EC   A4                 ldd    0,y  EED6 BD   EBF3               jsr    wordwr  EED9 8E   0008               ldx    #SNDHAR2  EEDC EC   22                 ldd    2,y  EEDE BD   EBF3               jsr    wordwr  EEE1 8E   000A               ldx    #SNDHAR4  EEE4 EC   24                 ldd    4,y  EEE6 BD   EBF3               jsr    wordwr  EEE9 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  EEEB 34   16       GSRDIP    pshs   d,x  EEED BD   F0DD               jsr    tsk2rg  EEF0 8E   000C               ldx    #SNDIPR0  EEF3 BD   EB99               jsr    wordrd  EEF6 ED   A4                 std    0,y  EEF8 8E   000E               ldx    #SNDIPR2  EEFB BD   EB99               jsr    wordrd  EEFE ED   22                 std    2,y  EF00 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  EF02 34   16       PSRDIP    pshs   d,x  EF04 BD   F0DD               jsr    tsk2rg  EF07 8E   000C               ldx    #SNDIPR0  EF0A EC   A4                 ldd    0,y  EF0C BD   EBF3               jsr    wordwr  EF0F 8E   000E               ldx    #SNDIPR2  EF12 EC   22                 ldd    2,y  EF14 BD   EBF3               jsr    wordwr  EF17 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             06:07:26  Jan 10, 2024   Page   91wzspi, basic spi routines                                                *  EF19 34   16       GSRDPOR   pshs   d,x  EF1B BD   F0DD               jsr    tsk2rg  EF1E 8E   0010               ldx    #SNDPOR0  EF21 BD   EB99               jsr    wordrd  EF24 ED   E4                 std    0,s  EF26 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  EF28 34   16       PSRDPOR   pshs   d,x  EF2A BD   F0DD               jsr    tsk2rg  EF2D 8E   0010               ldx    #SNDPOR0  EF30 EC   E4                 ldd    0,s  EF32 BD   EBF3               jsr    wordwr  EF35 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  EF37 34   16       GSRMSS    pshs   d,x  EF39 BD   F0DD               jsr    tsk2rg  EF3C 8E   0012               ldx    #SNMSSR0  EF3F BD   EB99               jsr    wordrd  EF42 ED   E4                 std    0,s  EF44 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  EF46 34   16       PSRMSS    pshs   d,x  EF48 BD   F0DD               jsr    tsk2rg  EF4B 8E   0012               ldx    #SNMSSR0  EF4E EC   E4                 ldd    0,s  EF50 BD   EBF3               jsr    wordwr  EF53 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  EF55 34   16       GSRPROT   pshs   d,x  EF57 BD   F0DD               jsr    tsk2rg  EF5A 8E   0014               ldx    #SNPROTO  EF5D BD   EB87               jsr    byterd  EF60 ED   E4                 std    0,sFIO Simulation Structure             06:07:26  Jan 10, 2024   Page   92wzspi, basic spi routines                             EF62 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  EF64 34   16       PSRPROT   pshs   d,x  EF66 BD   F0DD               jsr    tsk2rg  EF69 8E   0014               ldx    #SNPROTO  EF6C EC   E4                 ldd    0,s  EF6E BD   EBE4               jsr    bytewr  EF71 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  EF73 34   16       GSRTOS    pshs   d,x  EF75 BD   F0DD               jsr    tsk2rg  EF78 8E   0015               ldx    #SNTOS  EF7B BD   EB87               jsr    byterd  EF7E ED   E4                 std    0,s  EF80 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  EF82 34   16       PSRTOS    pshs   d,x  EF84 BD   F0DD               jsr    tsk2rg  EF87 8E   0015               ldx    #SNTOS  EF8A EC   E4                 ldd    0,s  EF8C BD   EBE4               jsr    bytewr  EF8F 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  EF91 34   16       GSRTTL    pshs   d,x  EF93 BD   F0DD               jsr    tsk2rg  EF96 8E   0016               ldx    #SNTTL  EF99 BD   EB87               jsr    byterd  EF9C ED   E4                 std    0,s  EF9E 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             06:07:26  Jan 10, 2024   Page   93wzspi, basic spi routines                             EFA0 34   16       PSRTTL    pshs   d,x  EFA2 BD   F0DD               jsr    tsk2rg  EFA5 8E   0016               ldx    #SNTTL  EFA8 EC   E4                 ldd    0,s  EFAA BD   EBE4               jsr    bytewr  EFAD 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  EFAF 34   16       GSRRBFS   pshs   d,x  EFB1 BD   F0DD               jsr    tsk2rg  EFB4 8E   001E               ldx    #SNRBFSZ  EFB7 BD   EB87               jsr    byterd  EFBA ED   E4                 std    0,s  EFBC 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  EFBE 34   16       PSRRBFS   pshs   d,x  EFC0 BD   F0DD               jsr    tsk2rg  EFC3 8E   001E               ldx    #SNRBFSZ  EFC6 EC   E4                 ldd    0,s  EFC8 BD   EBE4               jsr    bytewr  EFCB 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  EFCD 34   16       GSRTBFS   pshs   d,x  EFCF BD   F0DD               jsr    tsk2rg  EFD2 8E   001F               ldx    #SNTBFSZ  EFD5 BD   EB87               jsr    byterd  EFD8 ED   E4                 std    0,s  EFDA 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  EFDC 34   16       PSRTBFS   pshs   d,x  EFDE BD   F0DD               jsr    tsk2rg  EFE1 8E   001F               ldx    #SNTBFSZ  EFE4 EC   E4                 ldd    0,s  EFE6 BD   EBE4               jsr    bytewr  EFE9 35   96                 puls   d,x,pcFIO Simulation Structure             06:07:27  Jan 10, 2024   Page   94wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  EFEB 34   16       GSRTXFR   pshs   d,x  EFED BD   F0DD               jsr    tsk2rg  EFF0 8E   0020               ldx    #SNTXFR0  [R]  EFF3 BD   EB99               jsr    wordrd  EFF6 ED   E4       01        std    0,s  EFF8 BD   EB99               jsr    wordrd  EFFB 10A3 E4                 cmpd   0,s       read more times and exit  EFFE 26   F6                 bne    01b       when 2 reads are equal  F000 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F002 34   16       GSRTXRP   pshs   d,x  F004 BD   F0DD               jsr    tsk2rg  F007 8E   0022               ldx    #SNTXRP0  [R]  F00A BD   EB99               jsr    wordrd  F00D ED   E4       01        std    0,s  F00F BD   EB99               jsr    wordrd  F012 10A3 E4                 cmpd   0,s       read more times and exit  F015 26   F6                 bne    01b       when 2 reads are equal  F017 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F019 34   16       GSRTXWP   pshs   d,x  F01B BD   F0DD               jsr    tsk2rg  F01E 8E   0024               ldx    #SNTXWP0  [RW]  F021 BD   EB99               jsr    wordrd  F024 ED   E4                 std    0,s  F026 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F028 34   16       PSRTXWP   pshs   d,x  F02A BD   F0DD               jsr    tsk2rg  F02D 8E   0024               ldx    #SNTXWP0  F030 EC   E4                 ldd    0,s  F032 BD   EBF3               jsr    wordwrFIO Simulation Structure             06:07:27  Jan 10, 2024   Page   95wzspi, basic spi routines                             F035 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F037 34   16       GSRRXRS   pshs   d,x  F039 BD   F0DD               jsr    tsk2rg  F03C 8E   0026               ldx    #SNRXRZ0  [R]  F03F BD   EB99               jsr    wordrd  F042 ED   E4       01        std    0,s  F044 BD   EB99               jsr    wordrd  F047 10A3 E4                 cmpd   0,s       read more times and exit  F04A 26   F6                 bne    01b       when 2 reads are equal  F04C 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F04E 34   16       GSRRXRP   pshs   d,x  F050 BD   F0DD               jsr    tsk2rg  F053 8E   0028               ldx    #SNRXRP0  [RW]  F056 BD   EB99               jsr    wordrd  F059 ED   E4                 std    0,s  F05B 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F05D 34   16       PSRRXRP   pshs   d,x >F05F BD   F0DD               jsr    tsk2rg  F062 8E   0028               ldx    #SNRXRP0  F065 EC   E4                 ldd    0,s  F067 BD   EBF3               jsr    wordwr  F06A 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F06C 34   16       GSRRXWP   pshs   d,x >F06E BD   F0DD               jsr    tsk2rg  F071 8E   002A               ldx    #SNRXWP0  [R]  F074 BD   EB99               jsr    wordrd  F077 ED   E4       01        std    0,s  F079 BD   EB99               jsr    wordrd  F07C 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             06:07:27  Jan 10, 2024   Page   96wzspi, basic spi routines                             F07F 26   F6                 bne    01b       when 2 reads are equal  F081 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F083 34   16       GSRIMR    pshs   d,x >F085 BD   F0DD               jsr    tsk2rg  F088 8E   002C               ldx    #SNIMR  F08B BD   EB87               jsr    byterd  F08E ED   E4                 std    0,s  F090 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F092 34   16       PSRIMR    pshs   d,x >F094 BD   F0DD               jsr    tsk2rg  F097 8E   002C               ldx    #SNIMR  F09A EC   E4                 ldd    0,s  F09C BD   EBE4               jsr    bytewr  F09F 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F0A1 34   16       GSRFRAG   pshs   d,x >F0A3 BD   F0DD               jsr    tsk2rg  F0A6 8E   002D               ldx    #SNFRAG0  F0A9 BD   EB99               jsr    wordrd  F0AC ED   E4                 std    0,s  F0AE 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F0B0 34   16       PSRFRAG   pshs   d,x >F0B2 BD   F0DD               jsr    tsk2rg  F0B5 8E   002D               ldx    #SNFRAG0  F0B8 EC   E4                 ldd    0,s  F0BA BD   EBF3               jsr    wordwr  F0BD 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             06:07:27  Jan 10, 2024   Page   97wzspi, basic spi routines                                                * return byte in B                     *  F0BF 34   16       GSKATM    pshs   d,x >F0C1 BD   F0DD               jsr    tsk2rg  F0C4 8E   002F               ldx    #SNKATIM  F0C7 BD   EB87               jsr    byterd  F0CA ED   E4                 std    0,s  F0CC 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F0CE 34   16       PSRKATM   pshs   d,x >F0D0 BD   F0DD               jsr    tsk2rg  F0D3 8E   002F               ldx    #SNKATIM  F0D6 EC   E4                 ldd    0,s  F0D8 BD   EBE4               jsr    bytewr  F0DB 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F0DD  tsk2rg    equ    *  F0DD                         trfr   E,B  F0DD 1F                      fcb    $1f  F0DE E9                      fcb    E<<4|B                               endm  F0DF 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F0E0 1C   FE                 clc              make reg bits + '01'  F0E2 59                      rolb             socket register  F0E3 1A   01                 sec  F0E5 59                      rolb             xxx 01 ...                     *  F0E6                         trfr   B,F  F0E6 1F                      fcb    $1f  F0E7 9F                      fcb    B<<4|F                               endm  F0E8 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F0E9  tsk2tx    equ    *  F0E9                         trfr   E,B  F0E9 1F                      fcb    $1f  F0EA E9                      fcb    E<<4|BFIO Simulation Structure             06:07:28  Jan 10, 2024   Page   98wzspi, basic spi routines                                                          endm  F0EB 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F0EC 1A   01                 sec              make reg bits + '10'  F0EE 59                      rolb             sock TX buffer  F0EF 1C   FE                 clc  F0F1 59                      rolb                     *  F0F2 1A   01                 sec  F0F4 59                      rolb             write bit     '1'                     *  F0F5 58                      lslb             variable size '00'  F0F6 58                      lslb             xxx 10 100                     *  F0F7 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F0F8  tsk2rx    equ    *  F0F8                         trfr   E,B  F0F8 1F                      fcb    $1f  F0F9 E9                      fcb    E<<4|B                               endm  F0FA 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F0FB 1A   01                 sec              make reg bits + '11'  F0FD 59                      rolb             sock RX buffer  F0FE 1A   01                 sec              make reg bits + '11'  F100 59                      rolb                     *  F101 1C   FE                 clc  F103 59                      rolb             read bit     '0'                     *  F104 58                      lslb             variable size '00'  F105 58                      lslb             xxx 11 000  F106 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=sock, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F107 34   76       RDSK2FB   pshs   d,x,y,u                     *  F109 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F10C 23   02                 bls    01f  F10E EC   4A                 ldd    wzrqln,u  mandatory size  F110 1F   01       01        tfr    D,X       sizeFIO Simulation Structure             06:07:28  Jan 10, 2024   Page   99wzspi, basic spi routines                             F112 ED   E4                 std    0,s       save xfrerred old  D  F114 ED   48                 std    wzxfer,u  F116 27   3C                 beq    15f       no data                     *  F118 BD   F04E               jsr    GSRRXRP  F11B 34   06                 pshs   d         save socket read pointer  F11D 1F   02                 tfr    D,Y                     *  F11F CE   8080               ldu    #SPIBASE  F122 34   01                 pshs   cc  F124                         pshsw  F124 1038                    fdb    $1038                               endm  F126 34   40                 pshs   u  F128 1A   50                 orcc   #$50      disable interrupts  F12A 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F12C A7   C4                 sta    spicmd,u  F12E 10AF 44                 sty    hibyta,u  start address                      >F131 BD   F0F8               jsr    tsk2rx    SOCK# to buffer address                       F134 E7   44                 stb    hibyta,u  F136 108E 0020               ldy    #fifo  F13A E7   44                 stb    hibyta,u  shift out first data byte  F13C 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F13E                         trfr   X,W  F13E 1F                      fcb    $1f  F13F 16                      fcb    X<<4|W                               endm  F140                         tfm4   U,Y  F140 113B                    fdb    $113b  F142 32                      fcb    U<<4|Y                               endm  F143 35   40                 puls   u  F145 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F147 A7   C4                 sta    spicmd,u  F149                         pulsw  restore   E:F  F149 1039                    fdb    $1039                               endm  F14B 35   01                 puls   cc                     *  F14D 35   06                 puls   d         old read pointer  F14F E3   E4                 addd   0,s       adjust transferred  F151 BD   F05D               jsr    PSRRXRP   update pointer                     *  F154 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=sock                     * E=socket#FIO Simulation Structure             06:07:28  Jan 10, 2024   Page  100wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F156 34   76       WRFB2SK   pshs   d,x,y,u  F158 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F15B 23   02                 bls    01f  F15D EC   4A                 ldd    wzrqln,u  F15F 1F   01       01        tfr    d,x  F161 ED   E4                 std    0,s  F163 ED   48                 std    wzxfer,u  report size  F165 27   53                 beq    15f                     *  F167 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F16B 26   05                 bne    24f  F16D BD   F019               jsr    GSRTXWP   get write pointer  F170 20   02                 bra    25f  F172 1F   20       24        tfr    y,d                     *  F174 34   06       25        pshs   d  F176 1F   02                 tfr    D,Y                     *  F178 CE   8080               ldu    #SPIBASE  F17B 34   01                 pshs   cc  F17D                         pshsw  save      E:F  F17D 1038                    fdb    $1038                               endm  F17F 34   40                 pshs   u  F181 1A   50                 orcc   #$50  F183 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F185 A7   C4                 sta    spicmd,u  F187 10AF 44                 sty    hibyta,u  start address                       F18A BD   F0E9               jsr    tsk2tx                       F18D E7   44                 stb    hibyta,u  F18F 108E 0020               ldy    #fifo  F193 33   44                 leau   hibyta,u  the first to shift out  F195                         trfr   X,W  F195 1F                      fcb    $1f  F196 16                      fcb    X<<4|W                               endm  F197                         tfm3   Y,U  F197 113A                    fdb    $113a  F199 23                      fcb    Y<<4|U                               endm  F19A 35   40                 puls   u  F19C 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F19E A7   C4                 sta    spicmd,u  F1A0                         pulsw  restore   E:F!!  F1A0 1039                    fdb    $1039                               endm  F1A2 35   01                 puls   ccFIO Simulation Structure             06:07:29  Jan 10, 2024   Page  101wzspi, basic spi routines                                                *  F1A4 35   06                 puls   d         old write pointer  F1A6 E3   E4                 addd   0,s  F1A8 EE   66                 ldu    6,s       restore U  F1AA AE   C8 26              ldx    wztype,u  F1AD 8C   0002               cmpx   #SK_DGRM  F1B0 27   05                 beq    10f  F1B2 BD   F028     11        jsr    PSRTXWP   update pointer  F1B5 20   03                 bra    15f                       F1B7 ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F1BA 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             06:07:29  Jan 10, 2024   Page  102Debug Interface Routines                                                   F1BC               DB_main  F1BC 8D   4F                 bsr    DB_test   see if debug routines present  F1BE 6E   9F C002            jmp    [DEBUGROM+2]  F1C2               DB_pdata  F1C2 8D   49                 bsr    DB_test   see if debug routines present  F1C4 6E   9F C004            jmp    [DEBUGROM+4]  F1C8               DB_phex  F1C8 8D   43                 bsr    DB_test   see if debug routines present  F1CA 6E   9F C006            jmp    [DEBUGROM+6]  F1CE               DB_phex2  F1CE 8D   3D                 bsr    DB_test   see if debug routines present  F1D0 6E   9F C008            jmp    [DEBUGROM+8]  F1D4               DB_pcrlf  F1D4 8D   37                 bsr    DB_test   see if debug routines present  F1D6 6E   9F C00A            jmp    [DEBUGROM+10]  F1DA               DB_check  F1DA 8D   31                 bsr    DB_test   see if debug routines present  F1DC 6E   9F C00C            jmp    [DEBUGROM+12]  F1E0               DB_config  F1E0 8D   2B                 bsr    DB_test   see if debug routines present  F1E2 6E   9F C00E            jmp    [DEBUGROM+14]  F1E6 34   17       DB_msg    pshs   cc,d,x  F1E8 AE   65                 ldx    1+2+2,s   get return address  F1EA EC   81                 ldd    ,x++      get mask word  F1EC B4   0401               anda   DB_cntrl  F1EF F4   0402               andb   DB_cntrl+1  F1F2 34   04                 pshs   b  F1F4 AA   E0                 ora    ,s+  F1F6 27   04                 beq    10f       jump if flag not set  F1F8 30   02                 leax   2,x       skip over false address & fall through  F1FA 20   02                 bra    20f  F1FC AE   84       10        ldx    ,x        get false branch label  F1FE AF   65       20        stx    1+2+2,s   fix up return address  F200 35   97                 puls   cc,d,x,pc return                     *  F202               DB_pspace  F202               DB_outsp  F202 34   16                 pshs   d,x  F204 8E   F20B               ldx    #00f  F207 8D   B9                 bsr    DB_pdata  F209 35   96                 puls   d,x,pc  F20B 20 00         00        fcc    ' ',0                       F20D 34   07       DB_test   pshs   cc,d  F20F FC   C000               ldd    DEBUGROM  Debug rom present?  F212 1083 1234               cmpd   #$1234    special marker  F216 27   05                 beq    99f       yes - exit  F218 35   07                 puls   cc,d      no - abort DB_xx function  F21A 32   62                 leas   2,s  F21C 39                      rts  F21D 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             06:07:29  Jan 10, 2024   Page  103Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             06:07:29  Jan 10, 2024   Page  104Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E03D   CPUtraps FFF0   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F1DA   DB_cntrl 0401   DB_confi F1E0   DB_iflg  0400   DB_main  F1BC   DB_msg   F1E6   DB_outsp F202   DB_pcrlf F1D4   DB_pdata F1C2   DB_phex  F1C8   DB_phex2 F1CE   DB_pspac F202   DB_test  F20D   DBmsg00  E000   DBmsg01  E009   DBmsg02  E029   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5DF   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    002E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   002A   D_inthan 0028   D_test   002C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2EB   FIFO_put E310   FIFOgeta E2E2   FIFOputa E308   FIOPRI   FFCE   FIO_get  E2C0   FIO_lock 0446   FIO_rel  E2D5   GCRGA    EC32   GCRILLT  ECFA   GCRIMR   ED36   GCRIR    ED18   GCRMR    EC14   GCRPHY   EDF2   GCRRCR   EDAE   GCRRTR   ED90   GCRSHA   EC8E   GCRSIMR  ED72   GCRSIP   ECCC   GCRSIR   ED54   GCRSNM   EC60   GCRUIP   EDDB   GCRURP   EDCC   GCRVERS  EE10   GSKATM   F0BF   GSRCR    EE3D   GSRDHAR  EEAD   GSRDIP   EEEB   GSRDPOR  EF19   GSRFRAG  F0A1   GSRIMR   F083   GSRIR    EE62   GSRMR    EE1F   GSRMSS   EF37   GSRPORT  EE8F   GSRPROT  EF55   GSRRBFS  EFAF   GSRRXRP  F04E   GSRRXRS  F037   GSRRXWP  F06C   GSRSR    EE80   GSRTBFS  EFCD   GSRTOS   EF73   GSRTTL   EF91   GSRTXFR  EFEB   GSRTXRP  F002   GSRTXWP  F019   HANGS    0001   HRECSIZ  0004   H_cpu    E45E   H_fio    E482   IF       0010   INTS     0002   IO_end   E389   IO_han   E32B   IRQ_han  E3A7   IRQmsg10 E3B4   IS       0003   IU       0002   IX       0000   IY       0001   MAXHIST  0010   MAXTBL   0004   MAX_DEV  0001   MAX_S_NU 0015   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NET      0001   NUM_TSK  0459   O_INTRPT 0038   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EC49   PCRILLT  ED09   PCRIMR   ED45   PCRIR    ED27   PCRMR    EC23   PCRPHY   EE01   PCRRCR   EDBD   PCRRTR   ED9F   PCRSHA   ECAD   PCRSIMR  ED81   PCRSIP   ECE3   PCRSIR   ED63   PCRSNM   EC77   PF_INET  0002   PF_UNIX  0001   POLPRI   FFBA   PSRCR    EE4C   PSRDHAR  EECC   PSRDIP   EF02   PSRDPOR  EF28   PSRFRAG  F0B0   PSRIMR   F092   PSRIR    EE71   PSRKATM  F0CE   PSRMR    EE2E   PSRMSS   EF46   PSRPORT  EE9E   PSRPROT  EF64   PSRRBFS  EFBE   PSRRXRP  F05D   PSRTBFS  EFDC   PSRTOS   EF82   PSRTTL   EFA0   PSRTXWP  F028   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F107   REJECT   0080   ROMLOorg E000   ROM_ERR  E0C7   ROM_VERS 0030   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_RDFRM  0021   R_READ   0006   R_RQRD   0005   R_RQRDNB 0015   R_RQWR   0003   R_RQWRNB 0013   FIO Simulation Structure             06:07:30  Jan 10, 2024   Page  105Debug Interface Routines                            R_RRDFD  0022   R_RSNDTO 0023   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E3FB   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_RAW   0003   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_READ   0030   S_RQRD   0028   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WRFB2SK  F156   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSLACK   001D   WSLIST   0014   WSMCRW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1D3   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3A4   bittab   E6D5   bmread   EBAB   bt2num   E6C4   byterd   EB87   bytewr   EBE4   change   E4A6   chproc   040C   clock_ti 0455   conlb1   E77E   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E05C   fio_fsz  E05A   fio_irq  E21E   fio_msg  E288   fio_rese E1DE   fio_resp E2A4   fio_star E08F   fio_wait E201   fiointe  E287   functb   EABB   getjo1   E4EE   getjo2   E4FD   getjo4   E504   getjo6   E50D   getjo8   E50F   getjob   E4E8   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3CC   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   E567   makrdy   E552   max_trn  E05E   mod_name 0002   FIO Simulation Structure             06:07:30  Jan 10, 2024   Page  106Debug Interface Routines                            mod_tbl  E1CD   mod_type 0000   myloop   E06F   no_dev   E14E   num2bt   E6BA   nwp_strt 0000   oldorg   EB53   polext   E798   putru1   E526   putru2   E52D   putru4   E53B   putru5   E54A   putru6   E54E   putrun   E519   rdrqer1  E8B2   rom_bad  E0C5   rom_firq E098   rom_init E05F   rom_int  E0BA   rom_nmi  E092   rom_swi  E09F   rom_swi2 E0A5   rom_swi3 E0AC   rom_trap E0B3   rsche2   E4BD   rsche3   E4D1   rsched   E4AC   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E62D   send_SI  E43D   set_tabl E106   showrg   EAED   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E838   skbind   E7C1   skclin   E6F9   skclos   E6DE   skcner1  E7B7   skcner2  E7A4   skcner3  E7BB   skcner4  E7B3   skcner5  E7AF   skcner6  E7A8   skconn   E72B   skctcp   E653   skcudp   E65C   skdisc   EB4C   skfres   E64C   skinit   E60F   skinthan E62C   skintrp  EB4C   sklist   E806   sknewp   E62E   skopen   E665   skoper1  E6B0   skoper2  E6B4   skrecv   E8B7   skreqrd  E86F   skreqwr  E8D9   sksend   E91A   skskep   EB4C   sksmac   EB4C   skspcl   EA94   sktest   E629   skurrd   E9A1   skurrdf  E93C   skurwt   E9CB   skusnm   EA15   skusnt   EA5E   skuwr2   EA15   sleep    E58C   sleep7   E5B4   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   EB53   spista   0000   spistr2  EB59   sprend   EC02   stbinit  E0D4   sto_chk  E155   swtchu   E4DD   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1C1   timerchk E1C7   timerin  E1BB   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F0DD   tsk2rx   F0F8   tsk2tx   F0E9   tskend   049E   tskinit  E163   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E573   wakeu3   E57A   wakeu4   E57E   wakeu5   E580   wakeup   E568   wlocip   0370   wordrd   EB99   wordwr   EBF3   wzanyp   0457   wzcmnd   0004   wzdev    EAC3   wzdevt   E640   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzipad   0014   wzmyip   0000   wzprot   0028   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzxfer   0008   xmtint   E5C1   