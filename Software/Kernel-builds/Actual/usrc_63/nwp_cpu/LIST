               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     13:15:26  Apr 02, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)               0006  PIPES     equ    6         Broken pipe                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                                          * constants for PROT_XLTEOLSWTPc      Intelligent I/O Proce     13:15:26  Apr 02, 2024   Page    2Hardware   Definitions                                             000A  LF        equ    $0a       line feed               000D  CR        equ    $0d       carriage return                                          * NETBLOCK constants               0004  NBRQLN    equ    4         4 bytes for request               0204  NBSIZE    equ    512+NBRQLN                     SWTPc      Intelligent I/O Proce     13:15:26  Apr 02, 2024   Page    3Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     13:15:26  Apr 02, 2024   Page    4Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     13:15:26  Apr 02, 2024   Page    5Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     13:15:27  Apr 02, 2024   Page    6Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     13:15:27  Apr 02, 2024   Page    7Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     13:15:27  Apr 02, 2024   Page    8Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     13:15:27  Apr 02, 2024   Page    9Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * should match nwp_codes.h  and MAX_S_NUM                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  0004               D_func2   rmb    2         2  0006               D_func3   rmb    2         3  0008               D_func4   rmb    2         4  000A               D_func5   rmb    2         5  000C               D_func6   rmb    2         6  000E               D_func7   rmb    2         7  0010               D_func8   rmb    2         8  0012               D_func9   rmb    2         9  0014               D_funcA   rmb    2         A  0016               D_funcB   rmb    2         B  0018               D_funcC   rmb    2         C  001A               D_funcD   rmb    2         D  001C               D_funcE   rmb    2         E  001E               D_funcF   rmb    2         F                     *  0020               D_func10  rmb    2         10  0022               D_func11  rmb    2         11  0024               D_func12  rmb    2         12  0026               D_func13  rmb    2         13                     *  0028               D_inthan  rmb    2         14 Interrupt poller/handlerSWTPc      Intelligent I/O Proce     13:15:27  Apr 02, 2024   Page   10Device     Table Structure                            002A               D_init    rmb    2         15 Device initialization  002C               D_test    rmb    2         16 Test for device present                     *  002E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     13:15:28  Apr 02, 2024   Page   11History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     13:15:28  Apr 02, 2024   Page   12IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 13:15:28  Apr 02, 2024   Page   13IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 13:15:28  Apr 02, 2024   Page   14IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMRAW    equ    $42       sock mac raw               0032  WSIRAW    equ    $32       sock IP raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commandsTask       Structure                 13:15:28  Apr 02, 2024   Page   15IOP        Memory Layout                                           0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                    0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzdctr    rmb    1         [*] (pre= $00)  delay counter  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parameters                     *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_Task       Structure                 13:15:29  Apr 02, 2024   Page   16IOP        Memory Layout                                                                002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_MRAW   equ    3         mac raw socket               0004  SK_IRAW   equ    4         IP raw socket                     *               0100  SK_NONBLK equ    $0100                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                    8000  PROT_XLTEOL equ  $8000     xlate CR<=>LF (stream only)               0001  PROT_ICMP equ    1Task       Structure                 13:15:29  Apr 02, 2024   Page   17IOP        Memory Layout                                           0002  PROT_IGMP equ    2               0008  PROT_EGP  equ    8                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             13:15:29  Apr 02, 2024   Page   18IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             13:15:29  Apr 02, 2024   Page   19IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             13:15:29  Apr 02, 2024   Page   20Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                                          *                     * Error codes                     *FIO Simulation Structure             13:15:30  Apr 02, 2024   Page   21Dual_Port RAM Structure                                            0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 Socket error,                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  set    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successful               0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  set    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                     *                     *                     * fio_codes.h is the leading file, here are                     * ammendments                     *                     *FIO Simulation Structure             13:15:30  Apr 02, 2024   Page   22Dual_Port RAM Structure                                            0003  R_RQWR    set    $03       [S]  Request for write               0005  R_RQRD    set    $05       [S]  Request for read               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                     *               0030  R_RQSBLK  equ    $30               0031  R_SNDBLK  equ    $31               0032  R_RQRBLK  equ    $32               0033  R_RDRBLK  equ    $33                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to mac               0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *FIO Simulation Structure             13:15:30  Apr 02, 2024   Page   23Dual_Port RAM Structure                                            00C0  S_RQSBLK  equ    $c0       request send extended block               00C8  S_SNDBLK  equ    $c8       send extended block               00D0  S_RQRBLK  equ    $d0       request read extended block               00D8  S_RDRBLK  equ    $d8       read extended block                     *                                    0019  MAX_S_NUM equ    25        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             13:15:31  Apr 02, 2024   Page   24Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             13:15:31  Apr 02, 2024   Page   25CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0BF                    fdb    rom_trap  Unused  FFF2 E0B8                    fdb    rom_swi3  SWI3  FFF4 E0B1                    fdb    rom_swi2  SWI2  FFF6 E0A4                    fdb    rom_firq  FIRQ  FFF8 E3B3                    fdb    IRQ_han   IRQ  FFFA E0AB                    fdb    rom_swi   SWI  FFFC E09E                    fdb    rom_nmi   Background debug  FFFE E080                    fdb    rom_init  Reset                     *                               info   UniFLEX Networking ROM                               info   for CPU09GPP+09NET                               info   At the start of ROM the locations for preset                               info   the network setting are reserved                               info   0000...0005  MAC ADDRESS                               info   0006...0009  IP address                               info   000A...000D  NETMASK                               info   000E...0011  GATEWAY IP address                               info   avoid any duplicate settings!                                          FIO Simulation Structure             13:15:31  Apr 02, 2024   Page   26System     RESET Code                                                      E000                         org    ROMLOorg                                          * start of ROM                     ***************************************************************                     *                     * contains the MAC ADDRESS to be used, make sure that is unique                     *                     * contains the IP address for the interface                     *                     * contains the NETMASK for the interface                     *                     * contains the IP address of the GATEWAY                     *                     **************************************************************                     *                     * REPLACE the defaults with your specific values                     *                     * mac address 6 bytes                            (E000...E005)  E000 FF FF FF FF   wzifma    fcb    $FF,$FF,$FF,$FF,$FF,$FF                     * IP addres for THIS interface (avoid duplicates!!!)  E006 FF FF FF FF   wzifip    fcb    255,255,255,255 (E006...E009)                     * NETMASK  E00A FF FF FF FF   wzifnm    fcb    255,255,255,255 (E00A...E00D)                     * GATEWAY  E00E FF FF FF FF   wzifga    fcb    255,255,255,255 (E00E...E011)                     *                     **************************************************************                       E012 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM version:240401',0  E02A 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E04A 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E05E 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               E07B  fio_fsz   equ    *         device fifo size               E07D  fio_dsz   equ    *+2       device RAM size               E07F  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E07B 0200                    fdb    512       fio_fsz FIFO SIZE  E07D 0400                    fdb    1024      fio_dsz DEVICE SIZE  E07F 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *FIO Simulation Structure             13:15:31  Apr 02, 2024   Page   27System     RESET Code                                                    * System RESET code                     *  E080 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E084                         ldmd   3  E084 113D                    fdb    $113d  E086 03                      fcb    3                               endm                      >E087 BD   E0E0     20        jsr    stbinit   go initialize system memory                       E08A 10FE 049C     30        lds    tsktab    Task 0 Stack  E08E 32   E9 00D7            leas   TSKSIZ,s  E092 17   0155               lbsr   fio_reset  E095 BD   E641               jsr    skdvini   set the device itself  E098 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E09B               fio_start  E09B 7E   E4BC     10        jmp    rsched                                          FIO Simulation Structure             13:15:32  Apr 02, 2024   Page   28ROM        Interrupt Fielders                                              E09E 8D   26       rom_nmi   bsr    rom_int  E0A0 4E 4D 49 00             fcc    'NMI',0  E0A4 8D   20       rom_firq  bsr    rom_int  E0A6 46 49 52 51             fcc    'FIRQ',0  E0AB 8D   19       rom_swi   bsr    rom_int  E0AD 53 57 49 00             fcc    'SWI',0  E0B1 8D   13       rom_swi2  bsr    rom_int  E0B3 53 57 49 32             fcc    'SWI2',0  E0B8 8D   0C       rom_swi3  bsr    rom_int  E0BA 53 57 49 33             fcc    'SWI3',0  E0BF 8D   05       rom_trap  bsr    rom_int  E0C1 54 52 41 50             fcc    'TRAP',0                       E0C6 8E   E0D3     rom_int   ldx    #ROM_ERR  E0C9 BD   F37F               jsr    DB_pdata  E0CC 35   10                 puls   x  E0CE BD   F37F               jsr    DB_pdata  E0D1 20   FE       rom_bad   bra    *                     *  E0D3 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             13:15:32  Apr 02, 2024   Page   29Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0E0 8E   0000     stbinit   ldx    #0        s  clear all variables  E0E3 CC   0000               ldd    #0  E0E6 ED   81       10        std    ,x++  E0E8 8C   3EFF               cmpx   #end_vars done yet?  E0EB 25   F9                 blo    10b                       E0ED CC   0D04               ldd    #DEBUG  E0F0 FD   0401               std    DB_cntrl                                            E0F3 B6   E07F               lda    max_trn   shared with main CPU  E0F6 48                      asla             *2  E0F7 8B   04                 adda   #4        fixed system tasks  E0F9 B7   0459               sta    NUM_TSK                     * >E0FC 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0FF 8E   040E     15        ldx    #SI_Q     set queue empty  E102 BF   0444               stx    SI_Q_ptr  E105 8E   0447               ldx    #int_buf  reset message in pointer  E108 BF   0453               stx    int_ptr                      >E10B 17   0061     17        lbsr   tskinit   initialize tasks                       E10E 17   128C     18        lbsr   DB_config display configuration  E111 39                      rts                                          *                     * Set up system tables                     *  E112               set_tables  E112 108E 04A0               ldy    #dev_tab  E116 8E   E5EF               ldx    #DEV_SOCK  E119 AF   22                 stx    dev_type,y  E11B AD   98 2A              jsr    [D_init,x] (skinit)                                          * Compute configuration  E11E CE   E1D9               ldu    #mod_tbl  tables with module refs  E121 AE   C4       12        ldx    mod_type,u  E123 27   09                 beq    20f       jump if end of module table  E125 AD   98 2C              jsr    [D_test,x] check for device  E128 25   04                 bcs    15f       jump if found  E12A 33   44                 leau   MOD_SIZE,u  E12C 20   F3                 bra    12b                     *FIO Simulation Structure             13:15:32  Apr 02, 2024   Page   30Table      Initialization                             E12E               15  E12E               20                     * -- All done setting up configuration                       E12E CC   04C6               ldd    #SYS_TABS start of system tables  E131 1F   03                 tfr    d,u                     * -- Task table  E133 86   D7                 lda    #TSKSIZ  E135 F6   0459               ldb    NUM_TSK  E138 3D                      mul  E139 FF   049C               stu    tsktab >E13C 17   0022               lbsr   sto_chk   check for system table space overflow  E13F FF   049E               stu    tskend                     *                     * -- All done  E142 39            90        rts                     *  E143 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E15A 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E161 33   CB       sto_chk   leau   d,u       compute new end pointer  E163 1183 3EFF               cmpu   #end_vars overflow?  E167 22   03                 bhi    10f       yes - return error  E169 1C   FE                 clc              no         - return OK  E16B 39                      rts  E16C 1A   01       10        sec              ..         bad owies  E16E 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E16F BE   049C     tskinit   ldx    tsktab  E172 BF   0409               stx    utask  E175 F6   0459               ldb    NUM_TSK   # tasks in system  E178 34   04                 pshs   b  E17A 10BE 049C               ldy    tsktab    task 1  E17E 31   A9 00D7            leay   TSKSIZ,y  E182               10                                            E182 86   04       11        lda    #TFREE    mark all tasks free  E184 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             13:15:32  Apr 02, 2024   Page   31Table      Initialization                             E187 26   02                 bne    15f  E189 86   05                 lda    #TSYS     the system task is never free  E18B A7   04       15        sta    tsstat,x  E18D 86   FF                 lda    #$FF      not associated with a terminal  E18F A7   0D                 sta    tsdev,x  E191 A7   0E                 sta    tsdev+1,x  E193 33   89 00D7            leau   TSKSIZ,x  initialize stack  E197 CC   E337               ldd    #IO_han  E19A 34   20                 pshs   y  E19C AC   E1                 cmpx   ,s++      task 1?  E19E 26   03                 bne    20f       no - normal I/O handling task  E1A0 CC   E407               ldd    #SI_HAN   yes - special terminal interrupt handling task  E1A3 36   06       20        pshu   d  E1A5 EF   88 11              stu    usp,x  E1A8 EF   88 13              stu    umark0,x  E1AB 30   89 00D7            leax   TSKSIZ,x  E1AF 6A   E4                 dec    0,s       done?  E1B1 26   CF                 bne    10b  E1B3 32   61                 leas   1,s       clean up stack  E1B5 CC   0000               ldd    #0        nothing running or sleeping  E1B8 FD   0403               std    runlst  E1BB FD   0405               std    slplst  E1BE FD   0407               std    slplst+tsslnk  E1C1 30   A4                 leax   0,y       start interrupt handling task  E1C3 BD   E562               jsr    makrdy  E1C6 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1C7 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1C9 B7   8400               sta    tim_base  interrupt enable  E1CC 39                      rts                                                         E1CD  timerack  equ    *  E1CD 86   01                 lda    #1  E1CF B7   8401               sta    tim_rest  reset interrupt  E1D2 39                      rts                       E1D3 B6   8400     timerchk  lda    tim_base  E1D6 84   80                 anda   #%10000000 interrupt flag  E1D8 39                      rtsFIO Simulation Structure             13:15:33  Apr 02, 2024   Page   32IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1D9  mod_tbl   equ    *  E1D9 E5EF E1DF               fdb    DEV_SOCK,WZ5_name  E1DD 0000                    fdb    0                     *  E1DF 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             13:15:33  Apr 02, 2024   Page   33FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     * it sets the offsets to the sock array and to the device info                     *  E1EA               fio_reset                     * when here, all storage locations have been erased already                     *  E1EA 8E   0000               ldx    #0  E1ED 9F   14                 stx    fifo_get  set Q pointers  E1EF 9F   16                 stx    fifo_put  E1F1 8E   0370               ldx    #WZNETOF  E1F4 9F   1A                 stx    fifo_us1  E1F6 8E   0220               ldx    #WZSKOFF  E1F9 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1FB 86   08                 lda    #8  E1FD A7   84       01        sta    wzenum,x  E1FF 30   88 2A              leax   WZSIZE,x  to next  E202 4A                      deca  E203 26   F8                 bne    01b                     *  E205 BE   E07D               ldx    fio_dsz  E208 30   1E                 leax   -2,x      one from top  E20A CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E20D C6   FF       fio_wait  ldb    #255      Spin counter                     *  E20F               00  E20F 6D   84                 tst    0,x       fio_cpuF  E211 27   16                 beq    10f                     *  E213 5A                      decb  E214 26   F9                 bne    00b       jump back if not ready                     *  E216 33   5F                 leau   -1,u  E218 1183 0000               cmpu   #0  E21C 26   EF                 bne    fio_wait  E21E 8E   E05E               ldx    #CPU_down  E221 17   115B               lbsr   DB_pdata  E224 17   1152               lbsr   DB_main  E227 20   C1                 bra    fio_reset                     * reset OK  E229 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     *  E22A BE   0453     fio_irq   ldx    int_ptr   input message pointer  E22D 96   00                 lda    cpu_fio   move REQUESTFIO Simulation Structure             13:15:33  Apr 02, 2024   Page   34FIO        Simulation Routines                        E22F A7   80                 sta    ,x+  E231 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E233 ED   81                 std    ,x++  E235 96   03                 lda    cpu_fio2  specific DATA  E237 A7   80                 sta    ,x+  E239 DC   04                 ldd    cpu_fio3  device major/minor  E23B ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E23D FE   E07D               ldu    fio_dsz  E240 33   5F                 leau   -1,u  E242 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E244 BF   0453               stx    int_ptr   update pointer  E247 108E 0447               ldy    #int_buf  get message from buffer  E24B A6   A4                 lda    0,y       -- Send interrupt command?  E24D 81   38                 cmpa   #S_INTRPT  E24F 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E251 10BF 0453               sty    int_ptr   reset pointer  E255 E6   23                 ldb    3,y       signal  E257 AE   24                 ldx    4,y       SOCK reference                     *  E259 BD   E699               jsr    sdev_sig  send device signal  E25C 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E25E BE   049C     30        ldx    tsktab    search for an available task  E261 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E264 A6   04       32        lda    tsstat,x  E266 81   04                 cmpa   #TFREE    looking for a "free" task  E268 27   0E                 beq    40f                     *  E26A 30   89 00D7            leax   TSKSIZ,x  E26E 5A                      decb  E26F 26   F3                 bne    32b                     *  E271 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E273 BD   E294               jsr    fio_msg  E276 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E278 108E 0447     40        ldy    #int_buf  get message from buffer  E27C 10BF 0453               sty    int_ptr   reset pointerFIO Simulation Structure             13:15:33  Apr 02, 2024   Page   35FIO        Simulation Routines                        E280 E6   A0                 ldb    ,y+       command byte  REQUEST  E282 E7   09                 stb    tscmd,x   save for task  E284 EC   A1                 ldd    ,y++      sequence #    task ID  E286 ED   0A                 std    tsseq,x  E288 E6   A0                 ldb    ,y+       command specific DATA  E28A E7   0C                 stb    tstval,x  E28C EC   A1                 ldd    ,y++      associate with terminal major/minor  E28E ED   0D                 std    tsdev,x  E290 BD   E562               jsr    makrdy    make task ready to run                     *  E293 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  E294 34   54       fio_msg   pshs   b,x,u     save register  E296 FE   E07D               ldu    fio_dsz  E299 33   5E                 leau   -2,u      one off top  E29B D7   09                 stb    fio_cpu   set up mailbox value                       E29D 86   FF       5         lda    #$FF      tell CPU mailbox full  E29F A7   C4                 sta    0,u       fio_cpuF  E2A1 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  E2A4 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E2A6 27   06                 beq    20f       jump if consumed                     *  E2A8 30   1F                 leax   -1,x      time-out yet?  E2AA 26   F8                 bne    10b                     *  E2AC 20   F3                 bra    05b       try again                     *  E2AE 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E2B0 34   16       fio_response pshs d,x  E2B2 8D   18                 bsr    FIO_get   access FIO  E2B4 BE   0409               ldx    utask     task ID  E2B7 EC   0A                 ldd    tsseq,x  E2B9 DD   0A                 std    fio_cpu1  E2BB EC   0D                 ldd    tsdev,x   device infoFIO Simulation Structure             13:15:34  Apr 02, 2024   Page   36FIO        Simulation Routines                        E2BD DD   0D                 std    fio_cpu3  E2BF A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2C1 97   0C                 sta    fio_cpu2  E2C3 E6   61                 ldb    1,s       is RESPONSE code >E2C5 BD   E294               jsr    fio_msg  E2C8 8D   17                 bsr    FIO_rel   release FIO  E2CA 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2CC 34   76       FIO_get   pshs   d,x,y,u   save registers  E2CE 108E 0446     10        ldy    #FIO_lock is the device locked  E2D2 6D   A4                 tst    0,y  E2D4 27   07                 beq    20f       no - go get it                     *  E2D6 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2D8 BD   E59C               jsr    sleep  E2DB 20   F1                 bra    10b       try again                     *  E2DD 6C   A4       20        inc    0,y       mark in use  E2DF 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2E1 34   76       FIO_rel   pshs   d,x,y,u  E2E3 108E 0446               ldy    #FIO_lock  E2E7 6F   A4                 clr    0,y  E2E9 BD   E578               jsr    wakeup  E2EC 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2EE 34   04       FIFOgeta  pshs   b  E2F0 8D   05                 bsr    FIFO_get  E2F2 35   02                 puls   a  E2F4 1E   89                 exg    a,b  E2F6 39                      rts                     *  E2F7 34   12       FIFO_get  pshs   a,x  E2F9 DC   12                 ldd    fifo_cnt  any data?  E2FB 27   15                 beq    99f       no - exit                     *  E2FD                         decd   yes       - adjust count  E2FD 104A                    fdb    $104a                               endm  E2FF DD   12                 std    fifo_cnt  E301 9E   14                 ldx    fifo_get  get consumer pointerFIO Simulation Structure             13:15:34  Apr 02, 2024   Page   37FIO        Simulation Routines                        E303 E6   88 20              ldb    fifo,x    fetch byte  E306 30   01                 leax   1,x       bump pointer  E308 BC   E07B               cmpx   fio_fsz   end of fifo?  E30B 26   03                 bne    10f                     *  E30D 8E   0000               ldx    #0        reset pointer                     *  E310 9F   14       10        stx    fifo_get                     *  E312 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E314 34   04       FIFOputa  pshs   b  E316 1F   89                 tfr    a,b  E318 8D   02                 bsr    FIFO_put  E31A 35   84                 puls   b,pc                     *  E31C 34   16       FIFO_put  pshs   d,x  E31E 9E   16                 ldx    fifo_put  get consumer pointer  E320 E7   88 20              stb    fifo,x    store byte  E323 30   01                 leax   1,x       bump pointer  E325 BC   E07B               cmpx   fio_fsz   end of FIFO?  E328 26   03                 bne    10f                     *  E32A 8E   0000               ldx    #0        reset pointer  E32D 9F   16       10        stx    fifo_put                     *  E32F DC   12                 ldd    fifo_cnt  E331                         incd  E331 104C                    fdb    $104c                               endm  E333 DD   12                 std    fifo_cnt  E335 35   96       99        puls   d,x,pcFIO Simulation Structure             13:15:34  Apr 02, 2024   Page   38IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E337               IO_han    seti   block     interrupts  E337 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E339               10        clri  E339 1C   AF                 andcc  #!(FF|IF)                               endm  E33B BE   0409               ldx    utask     get task control block address  E33E A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E340 44                      lsra             isolate    command  E341 44                      lsra  E342 44                      lsra                     **        lsra  E343 81   19                 cmpa   #MAX_S_NUM  E345 22   69                 bhi    bad_cmd                     *  E347 48                      lsla             --   word index on command  E348 34   10                 pshs   x  E34A 8E   04A0               ldx    #dev_tab  E34D AE   02                 ldx    dev_type,x get handler table address  E34F 10AE 86                 ldy    a,x       get processor address  E352 35   10                 puls   x  E354 34   20                 pshs   y  E356 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E359 27   0A                 beq    05f       else it is target ponter  E35B 10AF E4                 sty    0,s  E35E 108E 0000               ldy    #0  E362 10AF 0F                 sty    tsagin,x  reset pointer  E365 35   20       05        puls   y         change address  E367 4F                      clra                     *  E368 8E   E395               ldx    #IO_end   interrupt handler address  E36B 34   10                 pshs   x  E36D BE   0409               ldx    utask     task pointer  E370 10EF 88 15              sts    umark1,x  E374 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             13:15:34  Apr 02, 2024   Page   39IO         Command Handler                            E376 1E   03                 exg    d,u  E378 84   07                 anda   #%00000111 mask off address bits  E37A 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E37C AD   A4                 jsr    0,y       perform operation & return status  E37E 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E380 BE   0409               ldx    utask     restore task pointer  E383 108C FFFF               cmpy   #$ffff  E387 26   09                 bne    20f                     * task is NOT done yet  E389 86   BA                 lda    #POLPRI  E38B A7   05                 sta    tsprir,x  at lower prio  E38D BD   E4B6               jsr    change  E390 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E392 BD   E2B0     20        jsr    fio_response                     *                     * task is done                     *  E395               IO_end    seti   mask      interrupts  E395 1A   50                 orcc   #FF|IF                               endm  E397 BE   0409               ldx    utask     restore task control block address  E39A A7   0C                 sta    tstval,x  remember transaction value sent  E39C E7   09                 stb    tscmd,x   and command response  E39E 86   04                 lda    #TFREE    mark task "terminated & free"  E3A0 A7   04                 sta    tsstat,x  E3A2 86   FF                 lda    #$FF      disassociate from any terminal  E3A4 A7   0D                 sta    tsdev,x  E3A6 A7   0E                 sta    tsdev+1,x  E3A8 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E3AA BD   E4BC     90        jsr    rsched    run other tasks >E3AD 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E3B0               bad_cmdFIO Simulation Structure             13:15:35  Apr 02, 2024   Page   40IO         Command Handler                            E3B0 C6   81                 ldb    #E_BADCMD error code  E3B2 39                      rtsFIO Simulation Structure             13:15:35  Apr 02, 2024   Page   41Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3B3  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3B3 BE   E07D     10        ldx    fio_dsz  E3B6 30   1F                 leax   -1,x  E3B8 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3BA 27   03                 beq    99f       no - move on  E3BC BD   E22A               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3BF 3B            99        rti              return from interrupt                     *  E3C0 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3CB 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             13:15:35  Apr 02, 2024   Page   42Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3D8 34   36       int_all   pshs   d,x,y  E3DA F6   0459               ldb    NUM_TSK  E3DD C0   02                 subb   #2  E3DF 34   04                 pshs   b  E3E1 BE   049C               ldx    tsktab  E3E4 30   89 01AE            leax   2*TSKSIZ,x                     *  E3E8 EC   61       10        ldd    1,s  E3EA 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3ED 26   0C                 bne    20f                     *  E3EF BC   0409               cmpx   utask     make sure I don't get blown away  E3F2 27   07                 beq    20f                     *  E3F4 34   16                 pshs   d,x  E3F6 BD   E5D1               jsr    xmtint    interrupt task  E3F9 35   16                 puls   d,x                     *  E3FB 30   89 00D7  20        leax   TSKSIZ,x  next task  E3FF 6A   E4                 dec    0,s       more tasks?  E401 26   E5                 bne    10b  E403 32   61                 leas   1,s                     *  E405 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             13:15:35  Apr 02, 2024   Page   43Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E407 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E40B                         seti  E40B 1A   50                 orcc   #FF|IF                               endm  E40D FE   0444               ldu    SI_Q_ptr  get current Q ptr  E410 1183 040E               cmpu   #SI_Q     anything in Q?  E414 26   07                 bne    20f       yes - go process it                     *  E416 C6   D8                 ldb    #SIQPRI   wait for something to do  E418 BD   E59C               jsr    sleep  E41B 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E41D E6   C2       20        ldb    0,-u      B = Interrupt #  E41F 34   04                 pshs   b  E421 EC   C3                 ldd    0,--u     A = Device #  E423 34   06                 pshs   d  E425 EC   C3                 ldd    0,--u     task ID  E427 34   06                 pshs   d         save registers  E429 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E42C E6   63                 ldb    3,s       set up to flush all input for this terminal  E42E                         clri   allow     interrupts  E42E 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E430 BD   E2CC               jsr    FIO_get   get access to FIO  E433 EC   E1                 ldd    0,s++     task ID  E435 DD   0A                 std    fio_cpu1  E437 EC   E1                 ldd    ,s++      terminal #  E439 DD   0D                 std    fio_cpu3  terminal  E43B E6   E0                 ldb    ,s+       interrupt #  E43D D7   0C                 stb    fio_cpu2  signal  E43F C6   07                 ldb    #R_INTRPT  E441 BD   E294               jsr    fio_msg   send interrupt message  E444 BD   E2E1               jsr    FIO_rel   release access to FIO  E447 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = task struct                     *   U= wzsock                     *   jsr send_SI                     *FIO Simulation Structure             13:15:36  Apr 02, 2024   Page   44Terminal   Interrupt Handling Task                    E449 34   76       send_SI   pshs   d,x,y,u   save registers  E44B FE   0444               ldu    SI_Q_ptr  get Q head  E44E 1183 0444               cmpu   #SI_Q_ptr check for overflow  E452 24   11                 bhs    90f       exit if so - sorry                     *  E454 34   04                 pshs   b  E456 EC   0A                 ldd    tsseq,x   task ID @ master side  E458 ED   C1                 std    0,u++  E45A EC   66                 ldd    6,s       [U]wzsock#  E45C ED   C1                 std    0,u++     place value in Queue  E45E 35   04                 puls   b  E460 E7   C0                 stb    0,u+  E462 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E465 108E 040E     90        ldy    #SI_Q     wake up Queue server  E469 BD   E578               jsr    wakeup  E46C 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             13:15:36  Apr 02, 2024   Page   45History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E46E 34   16       H_cpu     pshs   d,x  E470 BE   049A               ldx    hstptr    get history queue pointer  E473 96   00                 lda    cpu_fio  E475 A7   84                 sta    hst_cmd,x  E477 96   01                 lda    cpu_fio1  E479 A7   01                 sta    hst_seq,x  E47B 96   04                 lda    cpu_fio3  E47D A7   02                 sta    hst_tty,x  E47F 96   03                 lda    cpu_fio2  E481 A7   03                 sta    hst_val,x  E483 30   04                 leax   HRECSIZ,x  E485 8C   049A               cmpx   #hstptr   end of Queue?  E488 25   03                 blo    10f  E48A 8E   045A               ldx    #hstbuf  E48D BF   049A     10        stx    hstptr  E490 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E492 34   16       H_fio     pshs   d,x  E494 BE   049A               ldx    hstptr    get history queue pointer  E497 96   09                 lda    fio_cpu  E499 A7   84                 sta    hst_cmd,x  E49B 96   0A                 lda    fio_cpu1  E49D A7   01                 sta    hst_seq,x  E49F 96   0D                 lda    fio_cpu3  E4A1 A7   02                 sta    hst_tty,x  E4A3 96   0C                 lda    fio_cpu2  E4A5 A7   03                 sta    hst_val,x  E4A7 30   04                 leax   HRECSIZ,x  E4A9 8C   049A               cmpx   #hstptr   end of Queue?  E4AC 25   03                 blo    10f  E4AE 8E   045A               ldx    #hstbuf  E4B1 BF   049A     10        stx    hstptr  E4B4 35   96                 puls   d,x,pcFIO Simulation Structure             13:15:36  Apr 02, 2024   Page   46Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4B6 BE   0409     change    ldx    utask     point to task table entry >E4B9 17   006D               lbsr   putrun    put on ready list                     *  E4BC               rsched    seti   mask      interrupts  E4BC 1A   50                 orcc   #FF|IF                               endm  E4BE BE   0409               ldx    utask     point to current task  E4C1 10EF 88 13              sts    umark0,x  save stack pointers  E4C5 BE   049C               ldx    tsktab    point to task table  E4C8 8D   23                 bsr    swtchu    switch users  E4CA 7F   040D               clr    idle      reset idle/running flag                     *  E4CD 7F   040C     rsche2    clr    chproc    reset change flag >E4D0 17   0025               lbsr   getjob    get a new task  E4D3 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4D5 86   7F       05        lda    #127      set higheset priority  E4D7 B7   040B               sta    jobpri    set as current  E4DA                         clri   clear     interrupts  E4DA 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4DC 12                      nop  E4DD                         seti  E4DD 1A   50                 orcc   #FF|IF                               endm  E4DF 20   EC                 bra    rsche2    loop til find a ready one                     *  E4E1 F7   040B     rsche3    stb    jobpri    set new priority  E4E4 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             13:15:36  Apr 02, 2024   Page   47Scheduler  routines                                   E4E6 BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4E9 CC   0001               ldd    #1        return 1 to new task  E4EC 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4ED 35   20       swtchu    puls   y         get return address  E4EF BF   0409               stx    utask     set up new running task  E4F2 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4F6 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             13:15:37  Apr 02, 2024   Page   48Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4F8 5F            getjob    clrb             clear      flag  E4F9 BE   0403               ldx    runlst    point to head of list  E4FC 27   1F                 beq    getjo6    empty list?                     *  E4FE A6   04       getjo1    lda    tsstat,x  get status byte  E500 81   01                 cmpa   #TRUN     is it in run state?  E502 26   1B                 bne    getjo8                     *  E504 5D                      tstb             first      in list?  E505 27   06                 beq    getjo2                     *  E507 EC   84                 ldd    tslink,x  remove from list  E509 ED   A4                 std    tslink,y  E50B 20   07                 bra    getjo4                     *  E50D 10AE 84       getjo2    ldy    tslink,x  remove from list head  E510 10BF 0403               sty    runlst    set new head                     *  E514 E6   05       getjo4    ldb    tsprir,x  get priority  E516 6F   84                 clr    tslink,x  zero out link  E518 6F   01                 clr    tslink+1,x so not run list  E51A 86   FF                 lda    #$ff      set ne status  E51C 39                      rts              return                         *  E51D 4F            getjo6    clra             set        eq status  E51E 39                      rts                     *  E51F 1F   12       getjo8    tfr    x,y       save old pos  E521 AE   84                 ldx    tslink,x  follow link  E523 27   F8                 beq    getjo6                     *  E525 C6   01                 ldb    #1        set flag  E527 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             13:15:37  Apr 02, 2024   Page   49Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E529 34   01       putrun    pshs   cc        save status  E52B                         seti   mask      interrupts  E52B 1A   50                 orcc   #FF|IF                               endm  E52D 10BE 0403               ldy    runlst    point to head  E531 26   0A                 bne    putru2  E533 BF   0403               stx    runlst    set new head                     *  E536 CC   0000     putru1    ldd    #0        set last link  E539 ED   84                 std    tslink,x  E53B 35   81                 puls   cc,pc     return                     *  E53D E6   05       putru2    ldb    tsprir,x  get priority  E53F E1   25                 cmpb   tsprir,y  look for correct prior slot  E541 2F   08                 ble    putru4                     *  E543 FC   0403               ldd    runlst  E546 BF   0403               stx    runlst    set new head  E549 20   0F                 bra    putru5    link in rest                     *  E54B 1F   23       putru4    tfr    y,u       save last look  E54D 10AE A4                 ldy    tslink,y  follow link  E550 27   0C                 beq    putru6                     *  E552 E1   25                 cmpb   tsprir,y  check priority  E554 2F   F5                 ble    putru4                     *  E556 EC   C4                 ldd    tslink,u  link into list here  E558 AF   C4                 stx    tslink,u                     *  E55A ED   84       putru5    std    tslink,x  E55C 35   81                 puls   cc,pc     return                     *  E55E AF   C4       putru6    stx    tslink,u  E560 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             13:15:37  Apr 02, 2024   Page   50Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E562 86   01       makrdy    lda    #TRUN     set status  E564 A7   04                 sta    tsstat,x  E566 CC   0000               ldd    #0        clear events flag  E569 ED   06                 std    tsevnt,x  E56B 8D   BC                 bsr    putrun    put on ready list  E56D E6   05                 ldb    tsprir,x  get priority  E56F F1   040B               cmpb   jobpri    higher than current?  E572 2F   03                 ble    makrd6                     *  E574 7C   040C               inc    chproc    set change flag                     *  E577 39            makrd6    rts              return    FIO Simulation Structure             13:15:37  Apr 02, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E578 34   57       wakeup    pshs   cc,d,x,u  save registers  E57A                         seti   mask      interupts  E57A 1A   50                 orcc   #FF|IF                               endm  E57C CE   0405               ldu    #slplst  E57F AE   42                 ldx    tsslnk,u  point to sleep list  E581 27   0B                 beq    wakeu4                     *  E583 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E586 27   08                 beq    wakeu5  E588 33   84                 leau   0,x       mark this entry                     *  E58A AE   02       wakeu3    ldx    tsslnk,x  follow chain  E58C 26   F5                 bne    wakeu2    end of list?                     *  E58E 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E590 34   70       wakeu5    pshs   x,y,u     save registers  E592 EC   02                 ldd    tsslnk,x  remove from list  E594 ED   42                 std    tsslnk,u  E596 8D   CA                 bsr    makrdy    put on ready list  E598 35   70                 puls   u,x,y  E59A 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             13:15:38  Apr 02, 2024   Page   52Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E59C 34   51       sleep     pshs   cc,x,u    save registers  E59E BE   0409               ldx    utask     point to task  E5A1 6D   08                 tst    tssgnl,x  any signals waiting?  E5A3 26   1F                 bne    sleep7                     *  E5A5                         seti   mask      ints  E5A5 1A   50                 orcc   #FF|IF                               endm  E5A7 E7   05                 stb    tsprir,x  set priority  E5A9 10AF 06                 sty    tsevnt,x  set event  E5AC 86   02                 lda    #TSLEEP   set status  E5AE A7   04                 sta    tsstat,x  E5B0 FC   0407               ldd    slplst+tsslnk get head of list  E5B3 ED   02                 std    tsslnk,x  set new link  E5B5 BF   0407               stx    slplst+tsslnk set new head  E5B8 17   FF01               lbsr   rsched    reschedule cpu                       E5BB BE   0409     20        ldx    utask     get task entry  E5BE 6D   08                 tst    tssgnl,x  any signals waiting?  E5C0 26   02                 bne    sleep7                     *  E5C2 35   D1                 puls   cc,x,u,pc return                     *  E5C4 BE   0409     sleep7    ldx    utask     reset signal  E5C7 6F   08                 clr    tssgnl,x  E5C9 EC   88 15              ldd    umark1,x  stack reset point  E5CC 35   51                 puls   cc,x,u    reset cc and registers  E5CE 1F   04                 tfr    d,s       change stacks  E5D0 39                      rts              returnFIO Simulation Structure             13:15:38  Apr 02, 2024   Page   53Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5D1 34   76       xmtint    pshs   d,x,y,u   save registers  E5D3 A6   04                 lda    tsstat,x  get task state  E5D5 81   01                 cmpa   #TRUN     running?  E5D7 26   06                 bne    10f       no - try something else                     *  E5D9 86   01                 lda    #1        set signal  E5DB A7   08                 sta    tssgnl,x  E5DD 20   0E                 bra    99f       exit                     *  E5DF 81   02       10        cmpa   #TSLEEP   task sleeping?  E5E1 26   0A                 bne    99f       no - can't send interrupt                     *  E5E3 86   01                 lda    #1        set signal  E5E5 A7   08                 sta    tssgnl,x  E5E7 10AE 06                 ldy    tsevnt,x  wake task up >E5EA 17   FF8B               lbsr   wakeup                     *  E5ED 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             13:15:38  Apr 02, 2024   Page   54Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5EF               DEV_SOCK  E5EF E3B0                    fdb    bad_cmd   0  E5F1 E6DE                    fdb    skopen    S_OPEN    1 open socket  E5F3 E77E                    fdb    skclos    S_CLOSE   2 close socket  E5F5 E99F                    fdb    skreqwr   S_RQWR    3 request write to socket  E5F7 E9E6                    fdb    sksend    S_SEND    4 write data to socket  E5F9 E90F                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5FB E95C                    fdb    skrecv    S_RECV    6 read data from socket  E5FD ED0B                    fdb    skintrp   S_INTRPT  7 interrupt socket  E5FF E7CB                    fdb    skconn    S_CONNECT 8 connect socket  E601 E861                    fdb    skbind    S_BIND    9 bind socket  E603 E8A6                    fdb    sklist    S_LISTEN  10 listen on socket  E605 E8D8                    fdb    skacpt    S_ACCEPT  11 accept connection  E607 ED0B                    fdb    skdisc    S_DISCON  12 disconnect socket  E609 ED0B                    fdb    sksmac    S_SNDMAC  13 send mac  E60B ED0B                    fdb    skskep    S_SNDKEP  14 send keep alive  E60D EC47                    fdb    skspcl    S_SPCL    15 special command  E60F EA29                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E611 EAA0                    fdb    skurrd    S_RREAD   17 read data readfrom  E613 EACE                    fdb    skurwt    S_WRQSTO  18 request write sendto  E615 EB73                    fdb    skusnt    S_WSNDTO  19 write data sendto  E617 EB1D                    fdb    skusnm    S_WSNDTM  20 write data send more  E619 EC27                    fdb    sknbsr    S_RQSBLK  21 netblock req send ext block  E61B EC37                    fdb    sknbsd    S_SNDBLK  22 netblock send ext block  E61D EBAD                    fdb    sknbrr    S_RQRBLK  23 netblock req read ext block  E61F EC04                    fdb    sknbrd    S_RDRBLK  24 netblock read ext block                     *  E621 E698                    fdb    skinthan  16 socket interrupt handler  E623 E627                    fdb    skinit    17 socket initialization  E625 E695                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                          *                     * do everything to init the system                     *               E627  skinit    equ    *  E627 BD   ED12               jsr    spinit    set SPI  E62A C6   82                 ldb    #%10000010 software reset + force ARPFIO Simulation Structure             13:15:39  Apr 02, 2024   Page   55wz socket interface routines                          E62C BD   EDE2               jsr    PCRMR  E62F BD   EDD3     01        jsr    GCRMR  E632 5D                      tstb  E633 2B   FA                 bmi    01b                     *  E635 C6   78                 ldb    #%01111000 power up  E637 BD   EFC0               jsr    PCRPHY    set the PHY part  E63A CC   8000               ldd    #32768  E63D FD   0457               std    wzanyp    set value for Source port  E640 39                      rts                                          *                     * check if ROM locations are preset, if not skip this here                     * else setup device with provided values                     *  E641 108E E000     skdvini   ldy    #wzifma   where mac address is to be found  E645 EC   A1       03        ldd    0,y++  E647 1083 FFFF               cmpd   #$ffff    not set  E64B 26   07                 bne    02f  E64D 108C E012               cmpy   #wzifga+4 past area  E651 25   F2                 blo    03b                     * ROM not initialized, do nothing  E653 39                      rts                                          *                     * values present, setup device                     *  E654 34   66       02        pshs   d,y,u  E656 DE   1A                 ldu    fifo_us1  E658 108E E006               ldy    #wzifip   source IP  E65C EC   A1                 ldd    0,y++  E65E ED   C1                 std    0,u++  E660 EC   A1                 ldd    0,y++  E662 ED   C1                 std    0,u++  E664 108E E00A               ldy    #wzifnm   netmask  E668 EC   A1                 ldd    0,y++  E66A ED   C1                 std    0,u++  E66C EC   A1                 ldd    0,y++  E66E ED   C1                 std    0,u++  E670 108E E00E               ldy    #wzifga   gateway ip  E674 EC   A1                 ldd    0,y++  E676 ED   C1                 std    0,u++  E678 EC   A1                 ldd    0,y++  E67A ED   C1                 std    0,u++  E67C 108E E000               ldy    #wzifma   mac address  E680 EC   A1                 ldd    0,y++  E682 ED   C1                 std    0,u++  E684 EC   A1                 ldd    0,y++  E686 ED   C1                 std    0,u++  E688 EC   A1                 ldd    0,y++  E68A ED   C1                 std    0,u++                     *FIO Simulation Structure             13:15:39  Apr 02, 2024   Page   56wz socket interface routines                          E68C C6   FF                 ldb    #$ff      set active  E68E E7   C4                 stb    0,u  E690 BD   EC76               jsr    wzwdev    init device with settings  E693 35   E6                 puls   d,y,u,pc                                          *                     * test if device is present                     *  E695 1A   01       sktest    sec              yes  E697 39                      rts                                          *                     * skinthan, fromddevice table                     *               E698  skinthan  equ    *  E698 39                      rts                                          *                     * device signal handle, from master                     *               E699  sdev_sig  equ    *  E699 39                      rts                                          *                     * get a new source port                     *  E69A FC   0457     sknewp    ldd    wzanyp    else create one  E69D                         incd  E69D 104C                    fdb    $104c                               endm  E69F 1083 FFF0               cmpd   #$FFF0  E6A3 25   03                 blo    03f  E6A5 CC   8000               ldd    #$8000  E6A8 FD   0457     03        std    wzanyp  E6AB 39                      rts                                                               *                     * check if W5500 is active                     * wzdevt, device test, return Z if running, NZ if not                     *  E6AC 34   22       wzdevt    pshs   a,y  E6AE 109E 1A                 ldy    fifo_us1  device info  E6B1 A6   A8 12              lda    wzdsta,y  E6B4 81   FF                 cmpa   #$ff      open  E6B6 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info, set E register                     *  E6B8 A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E6BA                         trfr   A,EFIO Simulation Structure             13:15:39  Apr 02, 2024   Page   57wz socket interface routines                          E6BA 1F                      fcb    $1f  E6BB 8E                      fcb    A<<4|E                               endm  E6BC 6F   47                 clr    wzerr,u   init result  E6BE 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E6BF 34   06       skctcp    pshs   d  E6C1 EC   C8 26              ldd    wztype,u  SOCK_STREAM  E6C4 C1   01                 cmpb   #SK_STRM  is TCP  E6C6 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E6C8 34   06       skcudp    pshs   d  E6CA EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6CD C1   02                 cmpb   #SK_DGRM  is UDP  E6CF 35   86                 puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E6D1 34   06       skcraw    pshs   d  E6D3 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6D6 C1   03                 cmpb   #SK_MRAW  is RAW socket  E6D8 27   02                 beq    01f  E6DA C1   04                 cmpb   #SK_IRAW  E6DC 35   86       01        puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E6DE  skopen    equ    * >E6DE BD   E6B8               jsr    skfres                     *                     * check if DEVICE is active                     * >E6E1 BD   E6AC               jsr    wzdevt  E6E4 27   06                 beq    11f  E6E6 BD   E799               jsr    skclin    NO, close internal and don't startFIO Simulation Structure             13:15:39  Apr 02, 2024   Page   58wz socket interface routines                         >E6E9 16   0064     04        lbra   skoper1                     *                     * retry, we do all things                     *  E6EC A6   42       11        lda    wzfsta,u  check if allocated by OS  E6EE 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  E6F0 6F   43                 clr    wzflg,u   erase flags  E6F2 6F   41                 clr    wzdctr,u  init counter  E6F4 EC   C8 24              ldd    wzfaml,u  E6F7 C1   02                 cmpb   #AF_INET  E6F9 26   EE                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E6FB EC   C8 26              ldd    wztype,u  E6FE C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E700 27   26                 beq    01f  E702 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E704 27   1E                 beq    21f  E706 C1   03                 cmpb   #SK_MRAW  SOCK_RAW  E708 27   16                 beq    41f  E70A C1   04                 cmpb   #SK_IRAW  IP_RAW  E70C 26   46                 bne    skoper2                     *                     * raw socket, set protocol register first (only socket 0!!)                     * UDP and TCP are handled in a different way                     *  E70E EC   C8 28              ldd    wzprot,u  what is the protocol option?  E711 C1   06                 cmpb   #SP_TCP   not allowed  E713 27   3F                 beq    skoper2  E715 C1   11                 cmpb   #SP_UDP   not allowed  E717 27   3B                 beq    skoper2  E719 BD   F123               jsr    PSRPROT   set protocol register                     *  E71C C6   03                 ldb    #%00000011 IPRAW  E71E 20   0A                 bra    07f                     * nacraw  E720 C6   04       41        ldb    #%00000100 MACRAW  E722 20   06                 bra    07f                     * dgram  E724 C6   02       21        ldb    #%00000010 UDP  E726 20   02                 bra    07f                     * TCP socket  E728 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E72A BD   EFED     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *FIO Simulation Structure             13:15:40  Apr 02, 2024   Page   59wz socket interface routines                          E72D C6   01                 ldb    #WCOPEN   open the device  E72F E7   44                 stb    wzcmnd,u  copy command  E731 BD   F00B               jsr    PSRCR  E734 108E 0000               ldy    #0        nopoll                     *                     * interrupts not expected                     *               E738  skowfo    equ    *  E738 BD   F03F     21        jsr    GSRSR     get status  E73B E7   45                 stb    wzstat,u  E73D C1   00                 cmpb   #WSCLSD   not closed?  E73F 26   0B                 bne    22f                     *  E741 6A   41                 dec    wzdctr,u  delay counter  E743 27   0F                 beq    skoper2  E745 108E E738               ldy    #skowfo  E749 7E   E838               jmp    polext    switch tasks                     *  E74C 4F            22        clra  E74D C6   01                 ldb    #R_OPEN   response  E74F 39            99        rts                     *  E750 86   01       skoper1   lda    #1        device not initialized  E752 20   02                 bra    12f  E754 86   02       skoper2   lda    #2        type error  E756 C6   C0       12        ldb    #E_SOCKET  E758 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E75A 34   10       num2bt    pshs   x  E75C 8E   E775               ldx    #bittab  E75F 3A                      abx  E760 E6   84                 ldb    0,x  E762 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E764 34   10       bt2num    pshs   x  E766 8E   E775               ldx    #bittab  E769 6F   E2                 clr    0,-s  E76B E1   80       02        cmpb   0,x+  E76D 27   04                 beq    01f  E76F 6C   E4                 inc    0,s  E771 20   F8                 bra    02b  E773 35   94       01        puls   b,x,pc                                          * table  E775 00            bittab    fcb    0FIO Simulation Structure             13:15:40  Apr 02, 2024   Page   60wz socket interface routines                          E776 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E77A 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                          ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E77E  skclos    equ    *  E77E BD   E6B8               jsr    skfres  E781 C6   08                 ldb    #WCDISC  E783 E7   44                 stb    wzcmnd,u  E785 BD   F00B               jsr    PSRCR     send disconnect                     *  E788 8D   0F                 bsr    skclin  E78A                         clrd  E78A 104F                    fdb    $104f                               endm  E78C ED   C8 24              std    wzfaml,u  E78F ED   C8 26              std    wztype,u  E792 ED   C8 28              std    wzprot,u                     *  E795 4F                      clra  E796 C6   02                 ldb    #R_CLOSE  response  E798 39                      rts                                          *                     * wzclin, close interal                     *  E799 34   06       skclin    pshs   d  E79B C6   10                 ldb    #WCCLOS   do close  E79D E7   44                 stb    wzcmnd,u  E79F BD   F00B               jsr    PSRCR                     *                     * erase registers in device                     *  E7A2 CC   0000               ldd    #0  E7A5 BD   F05D               jsr    PSRPORT   source port                     *  E7A8 A6   42                 lda    wzfsta,u  E7AA 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E7AC A7   42                 sta    wzfsta,u  E7AE CC   0000               ldd    #0  E7B1 ED   48                 std    wzxfer,u  clear remaining size                     *  E7B3 BD   F03F     91        jsr    GSRSR  E7B6 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E7B8 CC   0000               ldd    #0  E7BB ED   C8 10              std    wzsprt,u  erase old info  E7BE ED   C8 14              std    wzipad,uFIO Simulation Structure             13:15:40  Apr 02, 2024   Page   61wz socket interface routines                          E7C1 ED   C8 16              std    wzipad+2,u  E7C4 ED   C8 12              std    wzdprt,u  E7C7 E7   43                 stb    wzflg,u   clear flags                     *  E7C9 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E7CB  skconn    equ    *  E7CB BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E7CE BD   E6AC               jsr    wzdevt  E7D1 27   06                 beq    01f >E7D3 BD   E77E               jsr    skclos    NO, don't start >E7D6 16   007A     02        lbra   skcner4  E7D9 BD   E6BF     01        jsr    skctcp    not in tcp, illegal  E7DC 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E7DE BD   F03F     11        jsr    GSRSR     status  E7E1 E7   45                 stb    wzstat,u  check if properly setup  E7E3 C1   13                 cmpb   #WSINIT   SHOULD BE >E7E5 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E7E9 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E7EC                         ordx   wzipad+2,IU  E7EC 10AA                    fdb    $10aa  E7EE                         doindx wzipad+2,IU  E7EE C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E7F0 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E7F2 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E7F5                         incd  E7F5 104C                    fdb    $104c                               endm  E7F7 26   07                 bne    01f  E7F9 EC   C8 16              ldd    wzipad+2,u  E7FC                         incd  E7FC 104C                    fdb    $104c                               endmFIO Simulation Structure             13:15:41  Apr 02, 2024   Page   62wz socket interface routines                          E7FE 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E800 EC   C8 12    01        ldd    wzdprt,u  check destination port  E803 27   4A                 beq    skcner5   is not set, error                     *  E805 BD   F0E7               jsr    PSRDPOR   set destination port  E808 31   C8 14              leay   wzipad,u  load socket  E80B BD   F0C1               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E80E BD   E69A               jsr    sknewp    get new  E811 ED   C8 10              std    wzsprt,u  tell us what you took  E814 BD   F05D               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E817 C6   04                 ldb    #WCCONN  E819 E7   44                 stb    wzcmnd,u  E81B BD   F00B               jsr    PSRCR     do connect                     *                     *                     *  E81E BD   E6B8     conlb1    jsr    skfres  E821 BD   F03F               jsr    GSRSR     update status  E824 E7   45                 stb    wzstat,u  E826 C1   17                 cmpb   #WSESTB  E828 27   0A                 beq    90f  E82A C1   00                 cmpb   #WSCLSD  E82C 27   16                 beq    skcner2  E82E 108E E81E               ldy    #conlb1  E832 20   04                 bra    polext                     *  E834 4F            90        clra  E835 C6   08                 ldb    #R_CONNECT  E837 39            99        rts                                          *                     * polexit, Y=where to return                     *  E838 10AF 0F       polext    sty    tsagin,x  here to restart  E83B C6   BA                 ldb    #POLPRI  E83D E7   05                 stb    tsprir,x  E83F 108E FFFF               ldy    #$ffFF  E843 39                      rts                       E844 C6   0C       skcner2   ldb    #R_DISCON  E846 20   EF                 bra    99b                       E848 BD   E799     skcner6   jsr    skclin    reset openFIO Simulation Structure             13:15:41  Apr 02, 2024   Page   63wz socket interface routines                          E84B 86   0F                 lda    #15       not properly setup  E84D 20   0E                 bra    09f  E84F 86   0E       skcner5   lda    #14       destination port not set  E851 20   0A                 bra    09f  E853 86   0A       skcner4   lda    #10       device not initialized  E855 20   06                 bra    09f  E857 86   0B       skcner1   lda    #11       IP address invalid  E859 20   02                 bra    09f  E85B 86   0D       skcner3   lda    #13  E85D C6   C0       09        ldb    #E_SOCKET  E85F 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E861  skbind    equ    *  E861 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E864 BD   E6AC               jsr    wzdevt  E867 1026 00EC               lbne   rdrqer1  E86B BD   E6BF               jsr    skctcp    check TCP  E86E 27   12                 beq    01f  E870 BD   E6C8               jsr    skcudp    check UDP >E873 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E877 BD   F03F               jsr    GSRSR     status  E87A E7   45                 stb    wzstat,u  E87C C1   22                 cmpb   #WSUDP    check  E87E 27   0D                 beq    03f  E880 20   07                 bra    04f                       E882 BD   F03F     01        jsr    GSRSR     status  E885 E7   45                 stb    wzstat,u  E887 C1   13                 cmpb   #WSINIT   should be >E889 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E88D BD   E69A     03        jsr    sknewp  E890 ED   C8 12              std    wzdprt,u  E893 BD   F0E7               jsr    PSRDPOR   destination portFIO Simulation Structure             13:15:41  Apr 02, 2024   Page   64wz socket interface routines                          E896 EC   C8 10              ldd    wzsprt,u  E899 BD   F05D               jsr    PSRPORT   source port                     *  E89C 31   C8 14              leay   wzipad,u  E89F BD   F0C1               jsr    PSRDIP    source IP                     *  E8A2 4F                      clra  E8A3 C6   09                 ldb    #R_BIND  E8A5 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8A6  sklist    equ    *  E8A6 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8A9 BD   E6AC               jsr    wzdevt  E8AC 1026 00A7     02        lbne   rdrqer1  E8B0 BD   E6BF               jsr    skctcp  E8B3 26   F7                 bne    02b                     *                     * go on                     *                     *  E8B5 BD   F03F               jsr    GSRSR     status  E8B8 E7   45                 stb    wzstat,u                     *  E8BA C1   00                 cmpb   #WSCLSD   closed?  E8BC 27   0F                 beq    80f  E8BE C1   13                 cmpb   #WSINIT   opened  E8C0 26   0F                 bne    90f                     *  E8C2 C6   02                 ldb    #WCLIST  E8C4 E7   44                 stb    wzcmnd,u  E8C6 BD   F00B               jsr    PSRCR                     *  E8C9 4F                      clra  E8CA C6   0A                 ldb    #R_LISTEN  E8CC 39                      rts                                          *  E8CD 4F            80        clra  E8CE C6   02                 ldb    #R_CLOSE  E8D0 39                      rts                     *FIO Simulation Structure             13:15:42  Apr 02, 2024   Page   65wz socket interface routines                          E8D1 108E E8A6     90        ldy    #sklist  E8D5 7E   E838               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8D8  skacpt    equ    *  E8D8 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8DB BD   E6AC               jsr    wzdevt >E8DE 1026 0075     02        lbne   rdrqer1  E8E2 BD   E6BF               jsr    skctcp  E8E5 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E8E7 BD   F03F               jsr    GSRSR     status  E8EA E7   45                 stb    wzstat,u  E8EC C1   17                 cmpb   #WSESTB   connected  E8EE 26   10                 bne    01f  E8F0 BD   F0D8               jsr    GSRDPOR   fill in peer port  E8F3 ED   C8 12              std    wzdprt,u  E8F6 31   C8 14              leay   wzipad,u  E8F9 BD   F0AA               jsr    GSRDIP                     *  E8FC 4F                      clra  E8FD C6   0B                 ldb    #R_ACCEPT  E8FF 39                      rts                     *  E900 C1   00       01        cmpb   #WSCLSD  E902 26   04                 bne    02f  E904 4F                      clra  E905 C6   02                 ldb    #R_CLOSE  E907 39                      rts                     *  E908 108E E8D8     02        ldy    #skacpt  E90C 7E   E838               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *FIO Simulation Structure             13:15:42  Apr 02, 2024   Page   66wz socket interface routines                                       E90F  skreqrd   equ    *  E90F BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E912 BD   E6AC               jsr    wzdevt >E915 1026 003E     02        lbne   rdrqer1  E919 BD   E6BF               jsr    skctcp    check TCP  E91C 26   F7                 bne    02b                     *                     * go on                     *                     *  E91E BD   F03F               jsr    GSRSR  E921 E7   45                 stb    wzstat,u  update status  E923 C1   00                 cmpb   #WSCLSD  E925 27   27                 beq    60f  E927 BD   F1F6               jsr    GSRRXRS   data available?  E92A ED   48                 std    wzxfer,u  E92C 26   1C                 bne    70f                     *  E92E A6   C8 26              lda    wztype,u  check flags  E931 85   01                 bita   #WFNBLK   non block  E933 26   11                 bne    75f                     *  E935 E6   45                 ldb    wzstat,u  E937 C1   17       17        cmpb   #WSESTB   still active  E939 27   04                 beq    20f                       E93B C1   1C                 cmpb   #WSCLWT  E93D 27   0F                 beq    60f                     *  E93F 108E E90F     20        ldy    #skreqrd  E943 7E   E838               jmp    polext                                          *************************  E946 4F            75        clra  E947 C6   15                 ldb    #R_RQRDNB tell no data  E949 39                      rts                                          * data present  E94A 4F            70        clra  E94B C6   05                 ldb    #R_RQRD  E94D 39                      rts                                          * close socket and return  E94E C6   06       60        ldb    #PIPES  E950 BD   E449               jsr    send_SI   send to main CPU  E953 4F                      clra  E954 C6   02                 ldb    #R_CLOSE  E956 39                      rts                     FIO Simulation Structure             13:15:42  Apr 02, 2024   Page   67wz socket interface routines                                               E957 86   82       rdrqer1   lda    #130  E959 C6   C0                 ldb    #E_SOCKET  E95B 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock, X=task struct                     *               E95C  skrecv    equ    *  E95C BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E95F BD   E6AC               jsr    wzdevt >E962 1026 FFF1               lbne   rdrqer1  E966 BD   E6BF     02        jsr    skctcp  E969 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E96B BD   F1F6               jsr    GSRRXRS   received size                     * D total aviable data  E96E 108E 0020               ldy    #fifo     target  E972 BD   F2C6               jsr    RDSK2FB   transfer datat to fifo  E975 ED   48                 std    wzxfer,u  save it                     *                     * here check if PROT_XLTEOF is set                     *  E977 6D   C8 28              tst    wzprot,u  PROT_XLTEOL is $8000  E97A 2A   18                 bpl    01f                     *  E97C 34   36                 pshs   d,x,y  E97E 1F   01                 tfr    d,x       count  E980 108E 0020               ldy    #fifo  E984 A6   A4       03        lda    0,y  E986 81   0A                 cmpa   #LF       is line feed  E988 26   02                 bne    02f  E98A 86   0D                 lda    #CR       make it Return  E98C A7   A0       02        sta    0,y+  E98E 30   1F                 leax   -1,x      count  E990 26   F2                 bne    03b  E992 35   36                 puls   d,x,y                     *  E994 C6   40       01        ldb    #WCRECV  E996 E7   44                 stb    wzcmnd,u  E998 BD   F00B               jsr    PSRCR     tell sender we took it                       E99B C6   06                 ldb    #R_READ   tell data in fifo  E99D 4F                      clraFIO Simulation Structure             13:15:43  Apr 02, 2024   Page   68wz socket interface routines                          E99E 39                      rts                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E99F  skreqwr   equ    *  E99F BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9A2 BD   E6AC               jsr    wzdevt >E9A5 1026 FFAE     02        lbne   rdrqer1  E9A9 BD   E6BF               jsr    skctcp  E9AC 26   F7                 bne    02b                     *                     * go on                     *                     *  E9AE BD   F03F               jsr    GSRSR  E9B1 E7   45                 stb    wzstat,u  update status  E9B3 C1   00                 cmpb   #WSCLSD  E9B5 27   12                 beq    30f  E9B7 BD   F1AA               jsr    GSRTXFR   free size (remaining)  E9BA 10A3 4A                 cmpd   wzrqln,u  would it fit  E9BD 24   11                 bhs    70f                     *  E9BF E6   45       10        ldb    wzstat,u  E9C1 C1   17                 cmpb   #WSESTB  E9C3 27   1A                 beq    20f  E9C5 C1   1C                 cmpb   #WSCLWT  E9C7 26   0D                 bne    60f  E9C9 CC   0000     30        ldd    #0  E9CC ED   48                 std    wzxfer,u  E9CE 20   06                 bra    60f                     * data space  E9D0 4F            70        clra  E9D1 C6   03                 ldb    #R_RQWR  E9D3 39                      rts                                          * data space exhausted, would block  E9D4 4F            72        clra                     **        ldb     #R_RQWRWB  E9D5 39                      rts                                          * close socket and return  E9D6 C6   06       60        ldb    #PIPES  E9D8 BD   E449               jsr    send_SI   send to main CPU  E9DB 4F                      clraFIO Simulation Structure             13:15:43  Apr 02, 2024   Page   69wz socket interface routines                          E9DC C6   02                 ldb    #R_CLOSE  E9DE 39                      rts                                          *  E9DF 108E E99F     20        ldy    #skreqwr  E9E3 7E   E838               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9E6  sksend    equ    *  E9E6 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9E9 BD   E6AC               jsr    wzdevt  E9EC 1026 FF67     02        lbne   rdrqer1  E9F0 BD   E6BF               jsr    skctcp  E9F3 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E9F5 BD   F1AA               jsr    GSRTXFR   free size (remaining)                     * D = total available space  E9F8 6D   C8 28              tst    wzprot,u  check if PROT_XLTEOL is set  E9FB 2A   18                 bpl    01f                     *  E9FD 34   36                 pshs   d,x,y  E9FF 1F   01                 tfr    d,x       count  EA01 108E 0020               ldy    #fifo  EA05 A6   A4       03        lda    0,y  EA07 81   0D                 cmpa   #CR       Return?  EA09 26   02                 bne    02f  EA0B 86   0A                 lda    #LF       make it Line feed  EA0D A7   A0       02        sta    0,y+  EA0F 30   1F                 leax   -1,x      count  EA11 26   F2                 bne    03b  EA13 35   36                 puls   d,x,y                     *  EA15 108E 0020     01        ldy    #fifo     target  EA19 BD   F314               jsr    WRFB2SK   transfer from fifo to socket  EA1C ED   48                 std    wzxfer,u  save it  EA1E C6   20                 ldb    #WCSEND  EA20 E7   44                 stb    wzcmnd,u  EA22 BD   F00B               jsr    PSRCR     tell sender it is coming                     FIO Simulation Structure             13:15:43  Apr 02, 2024   Page   70wz socket interface routines                          EA25 C6   04                 ldb    #R_WRITE  tell data in fifo  EA27 4F                      clra  EA28 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA29  skurrdf   equ    *  EA29 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA2C BD   E6AC               jsr    wzdevt  EA2F 1026 FF24     02        lbne   rdrqer1  EA33 BD   E6C8               jsr    skcudp  EA36 27   05                 beq    03f  EA38 BD   E6D1               jsr    skcraw  EA3B 26   F2                 bne    02b  EA3D               03                     *                     * go on                     *                     *  EA3D EC   C8 20              ldd    wzurms,u  check remaining size  EA40 26   4B                 bne    84f                     *                     * no  packet data present, wait for it                     *  EA42 BD   F03F               jsr    GSRSR  EA45 E7   45                 stb    wzstat,u  update status  EA47 C1   00                 cmpb   #WSCLSD  EA49 27   46                 beq    60f  EA4B BD   F1F6               jsr    GSRRXRS   data available?  EA4E ED   7E                 std    -2,s      test D  EA50 26   19                 bne    22f       keep waiting                     * no data yet, check socket state  EA52 E6   45                 ldb    wzstat,u  EA54 C1   22                 cmpb   #WSUDP    still active  EA56 27   0C                 beq    20f  EA58 C1   32                 cmpb   #WSIRAW  EA5A 27   08                 beq    20f  EA5C C1   42                 cmpb   #WSMRAW  EA5E 27   04                 beq    20f  EA60 C1   1C                 cmpb   #WSCLWT  EA62 27   2D                 beq    60f                     *  EA64 108E EA29     20        ldy    #skurrdf  EA68 7E   E838               jmp    polextFIO Simulation Structure             13:15:44  Apr 02, 2024   Page   71wz socket interface routines                                             *                     * first data present, set wzuipa, wzuprt, wzurms                     *  EA6B 31   C8 1A    22        leay   wzuipa,u  EA6E CC   0008               ldd    #8        size of header  EA71 BD   ED6A               jsr    bmread    copy data                     *                     * move pointer                     *  EA74 BD   F20D               jsr    GSRRXRP  EA77 C3   0008               addd   #8  EA7A BD   F21C               jsr    PSRRXRP   update pointer  EA7D C6   40                 ldb    #WCRECV  EA7F E7   44                 stb    wzcmnd,u  process move  EA81 BD   F00B               jsr    PSRCR                     *  EA84 EC   C8 20              ldd    wzurms,u  EA87 1083 05C0               cmpd   #MAX_UDP  max size  EA8B 22   0D                 bhi    78f                     *  EA8D 4F            84        clra  EA8E C6   21                 ldb    #R_RDFRM  EA90 39                      rts                                          * close socket and return  EA91 C6   06       60        ldb    #PIPES  EA93 BD   E449               jsr    send_SI   send to main CPU  EA96 4F                      clra  EA97 C6   02                 ldb    #R_CLOSE  EA99 39                      rts                                          *  EA9A BD   E799     78        jsr    skclin    close  EA9D C6   C0                 ldb    #E_SOCKET  EA9F 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EAA0  skurrd    equ    *  EAA0 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAA3 BD   E6AC               jsr    wzdevt  EAA6 1026 FEAD     02        lbne   rdrqer1  EAAA BD   E6C8               jsr    skcudp  EAAD 26   F7                 bne    02bFIO Simulation Structure             13:15:44  Apr 02, 2024   Page   72wz socket interface routines                                             *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  EAAF EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  EAB2 108E 0020               ldy    #fifo     target  EAB6 BD   F2C6               jsr    RDSK2FB   transfer data  EAB9 34   06                 pshs   d         xferred count  EABB EC   C8 20              ldd    wzurms,u  update  EABE A3   E1                 subd   0,s++  EAC0 ED   C8 20              std    wzurms,u  new remaining                     *  EAC3 C6   40       01        ldb    #WCRECV  EAC5 E7   44                 stb    wzcmnd,u  set processed  EAC7 BD   F00B               jsr    PSRCR                     *  EACA 4F                      clra  EACB C6   22                 ldb    #R_RRDFD  EACD 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EACE  skurwt    equ    *  EACE BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAD1 BD   E6AC               jsr    wzdevt  EAD4 1026 FE7F     02        lbne   rdrqer1  EAD8 BD   E6C8               jsr    skcudp  EADB 27   05                 beq    03f  EADD BD   E6D1               jsr    skcraw  EAE0 26   F2                 bne    02b  EAE2               03                     *                     * go on                     *                     *  EAE2 EC   C8 12              ldd    wzdprt,u  check illegal port  EAE5 1027 0084               lbeq   78f                     *  EAE9 EC   C8 14              ldd    wzipad,u  EAEC                         ordx   wzipad+2,IU  EAEC 10AA                    fdb    $10aa  EAEE                         doindx wzipad+2,IUFIO Simulation Structure             13:15:44  Apr 02, 2024   Page   73wz socket interface routines                          EAEE C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >EAF0 1027 0079               lbeq   78f                     * set network registers  EAF4 EC   C8 12              ldd    wzdprt,u  EAF7 BD   F0E7               jsr    PSRDPOR                       EAFA 31   C8 14              leay   wzipad,u  EAFD BD   F0C1               jsr    PSRDIP  EB00 EC   C8 10              ldd    wzsprt,u  EB03 26   11                 bne    04f                     *  EB05 EC   C8 10              ldd    wzsprt,u  already set?  EB08 26   09                 bne    16f  EB0A BD   E69A               jsr    sknewp    get new source port  EB0D ED   C8 10              std    wzsprt,u  EB10 ED   C8 1E              std    wzuprt,u  set also return port  EB13 BD   F05D     16        jsr    PSRPORT                     *  EB16 108E EB1D     04        ldy    #skuwr2   do remainder  EB1A 7E   E838               jmp    polext                                          *                     * after intial setup. loop here                     *               EB1D  skusnm    equ    *  EB1D BD   E6B8     skuwr2    jsr    skfres    set socket base  EB20 BD   E6AC               jsr    wzdevt    devie active >EB23 1026 FFAD               lbne   02b       no  EB27 BD   E6C8               jsr    skcudp    check open method  EB2A 26   A8                 bne    02b                     *  EB2C BD   F03F               jsr    GSRSR  EB2F E7   45                 stb    wzstat,u  update status  EB31 C1   00                 cmpb   #WSCLSD   closed  EB33 27   2F                 beq    60f  EB35 BD   F1AA               jsr    GSRTXFR   free size  EB38 10A3 C8 20              cmpd   wzurms,u  EB3C 24   19                 bhs    10f                     * no space yet  EB3E E6   45                 ldb    wzstat,u  EB40 C1   22                 cmpb   #WSUDP  EB42 27   0C                 beq    20f  EB44 C1   32                 cmpb   #WSIRAW   IPRAW  EB46 27   08                 beq    20f  EB48 C1   42                 cmpb   #WSMRAW   MACRAW  EB4A 27   04                 beq    20f  EB4C C1   1C                 cmpb   #WSCLWT   is closing  EB4E 27   14                 beq    60f                     *  EB50 108E EACE     20        ldy    #skurwtFIO Simulation Structure             13:15:45  Apr 02, 2024   Page   74wz socket interface routines                          EB54 7E   E838               jmp    polext    keep polling                     *  EB57 EC   C8 20    10        ldd    wzurms,u  EB5A 1083 05C0               cmpd   #MAX_UDP  too big  EB5E 22   0D                 bhi    78f                     *  EB60 4F                      clra  EB61 C6   23                 ldb    #R_RSNDTO  EB63 39                      rts                       EB64 C6   06       60        ldb    #PIPES  EB66 BD   E449               jsr    send_SI   send to main CPU  EB69 4F                      clra  EB6A C6   02                 ldb    #R_CLOSE  EB6C 39                      rts                       EB6D BD   E799     78        jsr    skclin    close  EB70 C6   C0                 ldb    #E_SOCKET  EB72 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EB73  skusnt    equ    *  EB73 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EB76 BD   E6AC               jsr    wzdevt  EB79 1026 FDDA     02        lbne   rdrqer1  EB7D BD   E6C8               jsr    skcudp  EB80 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EB82 EC   C8 20              ldd    wzurms,u  total data                     *  EB85 108E 0020               ldy    #fifo     target  EB89 BD   F314               jsr    WRFB2SK   fifo to socket  EB8C 34   06                 pshs   d  EB8E EC   C8 20              ldd    wzurms,u  all loaded  EB91 A3   E1                 subd   0,s++  EB93 ED   C8 20              std    wzurms,u  EB96 26   11                 bne    01f                       EB98 EC   C8 22              ldd    wzuwrp,u  is it usedFIO Simulation Structure             13:15:45  Apr 02, 2024   Page   75wz socket interface routines                          EB9B BD   F1E7               jsr    PSRTXWP   set write pointer                       EB9E C6   20                 ldb    #WCSEND  EBA0 E7   44                 stb    wzcmnd,u  EBA2 BD   F00B               jsr    PSRCR  EBA5 4F                      clra  EBA6 C6   24                 ldb    #R_WSNDTO data taken  EBA8 39                      rts                       EBA9 4F            01        clra  EBAA C6   25                 ldb    #R_SNDTOM ask for more  EBAC 39                      rts                                          ***************************************************************                     *                     * netblock, read block                     * the method is special, we need to send a request                     * over the net first (send) before new data can be returned                     * X=task struct, U=wzsock                     *                     ***************************************************************               EBAD  sknbrr    equ    *  EBAD BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EBB0 BD   E6AC               jsr    wzdevt  EBB3 1026 FDA0     02        lbne   rdrqer1  EBB7 BD   E6BF               jsr    skctcp  EBBA 26   F7                 bne    02b                     *  EBBC BD   F03F               jsr    GSRSR     get status  EBBF E7   45                 stb    wzstat,u  update sock  EBC1 C1   17                 cmpb   #WSESTB   established  EBC3 26   3C                 bne    sknbe1    error                     *  EBC5 BD   F1AA               jsr    GSRTXFR   get free space  EBC8 1083 0004               cmpd   #NBRQLN  EBCC 25   2A                 blo    sknbrp1   go poll  EBCE CC   0004               ldd    #NBRQLN                     *  EBD1 108E 001C               ldy    #fifo_us2 where request is present  EBD5 BD   F314               jsr    WRFB2SK  EBD8 C6   20                 ldb    #WCSEND   tell socket we put it  EBDA E7   44                 stb    wzcmnd,u  EBDC BD   F00B               jsr    PSRCR                     * request is out, wait for data  EBDF BD   F03F     sknbrp2   jsr    GSRSR  EBE2 E7   45                 stb    wzstat,u  EBE4 C1   17                 cmpb   #WSESTB  EBE6 26   19                 bne    sknbe1  EBE8 BD   F1F6               jsr    GSRRXRS   check responseFIO Simulation Structure             13:15:45  Apr 02, 2024   Page   76wz socket interface routines                          EBEB 1083 0204               cmpd   #NBSIZE   data available  EBEF 27   0D                 beq    01f  EBF1 108E EBDF               ldy    #sknbrp2  wait until  EBF5 7E   E838     02        jmp    polext  EBF8 108E EBAD     sknbrp1   ldy    #sknbrr  EBFC 20   F7                 bra    02b                     *  EBFE C6   32       01        ldb    #R_RQRBLK tell caller  EC00 39                      rts                       EC01 C6   C0       sknbe1    ldb    #E_SOCKET  EC03 39                      rts                                                                              EC04  sknbrd    equ    *  EC04 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC07 BD   E6AC               jsr    wzdevt  EC0A 1026 FD49     02        lbne   rdrqer1  EC0E BD   E6BF               jsr    skctcp  EC11 26   F7                 bne    02b                     * when we arrive here, the caller has allocated the fifo  EC13 CC   0204               ldd    #NBSIZE  EC16 108E 001C               ldy    #fifo_us2  EC1A BD   F2C6               jsr    RDSK2FB  EC1D C6   40                 ldb    #WCRECV   tell socket we took it  EC1F E7   44                 stb    wzcmnd,u  EC21 BD   F00B               jsr    PSRCR                     *  EC24 C6   33                 ldb    #R_RDRBLK tell caller, data in fifo_us2 and fifo  EC26 39                      rts                                                               ***************************************************************                     *                     * netblock, write block                     *                     ***************************************************************               EC27  sknbsr    equ    *  EC27 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC2A BD   E6AC               jsr    wzdevt  EC2D 1026 FD26     02        lbne   rdrqer1  EC31 BD   E6BF               jsr    skctcp  EC34 26   F7                 bne    02b                       EC36 39                      rtsFIO Simulation Structure             13:15:46  Apr 02, 2024   Page   77wz socket interface routines                                                                                 EC37  sknbsd    equ    *  EC37 BD   E6B8               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC3A BD   E6AC               jsr    wzdevt  EC3D 1026 FD16     02        lbne   rdrqer1  EC41 BD   E6BF               jsr    skctcp  EC44 26   F7                 bne    02b                       EC46 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               EC47  skspcl    equ    *                     *  EC47 34   10                 pshs   x  EC49 E6   0C                 ldb    tstval,x  get index  EC4B C1   03                 cmpb   #MAXTBL  EC4D 22   18                 bhi    01f       illegal  EC4F 58                      aslb  EC50 8E   EC6E               ldx    #functb  EC53 10AE 85                 ldy    b,x       get special function  EC56 27   0F                 beq    01f       not valid  EC58 35   10                 puls   x                     *  EC5A AD   A4                 jsr    0,y       do function  EC5C 26   05                 bne    90f                     *  EC5E 4F                      clra  EC5F C6   0F                 ldb    #R_SPCL  EC61 20   0A                 bra    99f                     *  EC63 86   A2       90        lda    #162  EC65 20   04                 bra    02f                     *  EC67 35   10       01        puls   x  EC69 86   A1                 lda    #161  EC6B               02  EC6B C6   C0                 ldb    #E_SOCKET                     *  EC6D 39            99        rts                       EC6E EC76          functb    fdb    wzwdev    write device settings  EC70 EC76                    fdb    wzwdev  EC72 ECA0                    fdb    wzrdev    read device settingsFIO Simulation Structure             13:15:46  Apr 02, 2024   Page   78wz socket interface routines                          EC74 ECBC                    fdb    showrg               0003  MAXTBL    equ    ((*-functb)/2)-1                                          *                     * write W5500 basic device settings                     *                     * X hold the task table                     * U holds the special sock address                     *  EC76               wzwdev  EC76 C6   08                 ldb    #8  EC78                         trfr   B,E  EC78 1F                      fcb    $1f  EC79 9E                      fcb    B<<4|E                               endm  EC7A DE   1A                 ldu    fifo_us1  device info area  EC7C 31   C4                 leay   0,u       myip  EC7E BD   EEA2               jsr    PCRSIP    source IP  EC81 31   44                 leay   4,u  EC83 BD   EE36               jsr    PCRSNM    subnet mask  EC86 31   48                 leay   8,u  EC88 BD   EE08               jsr    PCRGA     gateway IP  EC8B 31   4C                 leay   12,u  EC8D BD   EE6C               jsr    PCRSHA    hardware address                     *  EC90 A6   C8 12              lda    18,u      ON/OFF  EC93 27   04                 beq    01f  EC95 C6   F8                 ldb    #%11111000 all on  EC97 20   02                 bra    02f  EC99 C6   78       01        ldb    #%01111000 all off  EC9B BD   EFC0     02        jsr    PCRPHY  EC9E 4F                      clra             no error return status  EC9F 39                      rts                                          *                     * read W5500 basic device settings                     *  ECA0               wzrdev  ECA0 C6   08                 ldb    #8  ECA2                         trfr   B,E       select first socket  ECA2 1F                      fcb    $1f  ECA3 9E                      fcb    B<<4|E                               endm  ECA4 DE   1A                 ldu    fifo_us1  ECA6 31   C4                 leay   0,u       overwrite what was set  ECA8 BD   EE8B               jsr    GCRSIP  ECAB 31   44                 leay   4,u  ECAD BD   EE1F               jsr    GCRSNM  ECB0 31   48                 leay   8,u  ECB2 BD   EDF1               jsr    GCRGA  ECB5 31   4C                 leay   12,u  ECB7 BD   EE4D               jsr    GCRSHAFIO Simulation Structure             13:15:46  Apr 02, 2024   Page   79wz socket interface routines                          ECBA 4F                      clra             no error return status  ECBB 39                      rts                                          *                     * debug service, read selected registers                     *  ECBC               showrg  ECBC C6   08                 ldb    #8  ECBE                         trfr   B,E       select first socket  ECBE 1F                      fcb    $1f  ECBF 9E                      fcb    B<<4|E                               endm  ECC0 DE   1A                 ldu    fifo_us1  ECC2 33   C8 20              leau   32,u      skip network data area  ECC5 BD   EFDE               jsr    GSRMR  ECC8 E7   C0                 stb    0,u+  ECCA BD   F03F               jsr    GSRSR  ECCD E7   C0                 stb    0,u+  ECCF BD   F16E               jsr    GSRRBFS  ECD2 E7   C0                 stb    0,u+                       ECD4 C6   3D                 ldb    #'=  ECD6 E7   C0                 stb    0,u+                       ECD8 31   C4                 leay   0,u  ECDA BD   EE8B               jsr    GCRSIP  ECDD 33   44                 leau   4,u  ECDF 31   C4                 leay   0,u  ECE1 BD   EDF1               jsr    GCRGA  ECE4 33   44                 leau   4,u                       ECE6 C6   23                 ldb    #'#  ECE8 E7   C0                 stb    0,u+                       ECEA 31   C4                 leay   0,u  ECEC BD   EE4D               jsr    GCRSHA  ECEF 33   46                 leau   6,u                       ECF1 C6   23                 ldb    #'#  ECF3 E7   C0                 stb    0,u+                       ECF5 31   C4                 leay   0,u  ECF7 BD   EE1F               jsr    GCRSNM  ECFA 33   44                 leau   4,u                       ECFC C6   3D                 ldb    #'=  ECFE E7   C0                 stb    0,u+                       ED00 BD   EFCF               jsr    GCRVERS  ED03 ED   C1                 std    0,u++                       ED05 C6   23                 ldb    #'#FIO Simulation Structure             13:15:47  Apr 02, 2024   Page   80wz socket interface routines                          ED07 E7   C4                 stb    0,u  ED09 4F                      clra                       ED0A 39                      rts                                                               * X hold the task table                     * U holds the sock address  ED0B               skintrp  ED0B               skdisc  ED0B               sksmac  ED0B               skskep  ED0B 86   FF                 lda    #255  ED0D A7   47                 sta    wzerr,u  ED0F C6   C0                 ldb    #E_SOCKET  ED11 39                      rts                                    ED12  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       ED12                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *FIO Simulation Structure             13:15:47  Apr 02, 2024   Page   81wzspi, basic spi routines                                          ED12  spinit    equ    *  ED12 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  ED14 B7   8080               sta    SPIBASE+spicmd  ED17 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               ED18  spistr2   equ    *  ED18 CE   8080               ldu    #SPIBASE  SPI base TODO  ED1B                         trfr   F,B  ED1B 1F                      fcb    $1f  ED1C F9                      fcb    F<<4|B                               endm  ED1D 5D                      tstb             register pointer  ED1E 27   09                 beq    01f       OK, valid  ED20 34   04                 pshs   b  ED22 C4   03                 andb   #RSVREG   reserved loctation  ED24 5D                      tstb             xxx10xxx  is invalid!  ED25 35   04                 puls   b  ED27 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  ED29 4D            01        tsta             cmd flag  ED2A 27   04                 beq    04f  ED2C 1A   01                 sec              write   100  ED2E 20   02                 bra    05f  ED30 1C   FE       04        clc              read    000                     *  ED32 59            05        rolb             set READ/WRITE bit  [2...0]  ED33 58                      lslb             set variable length data [00]  ED34 58                      lslb                     *                     * here the actual SPI action starts                     *  ED35                         seti   disable   interrupts  ED35 1A   50                 orcc   #FF|IF                               endm  ED37 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  ED38 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  ED3A A7   C4                 sta    spicmd,u  ED3C AF   44                 stx    hibyta,u  and shift out  ED3E E7   44                 stb    hibyta,u  and shift out  ED40 1A   04                 sez  ED42 39                      rts  ED43 1C   FB       09        clz  ED45 39                      rtsFIO Simulation Structure             13:15:47  Apr 02, 2024   Page   82wzspi, basic spi routines                                                                     *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               ED46  byterd    equ    *  ED46 34   47                 pshs   cc,d,u  ED48 4F                      clra  ED49 8D   CD                 bsr    spistr2 >ED4B 1026 007E               lbne   09f  ED4F E6   44                 ldb    hibyta,u  extra clocks for first data                     *  ED51 E6   45                 ldb    lobyta,u  read byte  ED53 4F                      clra  ED54 ED   61                 std    1,s  ED56 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               ED58  wordrd    equ    *  ED58 34   47                 pshs   cc,d,u  ED5A 4F                      clra >ED5B BD   ED18               jsr    spistr2  ED5E 26   6D                 bne    09f  ED60 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  ED62 A6   45                 lda    lobyta,u  read byte  ED64 E6   45                 ldb    lobyta,u  read byte  ED66 ED   61                 std    1,s  ED68 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               ED6A  bmread    equ    *  ED6A 34   77                 pshs   cc,d,x,y,u  ED6C 4F                      clra  ED6D BD   F20D               jsr    GSRRXRP  ED70 1F   01                 tfr    d,x  ED72 CE   8080               ldu    #SPIBASE  ED75 34   40                 pshs   u  ED77 1A   50                 orcc   #$50  ED79 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUTFIO Simulation Structure             13:15:48  Apr 02, 2024   Page   83wzspi, basic spi routines                             ED7B A7   C4                 sta    spicmd,u  ED7D AF   44                 stx    hibyta,u  start address  ED7F BD   F2B7               jsr    tsk2rx  ED82 E7   44                 stb    hibyta,u  ED84 EC   63                 ldd    3,s       old D  ED86                         trfr   D,W       count  ED86 1F                      fcb    $1f  ED87 06                      fcb    D<<4|W                               endm  ED88 1F   12                 tfr    x,y       mem pointer  ED8A 10AE 67                 ldy    7,s       old Y  ED8D E7   44                 stb    hibyta,u  shift out  ED8F 33   45                 leau   lobyta,u  ED91                         tfm4   U,Y  ED91 113B                    fdb    $113b  ED93 32                      fcb    U<<4|Y                               endm  ED94 35   40                 puls   u         old U  ED96 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  ED98 A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  ED9A 1F   10                 tfr    x,d  ED9C E3   61                 addd   1,s       move pointer  ED9E BD   F21C               jsr    PSRRXRP   update pointer  EDA1 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EDA3  bytewr    equ    *  EDA3 34   47                 pshs   cc,d,u  EDA5 86   01                 lda    #1  EDA7 BD   ED18               jsr    spistr2  EDAA 26   21                 bne    09f                     *  EDAC A6   62                 lda    2,s  EDAE A7   44                 sta    hibyta,u  EDB0 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EDB2  wordwr    equ    *  EDB2 34   47                 pshs   cc,d,u  EDB4 86   01                 lda    #1  EDB6 BD   ED18               jsr    spistr2  EDB9 26   12                 bne    09f                     *FIO Simulation Structure             13:15:48  Apr 02, 2024   Page   84wzspi, basic spi routines                             EDBB EC   61                 ldd    1,s  EDBD A7   44                 sta    hibyta,u  EDBF E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EDC1 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EDC3 A7   C4                 sta    spicmd,u  EDC5 A6   E4                 lda    0,s       sez  EDC7 8A   04                 ora    #4  EDC9 A7   E4       02        sta    0,s  EDCB 35   C7                 puls   cc,d,u,pc                     *  EDCD A6   E4       09        lda    0,s       clz  EDCF 84   FB                 anda   #255-4  EDD1 20   F6                 bra    02b                     FIO Simulation Structure             13:15:48  Apr 02, 2024   Page   85wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EDD3 34   56       GCRMR     pshs   d,x,u  EDD5 5F                      clrb  EDD6                         trfr   B,F  EDD6 1F                      fcb    $1f  EDD7 9F                      fcb    B<<4|FFIO Simulation Structure             13:15:48  Apr 02, 2024   Page   86wzspi, basic spi routines                                                          endm  EDD8 8E   0000               ldx    #WZMR  EDDB BD   ED46               jsr    byterd  EDDE ED   E4                 std    0,s  EDE0 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EDE2 34   16       PCRMR     pshs   d,x  EDE4 5F                      clrb  EDE5                         trfr   B,F  EDE5 1F                      fcb    $1f  EDE6 9F                      fcb    B<<4|F                               endm  EDE7 8E   0000               ldx    #WZMR  EDEA EC   E4                 ldd    0,s >EDEC BD   EDA3               jsr    bytewr  EDEF 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EDF1 34   16       GCRGA     pshs   d,x  EDF3 5F                      clrb  EDF4                         trfr   B,F  EDF4 1F                      fcb    $1f  EDF5 9F                      fcb    B<<4|F                               endm  EDF6 8E   0001               ldx    #WZGAR0  EDF9 BD   ED58               jsr    wordrd  EDFC ED   A4                 std    0,y  EDFE 8E   0003               ldx    #WZGAR2  EE01 BD   ED58               jsr    wordrd  EE04 ED   22                 std    2,y  EE06 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EE08 34   16       PCRGA     pshs   d,x  EE0A 5F                      clrb  EE0B                         trfr   B,F  EE0B 1F                      fcb    $1f  EE0C 9F                      fcb    B<<4|F                               endm  EE0D 8E   0001               ldx    #WZGAR0  EE10 EC   A4                 ldd    0,y >EE12 BD   EDB2               jsr    wordwr  EE15 8E   0003               ldx    #WZGAR2FIO Simulation Structure             13:15:49  Apr 02, 2024   Page   87wzspi, basic spi routines                             EE18 EC   22                 ldd    2,y >EE1A BD   EDB2               jsr    wordwr  EE1D 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EE1F 34   16       GCRSNM    pshs   d,x  EE21 5F                      clrb  EE22                         trfr   B,F  EE22 1F                      fcb    $1f  EE23 9F                      fcb    B<<4|F                               endm  EE24 8E   0005               ldx    #WZSUBR0  EE27 BD   ED58               jsr    wordrd  EE2A ED   A4                 std    0,y  EE2C 8E   0007               ldx    #WZSUBR2  EE2F BD   ED58               jsr    wordrd  EE32 ED   22                 std    2,y  EE34 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EE36 34   16       PCRSNM    pshs   d,x  EE38 5F                      clrb  EE39                         trfr   B,F  EE39 1F                      fcb    $1f  EE3A 9F                      fcb    B<<4|F                               endm  EE3B 8E   0005               ldx    #WZSUBR0  EE3E EC   A4                 ldd    0,y  EE40 BD   EDB2               jsr    wordwr  EE43 8E   0007               ldx    #WZSUBR2  EE46 EC   22                 ldd    2,y  EE48 BD   EDB2               jsr    wordwr  EE4B 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EE4D 34   16       GCRSHA    pshs   d,x  EE4F 5F                      clrb  EE50                         trfr   B,F  EE50 1F                      fcb    $1f  EE51 9F                      fcb    B<<4|F                               endm  EE52 8E   0009               ldx    #WZSHAR0  EE55 BD   ED58               jsr    wordrdFIO Simulation Structure             13:15:49  Apr 02, 2024   Page   88wzspi, basic spi routines                             EE58 ED   A4                 std    0,y  EE5A 8E   000B               ldx    #WZSHAR2  EE5D BD   ED58               jsr    wordrd  EE60 ED   22                 std    2,y  EE62 8E   000D               ldx    #WZSHAR4  EE65 BD   ED58               jsr    wordrd  EE68 ED   24                 std    4,y  EE6A 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  EE6C 34   16       PCRSHA    pshs   d,x  EE6E 5F                      clrb  EE6F                         trfr   B,F  EE6F 1F                      fcb    $1f  EE70 9F                      fcb    B<<4|F                               endm  EE71 8E   0009               ldx    #WZSHAR0  EE74 EC   A4                 ldd    0,y  EE76 BD   EDB2               jsr    wordwr  EE79 8E   000B               ldx    #WZSHAR2  EE7C EC   22                 ldd    2,y  EE7E BD   EDB2               jsr    wordwr  EE81 8E   000D               ldx    #WZSHAR4  EE84 EC   24                 ldd    4,y  EE86 BD   EDB2               jsr    wordwr  EE89 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  EE8B 34   16       GCRSIP    pshs   d,x  EE8D 5F                      clrb  EE8E                         trfr   B,F  EE8E 1F                      fcb    $1f  EE8F 9F                      fcb    B<<4|F                               endm  EE90 8E   000F               ldx    #WZSIPR0  EE93 BD   ED58               jsr    wordrd  EE96 ED   A4                 std    0,y  EE98 8E   0011               ldx    #WZSIPR2  EE9B BD   ED58               jsr    wordrd  EE9E ED   22                 std    2,y  EEA0 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             13:15:49  Apr 02, 2024   Page   89wzspi, basic spi routines                             EEA2 34   16       PCRSIP    pshs   d,x  EEA4 5F                      clrb  EEA5                         trfr   B,F  EEA5 1F                      fcb    $1f  EEA6 9F                      fcb    B<<4|F                               endm  EEA7 8E   000F               ldx    #WZSIPR0  EEAA EC   A4                 ldd    0,y  EEAC BD   EDB2               jsr    wordwr  EEAF 8E   0011               ldx    #WZSIPR2  EEB2 EC   22                 ldd    2,y  EEB4 BD   EDB2               jsr    wordwr  EEB7 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  EEB9 34   16       GCRILLT   pshs   d,x  EEBB 5F                      clrb  EEBC                         trfr   B,F  EEBC 1F                      fcb    $1f  EEBD 9F                      fcb    B<<4|F                               endm  EEBE 8E   0013               ldx    #WZILLT0  EEC1 BD   ED58               jsr    wordrd  EEC4 ED   E4                 std    0,s  EEC6 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  EEC8 34   16       PCRILLT   pshs   d,x  EECA 5F                      clrb  EECB                         trfr   B,F  EECB 1F                      fcb    $1f  EECC 9F                      fcb    B<<4|F                               endm  EECD 8E   0013               ldx    #WZILLT0  EED0 EC   E4                 ldd    0,s  EED2 BD   EDB2               jsr    wordwr  EED5 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  EED7 34   16       GCRIR     pshs   d,x  EED9 5F                      clrb  EEDA                         trfr   B,F  EEDA 1F                      fcb    $1f  EEDB 9F                      fcb    B<<4|FFIO Simulation Structure             13:15:50  Apr 02, 2024   Page   90wzspi, basic spi routines                                                          endm  EEDC 8E   0015               ldx    #WZIR  EEDF BD   ED46               jsr    byterd  EEE2 ED   E4                 std    0,s  EEE4 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  EEE6 34   16       PCRIR     pshs   d,x  EEE8 5F                      clrb  EEE9                         trfr   B,F  EEE9 1F                      fcb    $1f  EEEA 9F                      fcb    B<<4|F                               endm  EEEB 8E   0015               ldx    #WZIR  EEEE EC   E4                 ldd    0,s  EEF0 BD   EDA3               jsr    bytewr  EEF3 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  EEF5 34   16       GCRIMR    pshs   d,x  EEF7 5F                      clrb  EEF8                         trfr   B,F  EEF8 1F                      fcb    $1f  EEF9 9F                      fcb    B<<4|F                               endm  EEFA 8E   0016               ldx    #WZIMR  EEFD BD   ED46               jsr    byterd  EF00 ED   E4                 std    0,s  EF02 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  EF04 34   16       PCRIMR    pshs   d,x  EF06 5F                      clrb  EF07                         trfr   B,F  EF07 1F                      fcb    $1f  EF08 9F                      fcb    B<<4|F                               endm  EF09 8E   0016               ldx    #WZIMR  EF0C EC   E4                 ldd    0,s  EF0E BD   EDA3               jsr    bytewr  EF11 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             13:15:50  Apr 02, 2024   Page   91wzspi, basic spi routines                                                *  EF13 34   16       GCRSIR    pshs   d,x  EF15 5F                      clrb  EF16                         trfr   B,F  EF16 1F                      fcb    $1f  EF17 9F                      fcb    B<<4|F                               endm  EF18 8E   0017               ldx    #WZSIR  EF1B BD   ED46               jsr    byterd  EF1E ED   E4                 std    0,s  EF20 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  EF22 34   16       PCRSIR    pshs   d,x  EF24 5F                      clrb  EF25                         trfr   B,F  EF25 1F                      fcb    $1f  EF26 9F                      fcb    B<<4|F                               endm  EF27 8E   0017               ldx    #WZSIR  EF2A EC   E4                 ldd    0,s  EF2C BD   EDA3               jsr    bytewr  EF2F 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  EF31 34   16       GCRSIMR   pshs   d,x  EF33 5F                      clrb  EF34                         trfr   B,F  EF34 1F                      fcb    $1f  EF35 9F                      fcb    B<<4|F                               endm  EF36 8E   0018               ldx    #WZSIMR  EF39 BD   ED46               jsr    byterd  EF3C ED   E4                 std    0,s  EF3E 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  EF40 34   16       PCRSIMR   pshs   d,x  EF42 5F                      clrb  EF43                         trfr   B,F  EF43 1F                      fcb    $1f  EF44 9F                      fcb    B<<4|F                               endm  EF45 8E   0018               ldx    #WZSIMR  EF48 EC   E4                 ldd    0,sFIO Simulation Structure             13:15:50  Apr 02, 2024   Page   92wzspi, basic spi routines                             EF4A BD   EDA3               jsr    bytewr  EF4D 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EF4F 34   16       GCRRTR    pshs   d,x  EF51 5F                      clrb  EF52                         trfr   B,F  EF52 1F                      fcb    $1f  EF53 9F                      fcb    B<<4|F                               endm  EF54 8E   0019               ldx    #WZRTR0  EF57 BD   ED58               jsr    wordrd  EF5A ED   E4                 std    0,s  EF5C 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EF5E 34   16       PCRRTR    pshs   d,x  EF60 5F                      clrb  EF61                         trfr   B,F  EF61 1F                      fcb    $1f  EF62 9F                      fcb    B<<4|F                               endm  EF63 8E   0019               ldx    #WZRTR0  EF66 EC   E4                 ldd    0,s  EF68 BD   EDB2               jsr    wordwr  EF6B 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EF6D 34   16       GCRRCR    pshs   d,x  EF6F 5F                      clrb  EF70                         trfr   B,F  EF70 1F                      fcb    $1f  EF71 9F                      fcb    B<<4|F                               endm  EF72 8E   001B               ldx    #WZRCR  EF75 BD   ED46               jsr    byterd  EF78 ED   E4                 std    0,s  EF7A 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EF7C 34   16       PCRRCR    pshs   d,x  EF7E 5F                      clrbFIO Simulation Structure             13:15:51  Apr 02, 2024   Page   93wzspi, basic spi routines                             EF7F                         trfr   B,F  EF7F 1F                      fcb    $1f  EF80 9F                      fcb    B<<4|F                               endm  EF81 8E   001B               ldx    #WZRCR  EF84 EC   E4                 ldd    0,s  EF86 BD   EDA3               jsr    bytewr  EF89 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EF8B 34   16       GCRURP    pshs   d,x  EF8D 5F                      clrb  EF8E                         trfr   B,F  EF8E 1F                      fcb    $1f  EF8F 9F                      fcb    B<<4|F                               endm  EF90 8E   002C               ldx    #WZUPRT0  EF93 BD   ED58               jsr    wordrd  EF96 ED   E4                 std    0,s  EF98 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  EF9A 34   16       GCRUIP    pshs   d,x  EF9C 5F                      clrb  EF9D                         trfr   B,F  EF9D 1F                      fcb    $1f  EF9E 9F                      fcb    B<<4|F                               endm  EF9F 8E   0028               ldx    #WZUIPR0  EFA2 BD   ED58               jsr    wordrd  EFA5 ED   A4                 std    0,y  EFA7 8E   002A               ldx    #WZUIPR2  EFAA BD   ED58               jsr    wordrd  EFAD ED   22                 std    2,y  EFAF 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  EFB1 34   56       GCRPHY    pshs   d,x,u  EFB3 8E   002E               ldx    #WZPHY  EFB6 5F                      clrb  EFB7                         trfr   B,F  EFB7 1F                      fcb    $1f  EFB8 9F                      fcb    B<<4|FFIO Simulation Structure             13:15:51  Apr 02, 2024   Page   94wzspi, basic spi routines                                                          endm  EFB9 BD   ED46               jsr    byterd  EFBC ED   E4                 std    0,s  EFBE 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  EFC0 34   56       PCRPHY    pshs   d,x,u  EFC2 8E   002E               ldx    #WZPHY  EFC5 5F                      clrb  EFC6                         trfr   B,F  EFC6 1F                      fcb    $1f  EFC7 9F                      fcb    B<<4|F                               endm  EFC8 EC   E4                 ldd    0,s  EFCA BD   EDA3               jsr    bytewr  EFCD 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  EFCF 34   56       GCRVERS   pshs   d,x,u  EFD1 8E   0039               ldx    #WZVERS  EFD4 5F                      clrb  EFD5                         trfr   B,F  EFD5 1F                      fcb    $1f  EFD6 9F                      fcb    B<<4|F                               endm  EFD7 BD   ED46               jsr    byterd  EFDA ED   E4                 std    0,s  EFDC 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             13:15:51  Apr 02, 2024   Page   95wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  EFDE 34   16       GSRMR     psh    d,x  EFE0 BD   F29C               jsr    tsk2rg  EFE3 8E   0000               ldx    #SNMR  EFE6 BD   ED46               jsr    byterd  EFE9 ED   E4                 std    0,s  EFEB 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  EFED 34   16       PSRMR     pshs   d,x  EFEF BD   F29C               jsr    tsk2rgFIO Simulation Structure             13:15:52  Apr 02, 2024   Page   96wzspi, basic spi routines                             EFF2 8E   0000               ldx    #SNMR  EFF5 EC   E4                 ldd    0,s  EFF7 BD   EDA3               jsr    bytewr  EFFA 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  EFFC 34   16       GSRCR     pshs   d,x  EFFE BD   F29C               jsr    tsk2rg  F001 8E   0001               ldx    #SNCR  F004 BD   ED46               jsr    byterd  F007 ED   E4                 std    0,s  F009 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  F00B 34   16       PSRCR     pshs   d,x  F00D BD   F29C               jsr    tsk2rg  F010 8E   0001               ldx    #SNCR  F013 EC   E4                 ldd    0,s  F015 BD   EDA3               jsr    bytewr  F018 8D   E2       01        bsr    GSRCR  F01A 5D                      tstb  F01B 26   FB                 bne    01b       wait command to be consumed  F01D E7   61                 stb    1,s       set return  F01F 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  F021 34   16       GSRIR     pshs   d,x  F023 BD   F29C               jsr    tsk2rg  F026 8E   0002               ldx    #SNIR  F029 BD   ED46               jsr    byterd  F02C ED   E4                 std    0,s  F02E 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  F030 34   16       PSRIR     pshs   d,x  F032 BD   F29C               jsr    tsk2rg  F035 8E   0002               ldx    #SNIR  F038 EC   E4                 ldd    0,sFIO Simulation Structure             13:15:52  Apr 02, 2024   Page   97wzspi, basic spi routines                             F03A BD   EDA3               jsr    bytewr  F03D 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  F03F 34   16       GSRSR     pshs   d,x  F041 BD   F29C               jsr    tsk2rg  F044 8E   0003               ldx    #SNSR  F047 BD   ED46               jsr    byterd  F04A ED   E4                 std    0,s  F04C 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  F04E 34   16       GSRPORT   pshs   d,x  F050 BD   F29C               jsr    tsk2rg  F053 8E   0004               ldx    #SNPORT0  F056 BD   ED58               jsr    wordrd  F059 ED   E4                 std    0,s  F05B 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  F05D 34   16       PSRPORT   pshs   d,x  F05F BD   F29C               jsr    tsk2rg  F062 8E   0004               ldx    #SNPORT0  F065 EC   E4                 ldd    0,s  F067 BD   EDB2               jsr    wordwr  F06A 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  F06C 34   16       GSRDHAR   pshs   d,x  F06E BD   F29C               jsr    tsk2rg  F071 8E   0006               ldx    #SNDHAR0  F074 BD   ED58               jsr    wordrd  F077 ED   A4                 std    0,y  F079 8E   0008               ldx    #SNDHAR2  F07C BD   ED58               jsr    wordrd  F07F ED   22                 std    2,y  F081 8E   000A               ldx    #SNDHAR4  F084 BD   ED58               jsr    wordrdFIO Simulation Structure             13:15:52  Apr 02, 2024   Page   98wzspi, basic spi routines                             F087 ED   24                 std    4,y  F089 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  F08B 34   16       PSRDHAR   pshs   d,x  F08D BD   F29C               jsr    tsk2rg  F090 8E   0006               ldx    #SNDHAR0  F093 EC   A4                 ldd    0,y  F095 BD   EDB2               jsr    wordwr  F098 8E   0008               ldx    #SNDHAR2  F09B EC   22                 ldd    2,y  F09D BD   EDB2               jsr    wordwr  F0A0 8E   000A               ldx    #SNDHAR4  F0A3 EC   24                 ldd    4,y  F0A5 BD   EDB2               jsr    wordwr  F0A8 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  F0AA 34   16       GSRDIP    pshs   d,x  F0AC BD   F29C               jsr    tsk2rg  F0AF 8E   000C               ldx    #SNDIPR0  F0B2 BD   ED58               jsr    wordrd  F0B5 ED   A4                 std    0,y  F0B7 8E   000E               ldx    #SNDIPR2  F0BA BD   ED58               jsr    wordrd  F0BD ED   22                 std    2,y  F0BF 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  F0C1 34   16       PSRDIP    pshs   d,x  F0C3 BD   F29C               jsr    tsk2rg  F0C6 8E   000C               ldx    #SNDIPR0  F0C9 EC   A4                 ldd    0,y  F0CB BD   EDB2               jsr    wordwr  F0CE 8E   000E               ldx    #SNDIPR2  F0D1 EC   22                 ldd    2,y  F0D3 BD   EDB2               jsr    wordwr  F0D6 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             13:15:52  Apr 02, 2024   Page   99wzspi, basic spi routines                                                *  F0D8 34   16       GSRDPOR   pshs   d,x  F0DA BD   F29C               jsr    tsk2rg  F0DD 8E   0010               ldx    #SNDPOR0  F0E0 BD   ED58               jsr    wordrd  F0E3 ED   E4                 std    0,s  F0E5 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  F0E7 34   16       PSRDPOR   pshs   d,x  F0E9 BD   F29C               jsr    tsk2rg  F0EC 8E   0010               ldx    #SNDPOR0  F0EF EC   E4                 ldd    0,s  F0F1 BD   EDB2               jsr    wordwr  F0F4 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  F0F6 34   16       GSRMSS    pshs   d,x  F0F8 BD   F29C               jsr    tsk2rg  F0FB 8E   0012               ldx    #SNMSSR0  F0FE BD   ED58               jsr    wordrd  F101 ED   E4                 std    0,s  F103 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  F105 34   16       PSRMSS    pshs   d,x  F107 BD   F29C               jsr    tsk2rg  F10A 8E   0012               ldx    #SNMSSR0  F10D EC   E4                 ldd    0,s  F10F BD   EDB2               jsr    wordwr  F112 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  F114 34   16       GSRPROT   pshs   d,x  F116 BD   F29C               jsr    tsk2rg  F119 8E   0014               ldx    #SNPROTO  F11C BD   ED46               jsr    byterd  F11F ED   E4                 std    0,sFIO Simulation Structure             13:15:53  Apr 02, 2024   Page  100wzspi, basic spi routines                             F121 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  F123 34   16       PSRPROT   pshs   d,x  F125 BD   F29C               jsr    tsk2rg  F128 8E   0014               ldx    #SNPROTO  F12B EC   E4                 ldd    0,s  F12D BD   EDA3               jsr    bytewr  F130 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  F132 34   16       GSRTOS    pshs   d,x  F134 BD   F29C               jsr    tsk2rg  F137 8E   0015               ldx    #SNTOS  F13A BD   ED46               jsr    byterd  F13D ED   E4                 std    0,s  F13F 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  F141 34   16       PSRTOS    pshs   d,x  F143 BD   F29C               jsr    tsk2rg  F146 8E   0015               ldx    #SNTOS  F149 EC   E4                 ldd    0,s  F14B BD   EDA3               jsr    bytewr  F14E 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  F150 34   16       GSRTTL    pshs   d,x  F152 BD   F29C               jsr    tsk2rg  F155 8E   0016               ldx    #SNTTL  F158 BD   ED46               jsr    byterd  F15B ED   E4                 std    0,s  F15D 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             13:15:53  Apr 02, 2024   Page  101wzspi, basic spi routines                             F15F 34   16       PSRTTL    pshs   d,x  F161 BD   F29C               jsr    tsk2rg  F164 8E   0016               ldx    #SNTTL  F167 EC   E4                 ldd    0,s  F169 BD   EDA3               jsr    bytewr  F16C 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  F16E 34   16       GSRRBFS   pshs   d,x  F170 BD   F29C               jsr    tsk2rg  F173 8E   001E               ldx    #SNRBFSZ  F176 BD   ED46               jsr    byterd  F179 ED   E4                 std    0,s  F17B 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  F17D 34   16       PSRRBFS   pshs   d,x  F17F BD   F29C               jsr    tsk2rg  F182 8E   001E               ldx    #SNRBFSZ  F185 EC   E4                 ldd    0,s  F187 BD   EDA3               jsr    bytewr  F18A 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  F18C 34   16       GSRTBFS   pshs   d,x  F18E BD   F29C               jsr    tsk2rg  F191 8E   001F               ldx    #SNTBFSZ  F194 BD   ED46               jsr    byterd  F197 ED   E4                 std    0,s  F199 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  F19B 34   16       PSRTBFS   pshs   d,x  F19D BD   F29C               jsr    tsk2rg  F1A0 8E   001F               ldx    #SNTBFSZ  F1A3 EC   E4                 ldd    0,s  F1A5 BD   EDA3               jsr    bytewr  F1A8 35   96                 puls   d,x,pcFIO Simulation Structure             13:15:53  Apr 02, 2024   Page  102wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  F1AA 34   16       GSRTXFR   pshs   d,x  F1AC BD   F29C               jsr    tsk2rg  F1AF 8E   0020               ldx    #SNTXFR0  [R]  F1B2 BD   ED58               jsr    wordrd  F1B5 ED   E4       01        std    0,s  F1B7 BD   ED58               jsr    wordrd  F1BA 10A3 E4                 cmpd   0,s       read more times and exit  F1BD 26   F6                 bne    01b       when 2 reads are equal  F1BF 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F1C1 34   16       GSRTXRP   pshs   d,x  F1C3 BD   F29C               jsr    tsk2rg  F1C6 8E   0022               ldx    #SNTXRP0  [R]  F1C9 BD   ED58               jsr    wordrd  F1CC ED   E4       01        std    0,s  F1CE BD   ED58               jsr    wordrd  F1D1 10A3 E4                 cmpd   0,s       read more times and exit  F1D4 26   F6                 bne    01b       when 2 reads are equal  F1D6 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F1D8 34   16       GSRTXWP   pshs   d,x  F1DA BD   F29C               jsr    tsk2rg  F1DD 8E   0024               ldx    #SNTXWP0  [RW]  F1E0 BD   ED58               jsr    wordrd  F1E3 ED   E4                 std    0,s  F1E5 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F1E7 34   16       PSRTXWP   pshs   d,x  F1E9 BD   F29C               jsr    tsk2rg  F1EC 8E   0024               ldx    #SNTXWP0  F1EF EC   E4                 ldd    0,s  F1F1 BD   EDB2               jsr    wordwrFIO Simulation Structure             13:15:54  Apr 02, 2024   Page  103wzspi, basic spi routines                             F1F4 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F1F6 34   16       GSRRXRS   pshs   d,x  F1F8 BD   F29C               jsr    tsk2rg  F1FB 8E   0026               ldx    #SNRXRZ0  [R]  F1FE BD   ED58               jsr    wordrd  F201 ED   E4       01        std    0,s  F203 BD   ED58               jsr    wordrd  F206 10A3 E4                 cmpd   0,s       read more times and exit  F209 26   F6                 bne    01b       when 2 reads are equal  F20B 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F20D 34   16       GSRRXRP   pshs   d,x  F20F BD   F29C               jsr    tsk2rg  F212 8E   0028               ldx    #SNRXRP0  [RW]  F215 BD   ED58               jsr    wordrd  F218 ED   E4                 std    0,s  F21A 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F21C 34   16       PSRRXRP   pshs   d,x >F21E BD   F29C               jsr    tsk2rg  F221 8E   0028               ldx    #SNRXRP0  F224 EC   E4                 ldd    0,s  F226 BD   EDB2               jsr    wordwr  F229 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F22B 34   16       GSRRXWP   pshs   d,x >F22D BD   F29C               jsr    tsk2rg  F230 8E   002A               ldx    #SNRXWP0  [R]  F233 BD   ED58               jsr    wordrd  F236 ED   E4       01        std    0,s  F238 BD   ED58               jsr    wordrd  F23B 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             13:15:54  Apr 02, 2024   Page  104wzspi, basic spi routines                             F23E 26   F6                 bne    01b       when 2 reads are equal  F240 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F242 34   16       GSRIMR    pshs   d,x >F244 BD   F29C               jsr    tsk2rg  F247 8E   002C               ldx    #SNIMR  F24A BD   ED46               jsr    byterd  F24D ED   E4                 std    0,s  F24F 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F251 34   16       PSRIMR    pshs   d,x >F253 BD   F29C               jsr    tsk2rg  F256 8E   002C               ldx    #SNIMR  F259 EC   E4                 ldd    0,s  F25B BD   EDA3               jsr    bytewr  F25E 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F260 34   16       GSRFRAG   pshs   d,x >F262 BD   F29C               jsr    tsk2rg  F265 8E   002D               ldx    #SNFRAG0  F268 BD   ED58               jsr    wordrd  F26B ED   E4                 std    0,s  F26D 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F26F 34   16       PSRFRAG   pshs   d,x >F271 BD   F29C               jsr    tsk2rg  F274 8E   002D               ldx    #SNFRAG0  F277 EC   E4                 ldd    0,s  F279 BD   EDB2               jsr    wordwr  F27C 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             13:15:54  Apr 02, 2024   Page  105wzspi, basic spi routines                                                * return byte in B                     *  F27E 34   16       GSKATM    pshs   d,x >F280 BD   F29C               jsr    tsk2rg  F283 8E   002F               ldx    #SNKATIM  F286 BD   ED46               jsr    byterd  F289 ED   E4                 std    0,s  F28B 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F28D 34   16       PSRKATM   pshs   d,x >F28F BD   F29C               jsr    tsk2rg  F292 8E   002F               ldx    #SNKATIM  F295 EC   E4                 ldd    0,s  F297 BD   EDA3               jsr    bytewr  F29A 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F29C  tsk2rg    equ    *  F29C                         trfr   E,B  F29C 1F                      fcb    $1f  F29D E9                      fcb    E<<4|B                               endm  F29E 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F29F 1C   FE                 clc              make reg bits + '01'  F2A1 59                      rolb             socket register  F2A2 1A   01                 sec  F2A4 59                      rolb             xxx 01 ...                     *  F2A5                         trfr   B,F  F2A5 1F                      fcb    $1f  F2A6 9F                      fcb    B<<4|F                               endm  F2A7 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F2A8  tsk2tx    equ    *  F2A8                         trfr   E,B  F2A8 1F                      fcb    $1f  F2A9 E9                      fcb    E<<4|BFIO Simulation Structure             13:15:55  Apr 02, 2024   Page  106wzspi, basic spi routines                                                          endm  F2AA 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F2AB 1A   01                 sec              make reg bits + '10'  F2AD 59                      rolb             sock TX buffer  F2AE 1C   FE                 clc  F2B0 59                      rolb                     *  F2B1 1A   01                 sec  F2B3 59                      rolb             write bit     '1'                     *  F2B4 58                      lslb             variable size '00'  F2B5 58                      lslb             xxx 10 100                     *  F2B6 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F2B7  tsk2rx    equ    *  F2B7                         trfr   E,B  F2B7 1F                      fcb    $1f  F2B8 E9                      fcb    E<<4|B                               endm  F2B9 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F2BA 1A   01                 sec              make reg bits + '11'  F2BC 59                      rolb             sock RX buffer  F2BD 1A   01                 sec              make reg bits + '11'  F2BF 59                      rolb                     *  F2C0 1C   FE                 clc  F2C2 59                      rolb             read bit     '0'                     *  F2C3 58                      lslb             variable size '00'  F2C4 58                      lslb             xxx 11 000  F2C5 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=target, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F2C6 34   76       RDSK2FB   pshs   d,x,y,u                     *  F2C8 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F2CB 23   02                 bls    01f  F2CD EC   4A                 ldd    wzrqln,u  mandatory size  F2CF 1F   01       01        tfr    D,X       save for laterFIO Simulation Structure             13:15:55  Apr 02, 2024   Page  107wzspi, basic spi routines                             F2D1 ED   E4                 std    0,s       save xfrerred old  D  F2D3 ED   48                 std    wzxfer,u  F2D5 27   3B                 beq    15f       no data                     *  F2D7 BD   F20D               jsr    GSRRXRP  F2DA 34   06                 pshs   d         save socket read pointer  F2DC 1F   02                 tfr    D,Y                     *  F2DE CE   8080               ldu    #SPIBASE  F2E1 34   01                 pshs   cc  F2E3                         pshsw  F2E3 1038                    fdb    $1038                               endm  F2E5 34   40                 pshs   u  F2E7 1A   50                 orcc   #$50      disable interrupts  F2E9 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F2EB A7   C4                 sta    spicmd,u  F2ED 10AF 44                 sty    hibyta,u  start address                      >F2F0 BD   F2B7               jsr    tsk2rx    SOCK# to buffer address                       F2F3 E7   44                 stb    hibyta,u  F2F5 10AE 6B                 ldy    11,s      target  F2F8 E7   44                 stb    hibyta,u  shift out first data byte  F2FA 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F2FC                         trfr   X,W  F2FC 1F                      fcb    $1f  F2FD 16                      fcb    X<<4|W                               endm  F2FE                         tfm4   U,Y  F2FE 113B                    fdb    $113b  F300 32                      fcb    U<<4|Y                               endm  F301 35   40                 puls   u  F303 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F305 A7   C4                 sta    spicmd,u  F307                         pulsw  restore   E:F  F307 1039                    fdb    $1039                               endm  F309 35   01                 puls   cc                     *  F30B 35   06                 puls   d         old read pointer  F30D E3   E4                 addd   0,s       adjust transferred  F30F BD   F21C               jsr    PSRRXRP   update pointer                     *  F312 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=target                     * E=socket#FIO Simulation Structure             13:15:55  Apr 02, 2024   Page  108wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F314 34   76       WRFB2SK   pshs   d,x,y,u  F316 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F319 23   02                 bls    01f  F31B EC   4A                 ldd    wzrqln,u  F31D 1F   01       01        tfr    d,x  F31F ED   E4                 std    0,s  F321 ED   48                 std    wzxfer,u  report size  F323 27   52                 beq    15f                     *  F325 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F329 26   05                 bne    24f  F32B BD   F1D8               jsr    GSRTXWP   get write pointer  F32E 20   02                 bra    25f  F330 1F   20       24        tfr    y,d                     *  F332 34   06       25        pshs   d  F334 1F   02                 tfr    D,Y                     *  F336 CE   8080               ldu    #SPIBASE  F339 34   01                 pshs   cc  F33B                         pshsw  save      E:F  F33B 1038                    fdb    $1038                               endm  F33D 34   40                 pshs   u  F33F 1A   50                 orcc   #$50  F341 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F343 A7   C4                 sta    spicmd,u  F345 10AF 44                 sty    hibyta,u  start address                       F348 BD   F2A8               jsr    tsk2tx                       F34B E7   44                 stb    hibyta,u  F34D 10AE 6B                 ldy    11,s      target  F350 33   44                 leau   hibyta,u  the first to shift out  F352                         trfr   X,W  F352 1F                      fcb    $1f  F353 16                      fcb    X<<4|W                               endm  F354                         tfm3   Y,U  F354 113A                    fdb    $113a  F356 23                      fcb    Y<<4|U                               endm  F357 35   40                 puls   u  F359 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F35B A7   C4                 sta    spicmd,u  F35D                         pulsw  restore   E:F!!  F35D 1039                    fdb    $1039                               endm  F35F 35   01                 puls   ccFIO Simulation Structure             13:15:55  Apr 02, 2024   Page  109wzspi, basic spi routines                                                *  F361 35   06                 puls   d         old write pointer  F363 E3   E4                 addd   0,s  F365 EE   66                 ldu    6,s       restore U  F367 AE   C8 26              ldx    wztype,u  F36A 8C   0002               cmpx   #SK_DGRM  F36D 27   05                 beq    10f  F36F BD   F1E7     11        jsr    PSRTXWP   update pointer  F372 20   03                 bra    15f                       F374 ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F377 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             13:15:56  Apr 02, 2024   Page  110Debug Interface Routines                                                   F379               DB_main  F379 8D   4F                 bsr    DB_test   see if debug routines present  F37B 6E   9F C002            jmp    [DEBUGROM+2]  F37F               DB_pdata  F37F 8D   49                 bsr    DB_test   see if debug routines present  F381 6E   9F C004            jmp    [DEBUGROM+4]  F385               DB_phex  F385 8D   43                 bsr    DB_test   see if debug routines present  F387 6E   9F C006            jmp    [DEBUGROM+6]  F38B               DB_phex2  F38B 8D   3D                 bsr    DB_test   see if debug routines present  F38D 6E   9F C008            jmp    [DEBUGROM+8]  F391               DB_pcrlf  F391 8D   37                 bsr    DB_test   see if debug routines present  F393 6E   9F C00A            jmp    [DEBUGROM+10]  F397               DB_check  F397 8D   31                 bsr    DB_test   see if debug routines present  F399 6E   9F C00C            jmp    [DEBUGROM+12]  F39D               DB_config  F39D 8D   2B                 bsr    DB_test   see if debug routines present  F39F 6E   9F C00E            jmp    [DEBUGROM+14]  F3A3 34   17       DB_msg    pshs   cc,d,x  F3A5 AE   65                 ldx    1+2+2,s   get return address  F3A7 EC   81                 ldd    ,x++      get mask word  F3A9 B4   0401               anda   DB_cntrl  F3AC F4   0402               andb   DB_cntrl+1  F3AF 34   04                 pshs   b  F3B1 AA   E0                 ora    ,s+  F3B3 27   04                 beq    10f       jump if flag not set  F3B5 30   02                 leax   2,x       skip over false address & fall through  F3B7 20   02                 bra    20f  F3B9 AE   84       10        ldx    ,x        get false branch label  F3BB AF   65       20        stx    1+2+2,s   fix up return address  F3BD 35   97                 puls   cc,d,x,pc return                     *  F3BF               DB_pspace  F3BF               DB_outsp  F3BF 34   16                 pshs   d,x  F3C1 8E   F3C8               ldx    #00f  F3C4 8D   B9                 bsr    DB_pdata  F3C6 35   96                 puls   d,x,pc  F3C8 20 00         00        fcc    ' ',0                       F3CA 34   07       DB_test   pshs   cc,d  F3CC FC   C000               ldd    DEBUGROM  Debug rom present?  F3CF 1083 1234               cmpd   #$1234    special marker  F3D3 27   05                 beq    99f       yes - exit  F3D5 35   07                 puls   cc,d      no - abort DB_xx function  F3D7 32   62                 leas   2,s  F3D9 39                      rts  F3DA 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             13:15:56  Apr 02, 2024   Page  111Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             13:15:56  Apr 02, 2024   Page  112Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E05E   CPUtraps FFF0   CR       000D   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F397   DB_cntrl 0401   DB_confi F39D   DB_iflg  0400   DB_main  F379   DB_msg   F3A3   DB_outsp F3BF   DB_pcrlf F391   DB_pdata F37F   DB_phex  F385   DB_phex2 F38B   DB_pspac F3BF   DB_test  F3CA   DBmsg00  E012   DBmsg01  E02A   DBmsg02  E04A   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5EF   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    002E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   002A   D_inthan 0028   D_test   002C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2F7   FIFO_put E31C   FIFOgeta E2EE   FIFOputa E314   FIOPRI   FFCE   FIO_get  E2CC   FIO_lock 0446   FIO_rel  E2E1   GCRGA    EDF1   GCRILLT  EEB9   GCRIMR   EEF5   GCRIR    EED7   GCRMR    EDD3   GCRPHY   EFB1   GCRRCR   EF6D   GCRRTR   EF4F   GCRSHA   EE4D   GCRSIMR  EF31   GCRSIP   EE8B   GCRSIR   EF13   GCRSNM   EE1F   GCRUIP   EF9A   GCRURP   EF8B   GCRVERS  EFCF   GSKATM   F27E   GSRCR    EFFC   GSRDHAR  F06C   GSRDIP   F0AA   GSRDPOR  F0D8   GSRFRAG  F260   GSRIMR   F242   GSRIR    F021   GSRMR    EFDE   GSRMSS   F0F6   GSRPORT  F04E   GSRPROT  F114   GSRRBFS  F16E   GSRRXRP  F20D   GSRRXRS  F1F6   GSRRXWP  F22B   GSRSR    F03F   GSRTBFS  F18C   GSRTOS   F132   GSRTTL   F150   GSRTXFR  F1AA   GSRTXRP  F1C1   GSRTXWP  F1D8   HANGS    0001   HRECSIZ  0004   H_cpu    E46E   H_fio    E492   IF       0010   INTS     0002   IO_end   E395   IO_han   E337   IRQ_han  E3B3   IRQmsg10 E3C0   IS       0003   IU       0002   IX       0000   IY       0001   LF       000A   MAXHIST  0010   MAXTBL   0003   MAX_DEV  0001   MAX_S_NU 0019   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NBRQLN   0004   NBSIZE   0204   NET      0001   NUM_TSK  0459   O_CLOSE  0020   O_INTRPT 0038   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EE08   PCRILLT  EEC8   PCRIMR   EF04   PCRIR    EEE6   PCRMR    EDE2   PCRPHY   EFC0   PCRRCR   EF7C   PCRRTR   EF5E   PCRSHA   EE6C   PCRSIMR  EF40   PCRSIP   EEA2   PCRSIR   EF22   PCRSNM   EE36   PF_INET  0002   PF_UNIX  0001   PIPES    0006   POLPRI   FFBA   PROT_EGP 0008   PROT_ICM 0001   PROT_IGM 0002   PROT_XLT 8000   PSRCR    F00B   PSRDHAR  F08B   PSRDIP   F0C1   PSRDPOR  F0E7   PSRFRAG  F26F   PSRIMR   F251   PSRIR    F030   PSRKATM  F28D   PSRMR    EFED   PSRMSS   F105   PSRPORT  F05D   PSRPROT  F123   PSRRBFS  F17D   PSRRXRP  F21C   PSRTBFS  F19B   PSRTOS   F141   PSRTTL   F15F   PSRTXWP  F1E7   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F2C6   REJECT   0080   FIO Simulation Structure             13:15:57  Apr 02, 2024   Page  113Debug Interface Routines                            ROMLOorg E000   ROM_ERR  E0D3   ROM_VERS 0020   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOCK  000E   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_PDATA  000B   R_RD1C   0009   R_RDFRM  0021   R_RDOK   0005   R_RDRBLK 0033   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_RQRBLK 0032   R_RQRD   0005   R_RQRDNB 0015   R_RQSBLK 0030   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   R_SNDBLK 0031   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E407   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_IRAW  0004   SK_MRAW  0003   SK_NONBL 0100   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_RDRBLK 00D8   S_READ   0030   S_RQRBLK 00D0   S_RQRD   0028   S_RQSBLK 00C0   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDBLK 00C8   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WRFB2SK  F314   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSIRAW   0032   WSLACK   001D   WSLIST   0014   WSMRAW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1DF   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3B0   bittab   E775   bmread   ED6A   bt2num   E764   byterd   ED46   bytewr   EDA3   change   E4B6   chproc   040C   clock_ti 0455   conlb1   E81E   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   FIO Simulation Structure             13:15:57  Apr 02, 2024   Page  114Debug Interface Routines                            fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E07D   fio_fsz  E07B   fio_irq  E22A   fio_msg  E294   fio_rese E1EA   fio_resp E2B0   fio_star E09B   fio_wait E20D   fiointe  E293   functb   EC6E   getjo1   E4FE   getjo2   E50D   getjo4   E514   getjo6   E51D   getjo8   E51F   getjob   E4F8   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3D8   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   E577   makrdy   E562   max_trn  E07F   mod_name 0002   mod_tbl  E1D9   mod_type 0000   no_dev   E15A   num2bt   E75A   nwp_strt 0000   oldorg   ED12   polext   E838   putru1   E536   putru2   E53D   putru4   E54B   putru5   E55A   putru6   E55E   putrun   E529   rdrqer1  E957   rom_bad  E0D1   rom_firq E0A4   rom_init E080   rom_int  E0C6   rom_nmi  E09E   rom_swi  E0AB   rom_swi2 E0B1   rom_swi3 E0B8   rom_trap E0BF   rsche2   E4CD   rsche3   E4E1   rsched   E4BC   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E699   send_SI  E449   set_tabl E112   showrg   ECBC   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E8D8   skbind   E861   skclin   E799   skclos   E77E   skcner1  E857   skcner2  E844   skcner3  E85B   skcner4  E853   skcner5  E84F   skcner6  E848   skconn   E7CB   skcraw   E6D1   skctcp   E6BF   skcudp   E6C8   skdisc   ED0B   skdvini  E641   skfres   E6B8   skinit   E627   skinthan E698   skintrp  ED0B   sklist   E8A6   sknbe1   EC01   sknbrd   EC04   sknbrp1  EBF8   sknbrp2  EBDF   sknbrr   EBAD   sknbsd   EC37   sknbsr   EC27   sknewp   E69A   skopen   E6DE   skoper1  E750   skoper2  E754   skowfo   E738   skrecv   E95C   skreqrd  E90F   skreqwr  E99F   sksend   E9E6   skskep   ED0B   sksmac   ED0B   skspcl   EC47   sktest   E695   skurrd   EAA0   skurrdf  EA29   skurwt   EACE   skusnm   EB1D   skusnt   EB73   skuwr2   EB1D   sleep    E59C   sleep7   E5C4   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   ED12   spista   0000   spistr2  ED18   sprend   EDC1   stbinit  E0E0   sto_chk  E161   swtchu   E4ED   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1CD   timerchk E1D3   timerin  E1C7   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F29C   tsk2rx   F2B7   tsk2tx   F2A8   tskend   049E   tskinit  E16F   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E583   wakeu3   E58A   wakeu4   E58E   wakeu5   E590   wakeup   E578   wlocip   0370   wordrd   ED58   wordwr   EDB2   wzanyp   0457   wzcmnd   0004   wzdctr   0001   wzdevt   E6AC   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzifga   E00E   wzifip   E006   wzifma   E000   wzifnm   E00A   wzipad   0014   wzmyip   0000   wzprot   0028   wzrdev   ECA0   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzwdev   EC76   wzxfer   0008   xmtint   E5D1   