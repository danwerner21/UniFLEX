               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     16:36:19  Feb 24, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                     SWTPc      Intelligent I/O Proce     16:36:19  Feb 24, 2024   Page    2Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     16:36:20  Feb 24, 2024   Page    3Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     16:36:20  Feb 24, 2024   Page    4Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     16:36:20  Feb 24, 2024   Page    5Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     16:36:20  Feb 24, 2024   Page    6Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     16:36:21  Feb 24, 2024   Page    7Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     16:36:30  Feb 24, 2024   Page    8Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * should match nwp_codes.h  and MAX_S_NUM                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  0004               D_func2   rmb    2         2  0006               D_func3   rmb    2         3  0008               D_func4   rmb    2         4  000A               D_func5   rmb    2         5  000C               D_func6   rmb    2         6  000E               D_func7   rmb    2         7  0010               D_func8   rmb    2         8  0012               D_func9   rmb    2         9  0014               D_funcA   rmb    2         A  0016               D_funcB   rmb    2         B  0018               D_funcC   rmb    2         C  001A               D_funcD   rmb    2         D  001C               D_funcE   rmb    2         E  001E               D_funcF   rmb    2         F                     *  0020               D_func10  rmb    2         10  0022               D_func11  rmb    2         11  0024               D_func12  rmb    2         12  0026               D_func13  rmb    2         13                     *  0028               D_inthan  rmb    2         14 Interrupt poller/handlerSWTPc      Intelligent I/O Proce     16:36:31  Feb 24, 2024   Page    9Device     Table Structure                            002A               D_init    rmb    2         15 Device initialization  002C               D_test    rmb    2         16 Test for device present                     *  002E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     16:36:31  Feb 24, 2024   Page   10History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     16:36:31  Feb 24, 2024   Page   11IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 16:36:32  Feb 24, 2024   Page   12IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 16:36:42  Feb 24, 2024   Page   13IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSRAW     equ    $42       sock mac raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commands               0081  WSRRQF    equ    $80+1     read request data in fifoTask       Structure                 16:36:43  Feb 24, 2024   Page   14IOP        Memory Layout                                           0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                    0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzdctr    rmb    1         [*] (pre= $00)  delay counter  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parameters                     *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                     Task       Structure                 16:36:43  Feb 24, 2024   Page   15IOP        Memory Layout                                           002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_RAW    equ    3         raw socket                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             16:36:44  Feb 24, 2024   Page   16IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             16:36:44  Feb 24, 2024   Page   17IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             16:36:45  Feb 24, 2024   Page   18Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                                          *                     * Error codes                     *FIO Simulation Structure             16:36:46  Feb 24, 2024   Page   19Dual_Port RAM Structure                                            0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 Socket error,                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  set    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successful               0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  set    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                     *                     *                     * fio_codes.h is the leading file, here are                     * ammendments                     *                     *FIO Simulation Structure             16:37:02  Feb 24, 2024   Page   20Dual_Port RAM Structure                                            0003  R_RQWR    set    $03       [S]  Request for write               0005  R_RQRD    set    $05       [S]  Request for read               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to mac               0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *               0015  MAX_S_NUM equ    21        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                     FIO Simulation Structure             16:37:03  Feb 24, 2024   Page   21Dual_Port RAM Structure                                                  *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             16:37:03  Feb 24, 2024   Page   22Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             16:37:03  Feb 24, 2024   Page   23CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0B0                    fdb    rom_trap  Unused  FFF2 E0A9                    fdb    rom_swi3  SWI3  FFF4 E0A2                    fdb    rom_swi2  SWI2  FFF6 E095                    fdb    rom_firq  FIRQ  FFF8 E3A4                    fdb    IRQ_han   IRQ  FFFA E09C                    fdb    rom_swi   SWI  FFFC E08F                    fdb    rom_nmi   Background debug  FFFE E071                    fdb    rom_init  Reset                     *                               info   UniFLEX Networking ROM                               info   for CPU09GPP+09NET                               info   At the start of ROM the locations for preset                               info   the network setting are reserved                               info   0000...0005  MAC ADDRESS                               info   0006...0009  IP address                               info   000A...000D  NETMASK                               info   000E...0011  GATEWAY IP address                               info   avoid any duplicate settings!                                          FIO Simulation Structure             16:37:03  Feb 24, 2024   Page   24System     RESET Code                                                      E000                         org    ROMLOorg                                          * start of ROM                     ***************************************************************                     *                     * contains the MAC ADDRESS to be used, make sure that is unique                     *                     * contains the IP address for the interface                     *                     * contains the NETMASK for the interface                     *                     * contains the IP address of the GATEWAY                     *                     **************************************************************                     *                     * REPLACE the defaults with your specific values                     *                     * mac address 6 bytes                            (E000...E005)  E000 FF FF FF FF   wzifma    fcb    $FF,$FF,$FF,$FF,$FF,$FF                     * IP addres for THIS interface (avoid duplicates!!!)  E006 FF FF FF FF   wzifip    fcb    255,255,255,255 (E006...E009)                     * NETMASK  E00A FF FF FF FF   wzifnm    fcb    255,255,255,255 (E00A...E00D)                     * GATEWAY  E00E FF FF FF FF   wzifga    fcb    255,255,255,255 (E00E...E011)                     *                     **************************************************************                       E012 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM',0  E01B 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E03B 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E04F 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               E06C  fio_fsz   equ    *         device fifo size               E06E  fio_dsz   equ    *+2       device RAM size               E070  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E06C 0200                    fdb    512       fio_fsz FIFO SIZE  E06E 0400                    fdb    1024      fio_dsz DEVICE SIZE  E070 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *FIO Simulation Structure             16:37:04  Feb 24, 2024   Page   25System     RESET Code                                                    * System RESET code                     *  E071 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E075                         ldmd   3  E075 113D                    fdb    $113d  E077 03                      fcb    3                               endm                      >E078 BD   E0D1     20        jsr    stbinit   go initialize system memory                       E07B 10FE 049C     30        lds    tsktab    Task 0 Stack  E07F 32   E9 00D7            leas   TSKSIZ,s  E083 17   0155               lbsr   fio_reset  E086 BD   E626               jsr    skdvini   set the device itself  E089 17   012C               lbsr   timerin                     *                     * Initialization complete - Start executing commands                     *  E08C               fio_start  E08C 7E   E4A9     10        jmp    rsched                                          FIO Simulation Structure             16:37:04  Feb 24, 2024   Page   26ROM        Interrupt Fielders                                              E08F 8D   26       rom_nmi   bsr    rom_int  E091 4E 4D 49 00             fcc    'NMI',0  E095 8D   20       rom_firq  bsr    rom_int  E097 46 49 52 51             fcc    'FIRQ',0  E09C 8D   19       rom_swi   bsr    rom_int  E09E 53 57 49 00             fcc    'SWI',0  E0A2 8D   13       rom_swi2  bsr    rom_int  E0A4 53 57 49 32             fcc    'SWI2',0  E0A9 8D   0C       rom_swi3  bsr    rom_int  E0AB 53 57 49 33             fcc    'SWI3',0  E0B0 8D   05       rom_trap  bsr    rom_int  E0B2 54 52 41 50             fcc    'TRAP',0                       E0B7 8E   E0C4     rom_int   ldx    #ROM_ERR  E0BA BD   F23D               jsr    DB_pdata  E0BD 35   10                 puls   x  E0BF BD   F23D               jsr    DB_pdata  E0C2 20   FE       rom_bad   bra    *                     *  E0C4 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             16:37:04  Feb 24, 2024   Page   27Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0D1 8E   0000     stbinit   ldx    #0        s  clear all variables  E0D4 CC   0000               ldd    #0  E0D7 ED   81       10        std    ,x++  E0D9 8C   3EFF               cmpx   #end_vars done yet?  E0DC 25   F9                 blo    10b                       E0DE CC   0D04               ldd    #DEBUG  E0E1 FD   0401               std    DB_cntrl                                            E0E4 B6   E070               lda    max_trn   shared with main CPU  E0E7 48                      asla             *2  E0E8 8B   04                 adda   #4        fixed system tasks  E0EA B7   0459               sta    NUM_TSK                     * >E0ED 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E0F0 8E   040E     15        ldx    #SI_Q     set queue empty  E0F3 BF   0444               stx    SI_Q_ptr  E0F6 8E   0447               ldx    #int_buf  reset message in pointer  E0F9 BF   0453               stx    int_ptr                      >E0FC 17   0061     17        lbsr   tskinit   initialize tasks                       E0FF 17   1159     18        lbsr   DB_config display configuration  E102 39                      rts                                          *                     * Set up system tables                     *  E103               set_tables  E103 108E 04A0               ldy    #dev_tab  E107 8E   E5DC               ldx    #DEV_SOCK  E10A AF   22                 stx    dev_type,y  E10C AD   98 2A              jsr    [D_init,x] (skinit)                                          * Compute configuration  E10F CE   E1CA               ldu    #mod_tbl  tables with module refs  E112 AE   C4       12        ldx    mod_type,u  E114 27   09                 beq    20f       jump if end of module table  E116 AD   98 2C              jsr    [D_test,x] check for device  E119 25   04                 bcs    15f       jump if found  E11B 33   44                 leau   MOD_SIZE,u  E11D 20   F3                 bra    12b                     *FIO Simulation Structure             16:37:04  Feb 24, 2024   Page   28Table      Initialization                             E11F               15  E11F               20                     * -- All done setting up configuration                       E11F CC   04C6               ldd    #SYS_TABS start of system tables  E122 1F   03                 tfr    d,u                     * -- Task table  E124 86   D7                 lda    #TSKSIZ  E126 F6   0459               ldb    NUM_TSK  E129 3D                      mul  E12A FF   049C               stu    tsktab >E12D 17   0022               lbsr   sto_chk   check for system table space overflow  E130 FF   049E               stu    tskend                     *                     * -- All done  E133 39            90        rts                     *  E134 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E14B 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E152 33   CB       sto_chk   leau   d,u       compute new end pointer  E154 1183 3EFF               cmpu   #end_vars overflow?  E158 22   03                 bhi    10f       yes - return error  E15A 1C   FE                 clc              no         - return OK  E15C 39                      rts  E15D 1A   01       10        sec              ..         bad owies  E15F 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E160 BE   049C     tskinit   ldx    tsktab  E163 BF   0409               stx    utask  E166 F6   0459               ldb    NUM_TSK   # tasks in system  E169 34   04                 pshs   b  E16B 10BE 049C               ldy    tsktab    task 1  E16F 31   A9 00D7            leay   TSKSIZ,y  E173               10                                            E173 86   04       11        lda    #TFREE    mark all tasks free  E175 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             16:37:05  Feb 24, 2024   Page   29Table      Initialization                             E178 26   02                 bne    15f  E17A 86   05                 lda    #TSYS     the system task is never free  E17C A7   04       15        sta    tsstat,x  E17E 86   FF                 lda    #$FF      not associated with a terminal  E180 A7   0D                 sta    tsdev,x  E182 A7   0E                 sta    tsdev+1,x  E184 33   89 00D7            leau   TSKSIZ,x  initialize stack  E188 CC   E328               ldd    #IO_han  E18B 34   20                 pshs   y  E18D AC   E1                 cmpx   ,s++      task 1?  E18F 26   03                 bne    20f       no - normal I/O handling task  E191 CC   E3F8               ldd    #SI_HAN   yes - special terminal interrupt handling task  E194 36   06       20        pshu   d  E196 EF   88 11              stu    usp,x  E199 EF   88 13              stu    umark0,x  E19C 30   89 00D7            leax   TSKSIZ,x  E1A0 6A   E4                 dec    0,s       done?  E1A2 26   CF                 bne    10b  E1A4 32   61                 leas   1,s       clean up stack  E1A6 CC   0000               ldd    #0        nothing running or sleeping  E1A9 FD   0403               std    runlst  E1AC FD   0405               std    slplst  E1AF FD   0407               std    slplst+tsslnk  E1B2 30   A4                 leax   0,y       start interrupt handling task  E1B4 BD   E54F               jsr    makrdy  E1B7 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1B8 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1BA B7   8400               sta    tim_base  interrupt enable  E1BD 39                      rts                                                         E1BE  timerack  equ    *  E1BE 86   01                 lda    #1  E1C0 B7   8401               sta    tim_rest  reset interrupt  E1C3 39                      rts                       E1C4 B6   8400     timerchk  lda    tim_base  E1C7 84   80                 anda   #%10000000 interrupt flag  E1C9 39                      rtsFIO Simulation Structure             16:37:06  Feb 24, 2024   Page   30IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1CA  mod_tbl   equ    *  E1CA E5DC E1D0               fdb    DEV_SOCK,WZ5_name  E1CE 0000                    fdb    0                     *  E1D0 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             16:37:06  Feb 24, 2024   Page   31FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     * it sets the offsets to the sock array and to the device info                     *  E1DB               fio_reset                     * when here, all storage locations have been erased already                     *  E1DB 8E   0000               ldx    #0  E1DE 9F   14                 stx    fifo_get  set Q pointers  E1E0 9F   16                 stx    fifo_put  E1E2 8E   0370               ldx    #WZNETOF  E1E5 9F   1A                 stx    fifo_us1  E1E7 8E   0220               ldx    #WZSKOFF  E1EA 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1EC 86   08                 lda    #8  E1EE A7   84       01        sta    wzenum,x  E1F0 30   88 2A              leax   WZSIZE,x  to next  E1F3 4A                      deca  E1F4 26   F8                 bne    01b                     *  E1F6 BE   E06E               ldx    fio_dsz  E1F9 30   1E                 leax   -2,x      one from top  E1FB CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E1FE C6   FF       fio_wait  ldb    #255      Spin counter                     *  E200               00  E200 6D   84                 tst    0,x       fio_cpuF  E202 27   16                 beq    10f                     *  E204 5A                      decb  E205 26   F9                 bne    00b       jump back if not ready                     *  E207 33   5F                 leau   -1,u  E209 1183 0000               cmpu   #0  E20D 26   EF                 bne    fio_wait  E20F 8E   E04F               ldx    #CPU_down  E212 17   1028               lbsr   DB_pdata  E215 17   101F               lbsr   DB_main  E218 20   C1                 bra    fio_reset                     * reset OK  E21A 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     *  E21B BE   0453     fio_irq   ldx    int_ptr   input message pointer  E21E 96   00                 lda    cpu_fio   move REQUESTFIO Simulation Structure             16:37:06  Feb 24, 2024   Page   32FIO        Simulation Routines                        E220 A7   80                 sta    ,x+  E222 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E224 ED   81                 std    ,x++  E226 96   03                 lda    cpu_fio2  specific DATA  E228 A7   80                 sta    ,x+  E22A DC   04                 ldd    cpu_fio3  device major/minor  E22C ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E22E FE   E06E               ldu    fio_dsz  E231 33   5F                 leau   -1,u  E233 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E235 BF   0453               stx    int_ptr   update pointer  E238 108E 0447               ldy    #int_buf  get message from buffer  E23C A6   A4                 lda    0,y       -- Send interrupt command?  E23E 81   38                 cmpa   #S_INTRPT  E240 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E242 10BF 0453               sty    int_ptr   reset pointer  E246 E6   23                 ldb    3,y       signal  E248 AE   24                 ldx    4,y       SOCK reference                     *  E24A BD   E67E               jsr    sdev_sig  send device signal  E24D 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E24F BE   049C     30        ldx    tsktab    search for an available task  E252 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  E255 A6   04       32        lda    tsstat,x  E257 81   04                 cmpa   #TFREE    looking for a "free" task  E259 27   0E                 beq    40f                     *  E25B 30   89 00D7            leax   TSKSIZ,x  E25F 5A                      decb  E260 26   F3                 bne    32b                     *  E262 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E264 BD   E285               jsr    fio_msg  E267 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E269 108E 0447     40        ldy    #int_buf  get message from buffer  E26D 10BF 0453               sty    int_ptr   reset pointerFIO Simulation Structure             16:37:07  Feb 24, 2024   Page   33FIO        Simulation Routines                        E271 E6   A0                 ldb    ,y+       command byte  REQUEST  E273 E7   09                 stb    tscmd,x   save for task  E275 EC   A1                 ldd    ,y++      sequence #    task ID  E277 ED   0A                 std    tsseq,x  E279 E6   A0                 ldb    ,y+       command specific DATA  E27B E7   0C                 stb    tstval,x  E27D EC   A1                 ldd    ,y++      associate with terminal major/minor  E27F ED   0D                 std    tsdev,x  E281 BD   E54F               jsr    makrdy    make task ready to run                     *  E284 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  E285 34   54       fio_msg   pshs   b,x,u     save register  E287 FE   E06E               ldu    fio_dsz  E28A 33   5E                 leau   -2,u      one off top  E28C D7   09                 stb    fio_cpu   set up mailbox value                       E28E 86   FF       5         lda    #$FF      tell CPU mailbox full  E290 A7   C4                 sta    0,u       fio_cpuF  E292 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  E295 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E297 27   06                 beq    20f       jump if consumed                     *  E299 30   1F                 leax   -1,x      time-out yet?  E29B 26   F8                 bne    10b                     *  E29D 20   F3                 bra    05b       try again                     *  E29F 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E2A1 34   16       fio_response pshs d,x  E2A3 8D   18                 bsr    FIO_get   access FIO  E2A5 BE   0409               ldx    utask     task ID  E2A8 EC   0A                 ldd    tsseq,x  E2AA DD   0A                 std    fio_cpu1  E2AC EC   0D                 ldd    tsdev,x   device infoFIO Simulation Structure             16:37:08  Feb 24, 2024   Page   34FIO        Simulation Routines                        E2AE DD   0D                 std    fio_cpu3  E2B0 A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2B2 97   0C                 sta    fio_cpu2  E2B4 E6   61                 ldb    1,s       is RESPONSE code >E2B6 BD   E285               jsr    fio_msg  E2B9 8D   17                 bsr    FIO_rel   release FIO  E2BB 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2BD 34   76       FIO_get   pshs   d,x,y,u   save registers  E2BF 108E 0446     10        ldy    #FIO_lock is the device locked  E2C3 6D   A4                 tst    0,y  E2C5 27   07                 beq    20f       no - go get it                     *  E2C7 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2C9 BD   E589               jsr    sleep  E2CC 20   F1                 bra    10b       try again                     *  E2CE 6C   A4       20        inc    0,y       mark in use  E2D0 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2D2 34   76       FIO_rel   pshs   d,x,y,u  E2D4 108E 0446               ldy    #FIO_lock  E2D8 6F   A4                 clr    0,y  E2DA BD   E565               jsr    wakeup  E2DD 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2DF 34   04       FIFOgeta  pshs   b  E2E1 8D   05                 bsr    FIFO_get  E2E3 35   02                 puls   a  E2E5 1E   89                 exg    a,b  E2E7 39                      rts                     *  E2E8 34   12       FIFO_get  pshs   a,x  E2EA DC   12                 ldd    fifo_cnt  any data?  E2EC 27   15                 beq    99f       no - exit                     *  E2EE                         decd   yes       - adjust count  E2EE 104A                    fdb    $104a                               endm  E2F0 DD   12                 std    fifo_cnt  E2F2 9E   14                 ldx    fifo_get  get consumer pointerFIO Simulation Structure             16:37:16  Feb 24, 2024   Page   35FIO        Simulation Routines                        E2F4 E6   88 20              ldb    fifo,x    fetch byte  E2F7 30   01                 leax   1,x       bump pointer  E2F9 BC   E06C               cmpx   fio_fsz   end of fifo?  E2FC 26   03                 bne    10f                     *  E2FE 8E   0000               ldx    #0        reset pointer                     *  E301 9F   14       10        stx    fifo_get                     *  E303 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E305 34   04       FIFOputa  pshs   b  E307 1F   89                 tfr    a,b  E309 8D   02                 bsr    FIFO_put  E30B 35   84                 puls   b,pc                     *  E30D 34   16       FIFO_put  pshs   d,x  E30F 9E   16                 ldx    fifo_put  get consumer pointer  E311 E7   88 20              stb    fifo,x    store byte  E314 30   01                 leax   1,x       bump pointer  E316 BC   E06C               cmpx   fio_fsz   end of FIFO?  E319 26   03                 bne    10f                     *  E31B 8E   0000               ldx    #0        reset pointer  E31E 9F   16       10        stx    fifo_put                     *  E320 DC   12                 ldd    fifo_cnt  E322                         incd  E322 104C                    fdb    $104c                               endm  E324 DD   12                 std    fifo_cnt  E326 35   96       99        puls   d,x,pcFIO Simulation Structure             16:37:27  Feb 24, 2024   Page   36IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E328               IO_han    seti   block     interrupts  E328 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  E32A               10        clri  E32A 1C   AF                 andcc  #!(FF|IF)                               endm  E32C BE   0409               ldx    utask     get task control block address  E32F A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E331 44                      lsra             isolate    command  E332 44                      lsra  E333 44                      lsra                     **        lsra  E334 81   15                 cmpa   #MAX_S_NUM  E336 22   69                 bhi    bad_cmd                     *  E338 48                      lsla             --   word index on command  E339 34   10                 pshs   x  E33B 8E   04A0               ldx    #dev_tab  E33E AE   02                 ldx    dev_type,x get handler table address  E340 10AE 86                 ldy    a,x       get processor address  E343 35   10                 puls   x  E345 34   20                 pshs   y  E347 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E34A 27   0A                 beq    05f       else it is target ponter  E34C 10AF E4                 sty    0,s  E34F 108E 0000               ldy    #0  E353 10AF 0F                 sty    tsagin,x  reset pointer  E356 35   20       05        puls   y         change address  E358 4F                      clra                     *  E359 8E   E386               ldx    #IO_end   interrupt handler address  E35C 34   10                 pshs   x  E35E BE   0409               ldx    utask     task pointer  E361 10EF 88 15              sts    umark1,x  E365 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             16:37:35  Feb 24, 2024   Page   37IO         Command Handler                            E367 1E   03                 exg    d,u  E369 84   07                 anda   #%00000111 mask off address bits  E36B 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E36D AD   A4                 jsr    0,y       perform operation & return status  E36F 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E371 BE   0409               ldx    utask     restore task pointer  E374 108C FFFF               cmpy   #$ffff  E378 26   09                 bne    20f                     * task is NOT done yet  E37A 86   BA                 lda    #POLPRI  E37C A7   05                 sta    tsprir,x  at lower prio  E37E BD   E4A3               jsr    change  E381 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E383 BD   E2A1     20        jsr    fio_response                     *                     * task is done                     *  E386               IO_end    seti   mask      interrupts  E386 1A   50                 orcc   #FF|IF                               endm  E388 BE   0409               ldx    utask     restore task control block address  E38B A7   0C                 sta    tstval,x  remember transaction value sent  E38D E7   09                 stb    tscmd,x   and command response  E38F 86   04                 lda    #TFREE    mark task "terminated & free"  E391 A7   04                 sta    tsstat,x  E393 86   FF                 lda    #$FF      disassociate from any terminal  E395 A7   0D                 sta    tsdev,x  E397 A7   0E                 sta    tsdev+1,x  E399 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E39B BD   E4A9     90        jsr    rsched    run other tasks >E39E 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  E3A1               bad_cmdFIO Simulation Structure             16:37:43  Feb 24, 2024   Page   38IO         Command Handler                            E3A1 C6   81                 ldb    #E_BADCMD error code  E3A3 39                      rtsFIO Simulation Structure             16:37:48  Feb 24, 2024   Page   39Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3A4  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3A4 BE   E06E     10        ldx    fio_dsz  E3A7 30   1F                 leax   -1,x  E3A9 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3AB 27   03                 beq    99f       no - move on  E3AD BD   E21B               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3B0 3B            99        rti              return from interrupt                     *  E3B1 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3BC 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             16:37:52  Feb 24, 2024   Page   40Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3C9 34   36       int_all   pshs   d,x,y  E3CB F6   0459               ldb    NUM_TSK  E3CE C0   02                 subb   #2  E3D0 34   04                 pshs   b  E3D2 BE   049C               ldx    tsktab  E3D5 30   89 01AE            leax   2*TSKSIZ,x                     *  E3D9 EC   61       10        ldd    1,s  E3DB 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3DE 26   0C                 bne    20f                     *  E3E0 BC   0409               cmpx   utask     make sure I don't get blown away  E3E3 27   07                 beq    20f                     *  E3E5 34   16                 pshs   d,x  E3E7 BD   E5BE               jsr    xmtint    interrupt task  E3EA 35   16                 puls   d,x                     *  E3EC 30   89 00D7  20        leax   TSKSIZ,x  next task  E3F0 6A   E4                 dec    0,s       more tasks?  E3F2 26   E5                 bne    10b  E3F4 32   61                 leas   1,s                     *  E3F6 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             16:38:00  Feb 24, 2024   Page   41Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E3F8 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E3FC                         seti  E3FC 1A   50                 orcc   #FF|IF                               endm  E3FE FE   0444               ldu    SI_Q_ptr  get current Q ptr  E401 1183 040E               cmpu   #SI_Q     anything in Q?  E405 26   07                 bne    20f       yes - go process it                     *  E407 C6   D8                 ldb    #SIQPRI   wait for something to do  E409 BD   E589               jsr    sleep  E40C 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E40E E6   C2       20        ldb    0,-u      B = Interrupt #  E410 34   04                 pshs   b  E412 EC   C3                 ldd    0,--u     A = Device #  E414 34   06                 pshs   d  E416 EC   C3                 ldd    0,--u     task ID  E418 34   06                 pshs   d         save registers  E41A FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E41D E6   63                 ldb    3,s       set up to flush all input for this terminal                     **!       jsr     ttftab     X=ttytab, U=device table                     **!       jsr     flushi  E41F                         clri   allow     interrupts  E41F 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E421 BD   E2BD               jsr    FIO_get   get access to FIO  E424 EC   E1                 ldd    0,s++     task ID  E426 DD   0A                 std    fio_cpu1  E428 EC   E1                 ldd    ,s++      terminal #  E42A DD   0D                 std    fio_cpu3  terminal  E42C E6   E0                 ldb    ,s+       interrupt #  E42E D7   0C                 stb    fio_cpu2  signal  E430 C6   07                 ldb    #R_INTRPT  E432 BD   E285               jsr    fio_msg   send interrupt message  E435 BD   E2D2               jsr    FIO_rel   release access to FIO  E438 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = SOCK address                     *   jsr send_SIFIO Simulation Structure             16:38:15  Feb 24, 2024   Page   42Terminal   Interrupt Handling Task                                       *  E43A 34   76       send_SI   pshs   d,x,y,u   save registers  E43C FE   0444               ldu    SI_Q_ptr  get Q head  E43F 1183 0444               cmpu   #SI_Q_ptr check for overflow  E443 24   0D                 bhs    90f       exit if so - sorry                     *  E445 34   04                 pshs   b                     **!       ldd     ttask,x    task id  E447 ED   C1                 std    0,u++                     **!       ldd     tdevic,x   get terminal #  E449 ED   C1                 std    0,u++     place value in Queue  E44B 35   04                 puls   b  E44D E7   C0                 stb    0,u+  E44F FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E452 108E 040E     90        ldy    #SI_Q     wake up Queue server  E456 BD   E565               jsr    wakeup  E459 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             16:38:20  Feb 24, 2024   Page   43History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E45B 34   16       H_cpu     pshs   d,x  E45D BE   049A               ldx    hstptr    get history queue pointer  E460 96   00                 lda    cpu_fio  E462 A7   84                 sta    hst_cmd,x  E464 96   01                 lda    cpu_fio1  E466 A7   01                 sta    hst_seq,x  E468 96   04                 lda    cpu_fio3  E46A A7   02                 sta    hst_tty,x  E46C 96   03                 lda    cpu_fio2  E46E A7   03                 sta    hst_val,x  E470 30   04                 leax   HRECSIZ,x  E472 8C   049A               cmpx   #hstptr   end of Queue?  E475 25   03                 blo    10f  E477 8E   045A               ldx    #hstbuf  E47A BF   049A     10        stx    hstptr  E47D 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E47F 34   16       H_fio     pshs   d,x  E481 BE   049A               ldx    hstptr    get history queue pointer  E484 96   09                 lda    fio_cpu  E486 A7   84                 sta    hst_cmd,x  E488 96   0A                 lda    fio_cpu1  E48A A7   01                 sta    hst_seq,x  E48C 96   0D                 lda    fio_cpu3  E48E A7   02                 sta    hst_tty,x  E490 96   0C                 lda    fio_cpu2  E492 A7   03                 sta    hst_val,x  E494 30   04                 leax   HRECSIZ,x  E496 8C   049A               cmpx   #hstptr   end of Queue?  E499 25   03                 blo    10f  E49B 8E   045A               ldx    #hstbuf  E49E BF   049A     10        stx    hstptr  E4A1 35   96                 puls   d,x,pcFIO Simulation Structure             16:38:32  Feb 24, 2024   Page   44Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4A3 BE   0409     change    ldx    utask     point to task table entry >E4A6 17   006D               lbsr   putrun    put on ready list                     *  E4A9               rsched    seti   mask      interrupts  E4A9 1A   50                 orcc   #FF|IF                               endm  E4AB BE   0409               ldx    utask     point to current task  E4AE 10EF 88 13              sts    umark0,x  save stack pointers  E4B2 BE   049C               ldx    tsktab    point to task table  E4B5 8D   23                 bsr    swtchu    switch users  E4B7 7F   040D               clr    idle      reset idle/running flag                     *  E4BA 7F   040C     rsche2    clr    chproc    reset change flag >E4BD 17   0025               lbsr   getjob    get a new task  E4C0 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E4C2 86   7F       05        lda    #127      set higheset priority  E4C4 B7   040B               sta    jobpri    set as current  E4C7                         clri   clear     interrupts  E4C7 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  E4C9 12                      nop  E4CA                         seti  E4CA 1A   50                 orcc   #FF|IF                               endm  E4CC 20   EC                 bra    rsche2    loop til find a ready one                     *  E4CE F7   040B     rsche3    stb    jobpri    set new priority  E4D1 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             16:38:49  Feb 24, 2024   Page   45Scheduler  routines                                   E4D3 BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E4D6 CC   0001               ldd    #1        return 1 to new task  E4D9 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  E4DA 35   20       swtchu    puls   y         get return address  E4DC BF   0409               stx    utask     set up new running task  E4DF 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       E4E3 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             16:38:58  Feb 24, 2024   Page   46Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E4E5 5F            getjob    clrb             clear      flag  E4E6 BE   0403               ldx    runlst    point to head of list  E4E9 27   1F                 beq    getjo6    empty list?                     *  E4EB A6   04       getjo1    lda    tsstat,x  get status byte  E4ED 81   01                 cmpa   #TRUN     is it in run state?  E4EF 26   1B                 bne    getjo8                     *  E4F1 5D                      tstb             first      in list?  E4F2 27   06                 beq    getjo2                     *  E4F4 EC   84                 ldd    tslink,x  remove from list  E4F6 ED   A4                 std    tslink,y  E4F8 20   07                 bra    getjo4                     *  E4FA 10AE 84       getjo2    ldy    tslink,x  remove from list head  E4FD 10BF 0403               sty    runlst    set new head                     *  E501 E6   05       getjo4    ldb    tsprir,x  get priority  E503 6F   84                 clr    tslink,x  zero out link  E505 6F   01                 clr    tslink+1,x so not run list  E507 86   FF                 lda    #$ff      set ne status  E509 39                      rts              return                         *  E50A 4F            getjo6    clra             set        eq status  E50B 39                      rts                     *  E50C 1F   12       getjo8    tfr    x,y       save old pos  E50E AE   84                 ldx    tslink,x  follow link  E510 27   F8                 beq    getjo6                     *  E512 C6   01                 ldb    #1        set flag  E514 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             16:39:14  Feb 24, 2024   Page   47Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E516 34   01       putrun    pshs   cc        save status  E518                         seti   mask      interrupts  E518 1A   50                 orcc   #FF|IF                               endm  E51A 10BE 0403               ldy    runlst    point to head  E51E 26   0A                 bne    putru2  E520 BF   0403               stx    runlst    set new head                     *  E523 CC   0000     putru1    ldd    #0        set last link  E526 ED   84                 std    tslink,x  E528 35   81                 puls   cc,pc     return                     *  E52A E6   05       putru2    ldb    tsprir,x  get priority  E52C E1   25                 cmpb   tsprir,y  look for correct prior slot  E52E 2F   08                 ble    putru4                     *  E530 FC   0403               ldd    runlst  E533 BF   0403               stx    runlst    set new head  E536 20   0F                 bra    putru5    link in rest                     *  E538 1F   23       putru4    tfr    y,u       save last look  E53A 10AE A4                 ldy    tslink,y  follow link  E53D 27   0C                 beq    putru6                     *  E53F E1   25                 cmpb   tsprir,y  check priority  E541 2F   F5                 ble    putru4                     *  E543 EC   C4                 ldd    tslink,u  link into list here  E545 AF   C4                 stx    tslink,u                     *  E547 ED   84       putru5    std    tslink,x  E549 35   81                 puls   cc,pc     return                     *  E54B AF   C4       putru6    stx    tslink,u  E54D 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             16:39:31  Feb 24, 2024   Page   48Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E54F 86   01       makrdy    lda    #TRUN     set status  E551 A7   04                 sta    tsstat,x  E553 CC   0000               ldd    #0        clear events flag  E556 ED   06                 std    tsevnt,x  E558 8D   BC                 bsr    putrun    put on ready list  E55A E6   05                 ldb    tsprir,x  get priority  E55C F1   040B               cmpb   jobpri    higher than current?  E55F 2F   03                 ble    makrd6                     *  E561 7C   040C               inc    chproc    set change flag                     *  E564 39            makrd6    rts              return    FIO Simulation Structure             16:39:32  Feb 24, 2024   Page   49Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E565 34   57       wakeup    pshs   cc,d,x,u  save registers  E567                         seti   mask      interupts  E567 1A   50                 orcc   #FF|IF                               endm  E569 CE   0405               ldu    #slplst  E56C AE   42                 ldx    tsslnk,u  point to sleep list  E56E 27   0B                 beq    wakeu4                     *  E570 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E573 27   08                 beq    wakeu5  E575 33   84                 leau   0,x       mark this entry                     *  E577 AE   02       wakeu3    ldx    tsslnk,x  follow chain  E579 26   F5                 bne    wakeu2    end of list?                     *  E57B 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E57D 34   70       wakeu5    pshs   x,y,u     save registers  E57F EC   02                 ldd    tsslnk,x  remove from list  E581 ED   42                 std    tsslnk,u  E583 8D   CA                 bsr    makrdy    put on ready list  E585 35   70                 puls   u,x,y  E587 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             16:39:32  Feb 24, 2024   Page   50Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E589 34   51       sleep     pshs   cc,x,u    save registers  E58B BE   0409               ldx    utask     point to task  E58E 6D   08                 tst    tssgnl,x  any signals waiting?  E590 26   1F                 bne    sleep7                     *  E592                         seti   mask      ints  E592 1A   50                 orcc   #FF|IF                               endm  E594 E7   05                 stb    tsprir,x  set priority  E596 10AF 06                 sty    tsevnt,x  set event  E599 86   02                 lda    #TSLEEP   set status  E59B A7   04                 sta    tsstat,x  E59D FC   0407               ldd    slplst+tsslnk get head of list  E5A0 ED   02                 std    tsslnk,x  set new link  E5A2 BF   0407               stx    slplst+tsslnk set new head  E5A5 17   FF01               lbsr   rsched    reschedule cpu                       E5A8 BE   0409     20        ldx    utask     get task entry  E5AB 6D   08                 tst    tssgnl,x  any signals waiting?  E5AD 26   02                 bne    sleep7                     *  E5AF 35   D1                 puls   cc,x,u,pc return                     *  E5B1 BE   0409     sleep7    ldx    utask     reset signal  E5B4 6F   08                 clr    tssgnl,x  E5B6 EC   88 15              ldd    umark1,x  stack reset point  E5B9 35   51                 puls   cc,x,u    reset cc and registers  E5BB 1F   04                 tfr    d,s       change stacks  E5BD 39                      rts              returnFIO Simulation Structure             16:39:33  Feb 24, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E5BE 34   76       xmtint    pshs   d,x,y,u   save registers  E5C0 A6   04                 lda    tsstat,x  get task state  E5C2 81   01                 cmpa   #TRUN     running?  E5C4 26   06                 bne    10f       no - try something else                     *  E5C6 86   01                 lda    #1        set signal  E5C8 A7   08                 sta    tssgnl,x  E5CA 20   0E                 bra    99f       exit                     *  E5CC 81   02       10        cmpa   #TSLEEP   task sleeping?  E5CE 26   0A                 bne    99f       no - can't send interrupt                     *  E5D0 86   01                 lda    #1        set signal  E5D2 A7   08                 sta    tssgnl,x  E5D4 10AE 06                 ldy    tsevnt,x  wake task up >E5D7 17   FF8B               lbsr   wakeup                     *  E5DA 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             16:39:33  Feb 24, 2024   Page   52Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E5DC               DEV_SOCK  E5DC E3A1                    fdb    bad_cmd   0  E5DE E6BF                    fdb    skopen    S_OPEN    1 open socket  E5E0 E757                    fdb    skclos    S_CLOSE   2 close socket  E5E2 E952                    fdb    skreqwr   S_RQWR    3 request write to socket  E5E4 E993                    fdb    sksend    S_SEND    4 write data to socket  E5E6 E8E8                    fdb    skreqrd   S_RQRD    5 request read data from socket  E5E8 E930                    fdb    skrecv    S_RECV    6 read data from socket  E5EA EBC7                    fdb    skintrp   S_INTRPT  7 interrupt socket  E5EC E7A4                    fdb    skconn    S_CONNECT 8 connect socket  E5EE E83A                    fdb    skbind    S_BIND    9 bind socket  E5F0 E87F                    fdb    sklist    S_LISTEN  10 listen on socket  E5F2 E8B1                    fdb    skacpt    S_ACCEPT  11 accept connection  E5F4 EBC7                    fdb    skdisc    S_DISCON  12 disconnect socket  E5F6 EBC7                    fdb    sksmac    S_SNDMAC  13 send mac  E5F8 EBC7                    fdb    skskep    S_SNDKEP  14 send keep alive  E5FA EB1F                    fdb    skspcl    S_SPCL    15 special command  E5FC E9B5                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E5FE EA23                    fdb    skurrd    S_RREAD   17 read data readfrom  E600 EA4D                    fdb    skurwt    S_WRQSTO  18 request write sendto  E602 EAE9                    fdb    skusnt    S_WSNDTO  19 write data sendto  E604 EA9C                    fdb    skusnm    S_WSNDTM  20 write data send more                     *  E606 E67D                    fdb    skinthan  16 socket interrupt handler  E608 E60C                    fdb    skinit    17 socket initialization  E60A E67A                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                          *                     * do everything to init the system                     *               E60C  skinit    equ    *  E60C BD   EBCE               jsr    spinit    set SPI  E60F C6   82                 ldb    #%10000010 software reset + force ARP  E611 BD   EC9E               jsr    PCRMR  E614 BD   EC8F     01        jsr    GCRMR  E617 5D                      tstb  E618 2B   FA                 bmi    01bFIO Simulation Structure             16:39:34  Feb 24, 2024   Page   53wz socket interface routines                                             *  E61A C6   78                 ldb    #%01111000 power up  E61C BD   EE7C               jsr    PCRPHY    set the PHY part  E61F CC   8000               ldd    #32768  E622 FD   0457               std    wzanyp    set value for Source port  E625 39                      rts                                          *                     * check if ROM locations are preset, if not skip this here                     * else setup device with provided values                     *  E626 108E E000     skdvini   ldy    #wzifma   where mac address is to be found  E62A EC   A1       03        ldd    0,y++  E62C 1083 FFFF               cmpd   #$ffff    not set  E630 26   07                 bne    02f  E632 108C E012               cmpy   #wzifga+4 past area  E636 25   F2                 blo    03b                     * ROM not initialized, do nothing  E638 39                      rts                                          *                     * values present, setup device                     *  E639 34   66       02        pshs   d,y,u  E63B DE   1A                 ldu    fifo_us1  E63D 108E E006               ldy    #wzifip   source IP  E641 EC   A1                 ldd    0,y++  E643 ED   C1                 std    0,u++  E645 EC   A1                 ldd    0,y++  E647 ED   C1                 std    0,u++  E649 108E E00A               ldy    #wzifnm   netmask  E64D EC   A1                 ldd    0,y++  E64F ED   C1                 std    0,u++  E651 EC   A1                 ldd    0,y++  E653 ED   C1                 std    0,u++  E655 108E E00E               ldy    #wzifga   gateway ip  E659 EC   A1                 ldd    0,y++  E65B ED   C1                 std    0,u++  E65D EC   A1                 ldd    0,y++  E65F ED   C1                 std    0,u++  E661 108E E000               ldy    #wzifma   mac address  E665 EC   A1                 ldd    0,y++  E667 ED   C1                 std    0,u++  E669 EC   A1                 ldd    0,y++  E66B ED   C1                 std    0,u++  E66D EC   A1                 ldd    0,y++  E66F ED   C1                 std    0,u++                     *  E671 C6   FF                 ldb    #$ff      set active  E673 E7   C4                 stb    0,u  E675 BD   EB4E               jsr    wzdev     init device with settings  E678 35   E6                 puls   d,y,u,pcFIO Simulation Structure             16:39:34  Feb 24, 2024   Page   54wz socket interface routines                                                                  *                     * test if device is present                     *  E67A 1A   01       sktest    sec              yes  E67C 39                      rts                                          *                     * skinthan, fromddevice table                     *               E67D  skinthan  equ    *  E67D 39                      rts                                          *                     * device signal handle                     *               E67E  sdev_sig  equ    *  E67E 39                      rts                                          *                     * get a new source port                     *  E67F FC   0457     sknewp    ldd    wzanyp    else create one  E682                         incd  E682 104C                    fdb    $104c                               endm  E684 1083 FFF0               cmpd   #$FFF0  E688 25   03                 blo    03f  E68A CC   8000               ldd    #$8000  E68D FD   0457     03        std    wzanyp  E690 39                      rts                                                               *                     * wzdevt, device test, return Z if running, NZ if not                     *  E691 34   22       wzdevt    pshs   a,y  E693 109E 1A                 ldy    fifo_us1  device info  E696 A6   A8 12              lda    wzdsta,y  E699 81   FF                 cmpa   #$ff      open  E69B 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info                     *  E69D A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E69F                         trfr   A,E  E69F 1F                      fcb    $1f  E6A0 8E                      fcb    A<<4|E                               endm  E6A1 6F   47                 clr    wzerr,u   init result  E6A3 39                      rtsFIO Simulation Structure             16:39:43  Feb 24, 2024   Page   55wz socket interface routines                                                                  *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E6A4 34   06       skctcp    pshs   d  E6A6 EC   C8 26              ldd    wztype,u  SOCK_STREAM  E6A9 C1   01                 cmpb   #SK_STRM  is TCP  E6AB 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E6AD 34   06       skcudp    pshs   d  E6AF EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6B2 C1   02                 cmpb   #SK_DGRM  is UDP  E6B4 35   86                 puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E6B6 34   06       skcraw    pshs   d  E6B8 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E6BB C1   03                 cmpb   #SK_RAW   is RAW socket  E6BD 35   86                 puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E6BF  skopen    equ    * >E6BF BD   E69D               jsr    skfres                     *                     * check if DEVICE is active                     * >E6C2 BD   E691               jsr    wzdevt  E6C5 27   06                 beq    11f  E6C7 BD   E772               jsr    skclin    NO, close internal and don't start >E6CA 16   005C     04        lbra   skoper1                     *                     * retry, we do all things                     *  E6CD A6   42       11        lda    wzfsta,u  check if allocated by OS  E6CF 2A   F9                 bpl    04b       no, do nothing                     *FIO Simulation Structure             16:39:48  Feb 24, 2024   Page   56wz socket interface routines                                             * check socket() call arguments                     *  E6D1 6F   43                 clr    wzflg,u   erase flags  E6D3 6F   41                 clr    wzdctr,u  init counter  E6D5 EC   C8 24              ldd    wzfaml,u  E6D8 C1   02                 cmpb   #AF_INET  E6DA 26   EE                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E6DC EC   C8 26              ldd    wztype,u  E6DF C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E6E1 27   1E                 beq    01f  E6E3 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E6E5 27   16                 beq    21f  E6E7 C1   03                 cmpb   #SK_RAW   SOCK_RAW  E6E9 26   42                 bne    skoper2                     * raw socket  E6EB EC   C8 28              ldd    wzprot,u  what is the protocol option?  E6EE C1   06                 cmpb   #SP_TCP   not allowed  E6F0 27   3B                 beq    skoper2  E6F2 C1   11                 cmpb   #SP_UDP   not allowed  E6F4 27   37                 beq    skoper2  E6F6 BD   EFDF               jsr    PSRPROT   set protocol                     *  E6F9 C6   04                 ldb    #%00000100 MACRAW  E6FB 20   06                 bra    07f                     * dgram  E6FD C6   02       21        ldb    #%00000010 UDP  E6FF 20   02                 bra    07f                     * TCP socket  E701 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E703 BD   EEA9     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E706 C6   01                 ldb    #WCOPEN   open the device  E708 E7   44                 stb    wzcmnd,u  copy command  E70A BD   EEC7               jsr    PSRCR  E70D 108E 0000               ldy    #0                     *                     * interrupts not expected                     *               E711  skowfo    equ    *  E711 BD   EEFB     21        jsr    GSRSR     get status  E714 E7   45                 stb    wzstat,u  E716 C1   00                 cmpb   #WSCLSD   not closed?  E718 26   0B                 bne    22f                     *  E71A 6A   41                 dec    wzdctr,u  delay counter  E71C 27   0F                 beq    skoper2FIO Simulation Structure             16:39:52  Feb 24, 2024   Page   57wz socket interface routines                          E71E 108E E711               ldy    #skowfo  E722 7E   E811               jmp    polext    switch tasks                     *  E725 4F            22        clra  E726 C6   01                 ldb    #R_OPEN   response  E728 39            99        rts                     *  E729 86   01       skoper1   lda    #1        device not initialized  E72B 20   02                 bra    12f  E72D 86   02       skoper2   lda    #2        type error  E72F C6   C0       12        ldb    #E_SOCKET  E731 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  E733 34   10       num2bt    pshs   x  E735 8E   E74E               ldx    #bittab  E738 3A                      abx  E739 E6   84                 ldb    0,x  E73B 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E73D 34   10       bt2num    pshs   x  E73F 8E   E74E               ldx    #bittab  E742 6F   E2                 clr    0,-s  E744 E1   80       02        cmpb   0,x+  E746 27   04                 beq    01f  E748 6C   E4                 inc    0,s  E74A 20   F8                 bra    02b  E74C 35   94       01        puls   b,x,pc                                          * table  E74E 00            bittab    fcb    0  E74F 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E753 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                          ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E757  skclos    equ    *  E757 BD   E69D               jsr    skfres  E75A C6   08                 ldb    #WCDISC  E75C E7   44                 stb    wzcmnd,u  E75E BD   EEC7               jsr    PSRCR     send disconnect                     *FIO Simulation Structure             16:39:52  Feb 24, 2024   Page   58wz socket interface routines                          E761 8D   0F                 bsr    skclin  E763                         clrd  E763 104F                    fdb    $104f                               endm  E765 ED   C8 24              std    wzfaml,u  E768 ED   C8 26              std    wztype,u  E76B ED   C8 28              std    wzprot,u                     *  E76E 4F                      clra  E76F C6   02                 ldb    #R_CLOSE  response  E771 39                      rts                                          *                     * wzclin, close interal                     *  E772 34   06       skclin    pshs   d  E774 C6   10                 ldb    #WCCLOS   do close  E776 E7   44                 stb    wzcmnd,u  E778 BD   EEC7               jsr    PSRCR                     *                     * erase registers in device                     *  E77B CC   0000               ldd    #0  E77E BD   EF19               jsr    PSRPORT   source port                     *  E781 A6   42                 lda    wzfsta,u  E783 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  E785 A7   42                 sta    wzfsta,u  E787 CC   0000               ldd    #0  E78A ED   48                 std    wzxfer,u  clear remaining size                     *  E78C BD   EEFB     91        jsr    GSRSR  E78F E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E791 CC   0000               ldd    #0  E794 ED   C8 10              std    wzsprt,u  erase old info  E797 ED   C8 14              std    wzipad,u  E79A ED   C8 16              std    wzipad+2,u  E79D ED   C8 12              std    wzdprt,u  E7A0 E7   43                 stb    wzflg,u   clear flags                     *  E7A2 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E7A4  skconn    equ    *  E7A4 BD   E69D               jsr    skfresFIO Simulation Structure             16:39:52  Feb 24, 2024   Page   59wz socket interface routines                                             *                     * is the DEVICE (still) active                     *  E7A7 BD   E691               jsr    wzdevt  E7AA 27   06                 beq    01f >E7AC BD   E757               jsr    skclos    NO, don't start >E7AF 16   007A     02        lbra   skcner4  E7B2 BD   E6A4     01        jsr    skctcp    not in tcp, illegal  E7B5 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E7B7 BD   EEFB     11        jsr    GSRSR     status  E7BA E7   45                 stb    wzstat,u  check if properly setup  E7BC C1   13                 cmpb   #WSINIT   SHOULD BE >E7BE 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E7C2 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E7C5                         ordx   wzipad+2,IU  E7C5 10AA                    fdb    $10aa  E7C7                         doindx wzipad+2,IU  E7C7 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E7C9 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  E7CB EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E7CE                         incd  E7CE 104C                    fdb    $104c                               endm  E7D0 26   07                 bne    01f  E7D2 EC   C8 16              ldd    wzipad+2,u  E7D5                         incd  E7D5 104C                    fdb    $104c                               endm  E7D7 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E7D9 EC   C8 12    01        ldd    wzdprt,u  check destination port  E7DC 27   4A                 beq    skcner5   is not set, error                     *  E7DE BD   EFA3               jsr    PSRDPOR   set destination port  E7E1 31   C8 14              leay   wzipad,u  load socket  E7E4 BD   EF7D               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E7E7 BD   E67F               jsr    sknewp    get new  E7EA ED   C8 10              std    wzsprt,u  tell us what you tookFIO Simulation Structure             16:39:53  Feb 24, 2024   Page   60wz socket interface routines                          E7ED BD   EF19               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E7F0 C6   04                 ldb    #WCCONN  E7F2 E7   44                 stb    wzcmnd,u  E7F4 BD   EEC7               jsr    PSRCR     do connect                     *                     *                     *  E7F7 BD   E69D     conlb1    jsr    skfres  E7FA BD   EEFB               jsr    GSRSR     update status  E7FD E7   45                 stb    wzstat,u  E7FF C1   17                 cmpb   #WSESTB  E801 27   0A                 beq    90f  E803 C1   00                 cmpb   #WSCLSD  E805 27   16                 beq    skcner2  E807 108E E7F7               ldy    #conlb1  E80B 20   04                 bra    polext                     *  E80D 4F            90        clra  E80E C6   08                 ldb    #R_CONNECT  E810 39            99        rts                                          *                     * polexit, Y=where to return                     *  E811 10AF 0F       polext    sty    tsagin,x  here to restart  E814 C6   BA                 ldb    #POLPRI  E816 E7   05                 stb    tsprir,x  E818 108E FFFF               ldy    #$ffFF  E81C 39                      rts                       E81D C6   0C       skcner2   ldb    #R_DISCON  E81F 20   EF                 bra    99b                       E821 BD   E772     skcner6   jsr    skclin    reset open  E824 86   0F                 lda    #15       not properly setup  E826 20   0E                 bra    09f  E828 86   0E       skcner5   lda    #14       destination port not set  E82A 20   0A                 bra    09f  E82C 86   0A       skcner4   lda    #10       device not initialized  E82E 20   06                 bra    09f  E830 86   0B       skcner1   lda    #11       IP address invalid  E832 20   02                 bra    09f  E834 86   0D       skcner3   lda    #13  E836 C6   C0       09        ldb    #E_SOCKET  E838 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind requestFIO Simulation Structure             16:39:53  Feb 24, 2024   Page   61wz socket interface routines                                             * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E83A  skbind    equ    *  E83A BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E83D BD   E691               jsr    wzdevt  E840 1026 00E7               lbne   rdrqer1  E844 BD   E6A4               jsr    skctcp    check TCP  E847 27   12                 beq    01f  E849 BD   E6AD               jsr    skcudp    check UDP >E84C 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E850 BD   EEFB               jsr    GSRSR     status  E853 E7   45                 stb    wzstat,u  E855 C1   22                 cmpb   #WSUDP    check  E857 27   0D                 beq    03f  E859 20   07                 bra    04f                       E85B BD   EEFB     01        jsr    GSRSR     status  E85E E7   45                 stb    wzstat,u  E860 C1   13                 cmpb   #WSINIT   should be >E862 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  E866 BD   E67F     03        jsr    sknewp  E869 ED   C8 12              std    wzdprt,u  E86C BD   EFA3               jsr    PSRDPOR   destination port  E86F EC   C8 10              ldd    wzsprt,u  E872 BD   EF19               jsr    PSRPORT   source port                     *  E875 31   C8 14              leay   wzipad,u  E878 BD   EF7D               jsr    PSRDIP    source IP                     *  E87B 4F                      clra  E87C C6   09                 ldb    #R_BIND  E87E 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task tableFIO Simulation Structure             16:39:53  Feb 24, 2024   Page   62wz socket interface routines                                             * U holds the sock address                     * listen() call waits for peer to connect                     *               E87F  sklist    equ    *  E87F BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E882 BD   E691               jsr    wzdevt  E885 1026 00A2     02        lbne   rdrqer1  E889 BD   E6A4               jsr    skctcp  E88C 26   F7                 bne    02b                     *                     * go on                     *                     *  E88E BD   EEFB               jsr    GSRSR     status  E891 E7   45                 stb    wzstat,u                     *  E893 C1   00                 cmpb   #WSCLSD   closed?  E895 27   0F                 beq    80f  E897 C1   13                 cmpb   #WSINIT   opened  E899 26   0F                 bne    90f                     *  E89B C6   02                 ldb    #WCLIST  E89D E7   44                 stb    wzcmnd,u  E89F BD   EEC7               jsr    PSRCR                     *  E8A2 4F                      clra  E8A3 C6   0A                 ldb    #R_LISTEN  E8A5 39                      rts                                          *  E8A6 4F            80        clra  E8A7 C6   02                 ldb    #R_CLOSE  E8A9 39                      rts                     *  E8AA 108E E87F     90        ldy    #sklist  E8AE 7E   E811               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E8B1  skacpt    equ    *  E8B1 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *FIO Simulation Structure             16:39:54  Feb 24, 2024   Page   63wz socket interface routines                          E8B4 BD   E691               jsr    wzdevt >E8B7 1026 0070     02        lbne   rdrqer1  E8BB BD   E6A4               jsr    skctcp  E8BE 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E8C0 BD   EEFB               jsr    GSRSR     status  E8C3 E7   45                 stb    wzstat,u  E8C5 C1   17                 cmpb   #WSESTB   connected  E8C7 26   10                 bne    01f  E8C9 BD   EF94               jsr    GSRDPOR   fill in peer port  E8CC ED   C8 12              std    wzdprt,u  E8CF 31   C8 14              leay   wzipad,u  E8D2 BD   EF66               jsr    GSRDIP                     *  E8D5 4F                      clra  E8D6 C6   0B                 ldb    #R_ACCEPT  E8D8 39                      rts                     *  E8D9 C1   00       01        cmpb   #WSCLSD  E8DB 26   04                 bne    02f  E8DD 4F                      clra  E8DE C6   02                 ldb    #R_CLOSE  E8E0 39                      rts                     *  E8E1 108E E8B1     02        ldy    #skacpt  E8E5 7E   E811               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E8E8  skreqrd   equ    *  E8E8 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8EB BD   E691               jsr    wzdevt >E8EE 1026 0039     02        lbne   rdrqer1  E8F2 BD   E6A4               jsr    skctcp    check TCP  E8F5 26   F7                 bne    02b                     *                     * go on                     *                     *  E8F7 BD   EEFB               jsr    GSRSR  E8FA E7   45                 stb    wzstat,u  update statusFIO Simulation Structure             16:39:54  Feb 24, 2024   Page   64wz socket interface routines                          E8FC BD   F0B2               jsr    GSRRXRS   data available?  E8FF ED   48                 std    wzxfer,u  E901 26   20                 bne    70f                     *  E903 A6   C8 26              lda    wztype,u  check flags  E906 85   01                 bita   #WFNBLK   non block  E908 26   15                 bne    75f                     *  E90A E6   45                 ldb    wzstat,u  E90C C1   17       17        cmpb   #WSESTB   still active  E90E 27   08                 beq    20f                       E910 C1   1C                 cmpb   #WSCLWT  E912 27   13                 beq    60f  E914 C1   00                 cmpb   #WSCLSD  E916 27   0F                 beq    60f                     *  E918 108E E8E8     20        ldy    #skreqrd  E91C 7E   E811               jmp    polext                                          *************************  E91F 4F            75        clra  E920 C6   15                 ldb    #R_RQRDNB tell no data  E922 39                      rts                                          * data present  E923 4F            70        clra  E924 C6   05                 ldb    #R_RQRD  E926 39                      rts                                          * close socket and return  E927 4F            60        clra  E928 C6   02                 ldb    #R_CLOSE  E92A 39                      rts                                            E92B 86   82       rdrqer1   lda    #130  E92D C6   C0                 ldb    #E_SOCKET  E92F 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock                     *               E930  skrecv    equ    *  E930 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E933 BD   E691               jsr    wzdevt >E936 1026 FFF1               lbne   rdrqer1  E93A BD   E6A4     02        jsr    skctcpFIO Simulation Structure             16:39:54  Feb 24, 2024   Page   65wz socket interface routines                          E93D 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E93F BD   F0B2               jsr    GSRRXRS   received size                     * D total aviable data  E942 BD   F182               jsr    RDSK2FB   transfer datat to fifo  E945 ED   48                 std    wzxfer,u  save it  E947 C6   40                 ldb    #WCRECV  E949 E7   44                 stb    wzcmnd,u  E94B BD   EEC7               jsr    PSRCR     tell sender we took it                       E94E C6   06                 ldb    #R_READ   tell data in fifo  E950 4F                      clra  E951 39                      rts                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E952  skreqwr   equ    *  E952 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E955 BD   E691               jsr    wzdevt >E958 1026 FFCF     02        lbne   rdrqer1  E95C BD   E6A4               jsr    skctcp  E95F 26   F7                 bne    02b                     *                     * go on                     *                     *  E961 BD   EEFB               jsr    GSRSR  E964 E7   45                 stb    wzstat,u  update status  E966 BD   F066               jsr    GSRTXFR   free size (remaining)  E969 10A3 4A                 cmpd   wzrqln,u  would it fit  E96C 24   15                 bhs    70f                     *  E96E E6   45       10        ldb    wzstat,u  E970 C1   17                 cmpb   #WSESTB  E972 27   18                 beq    20f  E974 C1   1C                 cmpb   #WSCLWT  E976 27   11                 beq    60f  E978 C1   00                 cmpb   #WSCLSD  E97A 26   10                 bne    20f  E97C CC   0000               ldd    #0FIO Simulation Structure             16:39:55  Feb 24, 2024   Page   66wz socket interface routines                          E97F ED   48                 std    wzxfer,u  E981 20   06                 bra    60f                     * data space  E983 4F            70        clra  E984 C6   03                 ldb    #R_RQWR  E986 39                      rts                                          * data space exhausted, would block  E987 4F            72        clra                     **        ldb     #R_RQWRWB  E988 39                      rts                                          * close socket and return  E989 C6   02       60        ldb    #R_CLOSE  E98B 39                      rts                                          *  E98C 108E E952     20        ldy    #skreqwr  E990 7E   E811               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E993  sksend    equ    *  E993 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E996 BD   E691               jsr    wzdevt >E999 1026 FF8E     02        lbne   rdrqer1  E99D BD   E6A4               jsr    skctcp  E9A0 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E9A2 BD   F066               jsr    GSRTXFR   free size (remaining)                     * D = total available space  E9A5 BD   F1D1               jsr    WRFB2SK   transfer from fifo to socket  E9A8 ED   48                 std    wzxfer,u  save it  E9AA C6   20                 ldb    #WCSEND  E9AC E7   44                 stb    wzcmnd,u  E9AE BD   EEC7               jsr    PSRCR     tell sender it is coming                       E9B1 C6   04                 ldb    #R_WRITE  tell data in fifo  E9B3 4F                      clra  E9B4 39                      rtsFIO Simulation Structure             16:39:55  Feb 24, 2024   Page   67wz socket interface routines                                                                  ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               E9B5  skurrdf   equ    *  E9B5 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9B8 BD   E691               jsr    wzdevt  E9BB 1026 FF6C     02        lbne   rdrqer1  E9BF BD   E6AD               jsr    skcudp  E9C2 27   05                 beq    03f  E9C4 BD   E6B6               jsr    skcraw  E9C7 26   F2                 bne    02b  E9C9               03                     *                     * go on                     *                     *  E9C9 EC   C8 20              ldd    wzurms,u  check remaining size  E9CC 26   47                 bne    84f                     *                     * no  packet data present, wait for it                     *  E9CE BD   EEFB               jsr    GSRSR  E9D1 E7   45                 stb    wzstat,u  update status  E9D3 BD   F0B2               jsr    GSRRXRS   data available?  E9D6 ED   7E                 std    -2,s      test D  E9D8 26   19                 bne    22f       keep waiting                     * no data yet, check socket state  E9DA E6   45                 ldb    wzstat,u  E9DC C1   22                 cmpb   #WSUDP    still active  E9DE 27   0C                 beq    20f  E9E0 C1   42                 cmpb   #WSRAW  E9E2 27   08                 beq    20f                       E9E4 C1   1C                 cmpb   #WSCLWT  E9E6 27   31                 beq    60f  E9E8 C1   00                 cmpb   #WSCLSD  E9EA 27   2D                 beq    60f                     *       ldd     wzsprt,u                     *       jsr     PSRPORT         set source port                     *  E9EC 108E E9B5     20        ldy    #skurrdf  E9F0 7E   E811               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurmsFIO Simulation Structure             16:39:55  Feb 24, 2024   Page   68wz socket interface routines                                             *  E9F3 31   C8 1A    22        leay   wzuipa,u  E9F6 CC   0008               ldd    #8        size of header  E9F9 BD   EC26               jsr    bmread    copy data                     *                     * move pointer                     *  E9FC BD   F0C9               jsr    GSRRXRP  E9FF C3   0008               addd   #8  EA02 BD   F0D8               jsr    PSRRXRP   update pointer  EA05 C6   40                 ldb    #WCRECV  EA07 E7   44                 stb    wzcmnd,u  process move  EA09 BD   EEC7               jsr    PSRCR                     *  EA0C EC   C8 20              ldd    wzurms,u  EA0F 1083 05C0               cmpd   #MAX_UDP  max size  EA13 22   08                 bhi    78f                     *  EA15 4F            84        clra  EA16 C6   21                 ldb    #R_RDFRM  EA18 39                      rts                                          * close socket and return  EA19 4F            60        clra  EA1A C6   02                 ldb    #R_CLOSE  EA1C 39                      rts                                          *  EA1D BD   E772     78        jsr    skclin    close  EA20 C6   C0                 ldb    #E_SOCKET  EA22 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA23  skurrd    equ    *  EA23 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA26 BD   E691               jsr    wzdevt  EA29 1026 FEFE     02        lbne   rdrqer1  EA2D BD   E6AD               jsr    skcudp  EA30 26   F7                 bne    02b                     *                     * go on                     *                     *FIO Simulation Structure             16:39:56  Feb 24, 2024   Page   69wz socket interface routines                                             * transfer at most fio_fsz bytes  EA32 EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  EA35 BD   F182               jsr    RDSK2FB   transfer data  EA38 34   06                 pshs   d         xferred count  EA3A EC   C8 20              ldd    wzurms,u  update  EA3D A3   E1                 subd   0,s++  EA3F ED   C8 20              std    wzurms,u  new remaining                     *  EA42 C6   40       01        ldb    #WCRECV  EA44 E7   44                 stb    wzcmnd,u  set processed  EA46 BD   EEC7               jsr    PSRCR                     *  EA49 4F                      clra  EA4A C6   22                 ldb    #R_RRDFD  EA4C 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA4D  skurwt    equ    *  EA4D BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA50 BD   E691               jsr    wzdevt  EA53 1026 FED4     02        lbne   rdrqer1  EA57 BD   E6AD               jsr    skcudp  EA5A 27   05                 beq    03f  EA5C BD   E6B6               jsr    skcraw  EA5F 26   F2                 bne    02b  EA61               03                     *                     * go on                     *                     *  EA61 EC   C8 12              ldd    wzdprt,u  check illegal port >EA64 1027 007B               lbeq   78f                     *  EA68 EC   C8 14              ldd    wzipad,u  EA6B                         ordx   wzipad+2,IU  EA6B 10AA                    fdb    $10aa  EA6D                         doindx wzipad+2,IU  EA6D C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >EA6F 1027 0070               lbeq   78f                     * set network registersFIO Simulation Structure             16:39:56  Feb 24, 2024   Page   70wz socket interface routines                          EA73 EC   C8 12              ldd    wzdprt,u  EA76 BD   EFA3               jsr    PSRDPOR                       EA79 31   C8 14              leay   wzipad,u  EA7C BD   EF7D               jsr    PSRDIP  EA7F EC   C8 10              ldd    wzsprt,u  EA82 26   11                 bne    04f                     *  EA84 EC   C8 10              ldd    wzsprt,u  already set?  EA87 26   09                 bne    16f  EA89 BD   E67F               jsr    sknewp    get new source port  EA8C ED   C8 10              std    wzsprt,u  EA8F ED   C8 1E              std    wzuprt,u  set also return port  EA92 BD   EF19     16        jsr    PSRPORT                     *  EA95 108E EA9C     04        ldy    #skuwr2   do remainder  EA99 7E   E811               jmp    polext                                          *                     * after intial setup. loop here                     *               EA9C  skusnm    equ    *  EA9C BD   E69D     skuwr2    jsr    skfres    set socket base  EA9F BD   E691               jsr    wzdevt    devie active >EAA2 1026 FFAD               lbne   02b       no  EAA6 BD   E6AD               jsr    skcudp    check open method  EAA9 26   A8                 bne    02b                     *  EAAB BD   EEFB               jsr    GSRSR  EAAE E7   45                 stb    wzstat,u  update status  EAB0 BD   F066               jsr    GSRTXFR   free size  EAB3 10A3 C8 20              cmpd   wzurms,u  EAB7 24   19                 bhs    10f                     * no space yet  EAB9 E6   45                 ldb    wzstat,u  EABB C1   22                 cmpb   #WSUDP  EABD 27   0C                 beq    20f  EABF C1   42                 cmpb   #WSRAW  EAC1 27   08                 beq    20f                       EAC3 C1   1C                 cmpb   #WSCLWT   is closing  EAC5 27   18                 beq    60f  EAC7 C1   00                 cmpb   #WSCLSD   closed  EAC9 27   14                 beq    60f                     *  EACB 108E EA4D     20        ldy    #skurwt  EACF 7E   E811               jmp    polext    keep polling                     *  EAD2 EC   C8 20    10        ldd    wzurms,u  EAD5 1083 05C0               cmpd   #MAX_UDP  too big  EAD9 22   08                 bhi    78f                     *FIO Simulation Structure             16:39:56  Feb 24, 2024   Page   71wz socket interface routines                          EADB 4F                      clra  EADC C6   23                 ldb    #R_RSNDTO  EADE 39                      rts                       EADF 4F            60        clra  EAE0 C6   02                 ldb    #R_CLOSE  EAE2 39                      rts                       EAE3 BD   E772     78        jsr    skclin    close  EAE6 C6   C0                 ldb    #E_SOCKET  EAE8 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EAE9  skusnt    equ    *  EAE9 BD   E69D               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAEC BD   E691               jsr    wzdevt  EAEF 1026 FE38     02        lbne   rdrqer1  EAF3 BD   E6AD               jsr    skcudp  EAF6 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EAF8 EC   C8 20              ldd    wzurms,u  total data                     *  EAFB BD   F1D1               jsr    WRFB2SK   fifo to socket  EAFE 34   06                 pshs   d  EB00 EC   C8 20              ldd    wzurms,u  all loaded  EB03 A3   E1                 subd   0,s++  EB05 ED   C8 20              std    wzurms,u  EB08 26   11                 bne    01f                       EB0A EC   C8 22              ldd    wzuwrp,u  is it used  EB0D BD   F0A3               jsr    PSRTXWP   set write pointer                       EB10 C6   20                 ldb    #WCSEND  EB12 E7   44                 stb    wzcmnd,u  EB14 BD   EEC7               jsr    PSRCR  EB17 4F                      clra  EB18 C6   24                 ldb    #R_WSNDTO data taken  EB1A 39                      rts                     FIO Simulation Structure             16:39:57  Feb 24, 2024   Page   72wz socket interface routines                          EB1B 4F            01        clra  EB1C C6   25                 ldb    #R_SNDTOM ask for more  EB1E 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               EB1F  skspcl    equ    *                     *  EB1F 34   10                 pshs   x  EB21 E6   0C                 ldb    tstval,x  get index  EB23 C1   04                 cmpb   #MAXTBL  EB25 22   18                 bhi    01f       illegal  EB27 58                      aslb  EB28 8E   EB46               ldx    #functb  EB2B 10AE 85                 ldy    b,x       get special function  EB2E 27   0F                 beq    01f       not valid  EB30 35   10                 puls   x                     *  EB32 AD   A4                 jsr    0,y       do function  EB34 26   05                 bne    90f                     *  EB36 4F                      clra  EB37 C6   0F                 ldb    #R_SPCL  EB39 20   0A                 bra    99f                     *  EB3B 86   A2       90        lda    #162  EB3D 20   04                 bra    02f                     *  EB3F 35   10       01        puls   x  EB41 86   A1                 lda    #161  EB43               02  EB43 C6   C0                 ldb    #E_SOCKET                     *  EB45 39            99        rts                       EB46 EB4E          functb    fdb    wzdev     set device settings  EB48 EB4E                    fdb    wzdev  EB4A EB78                    fdb    showrg  EB4C 0000                    fdb    0               0004  MAXTBL    equ    (*-functb)/2                                                               *                     * X hold the task table                     * U holds the special sock address                     *  EB4E               wzdev  EB4E C6   08                 ldb    #8FIO Simulation Structure             16:39:57  Feb 24, 2024   Page   73wz socket interface routines                          EB50                         trfr   B,E  EB50 1F                      fcb    $1f  EB51 9E                      fcb    B<<4|E                               endm  EB52 DE   1A                 ldu    fifo_us1  device info area  EB54 31   C4                 leay   0,u       myip  EB56 BD   ED5E               jsr    PCRSIP    source IP  EB59 31   44                 leay   4,u  EB5B BD   ECF2               jsr    PCRSNM    subnet mask  EB5E 31   48                 leay   8,u  EB60 BD   ECC4               jsr    PCRGA     gateway IP  EB63 31   4C                 leay   12,u  EB65 BD   ED28               jsr    PCRSHA    hardware address  EB68 A6   C8 12              lda    18,u      ON/OFF  EB6B 27   04                 beq    01f  EB6D C6   F8                 ldb    #%11111000 all on  EB6F 20   02                 bra    02f  EB71 C6   78       01        ldb    #%01111000 all off  EB73 BD   EE7C     02        jsr    PCRPHY  EB76 4F                      clra  EB77 39                      rts                                          *                     *                     *  EB78               showrg  EB78 C6   08                 ldb    #8  EB7A                         trfr   B,E       select first socket  EB7A 1F                      fcb    $1f  EB7B 9E                      fcb    B<<4|E                               endm  EB7C DE   1A                 ldu    fifo_us1  EB7E 33   C8 20              leau   32,u      skip network data area  EB81 BD   EE9A               jsr    GSRMR  EB84 E7   C0                 stb    0,u+  EB86 BD   EEFB               jsr    GSRSR  EB89 E7   C0                 stb    0,u+  EB8B BD   F02A               jsr    GSRRBFS  EB8E E7   C0                 stb    0,u+                       EB90 C6   3D                 ldb    #'=  EB92 E7   C0                 stb    0,u+                       EB94 31   C4                 leay   0,u  EB96 BD   ED47               jsr    GCRSIP  EB99 33   44                 leau   4,u  EB9B 31   C4                 leay   0,u  EB9D BD   ECAD               jsr    GCRGA  EBA0 33   44                 leau   4,u                       EBA2 C6   23                 ldb    #'#  EBA4 E7   C0                 stb    0,u+FIO Simulation Structure             16:39:57  Feb 24, 2024   Page   74wz socket interface routines                                               EBA6 31   C4                 leay   0,u  EBA8 BD   ED09               jsr    GCRSHA  EBAB 33   46                 leau   6,u                       EBAD C6   23                 ldb    #'#  EBAF E7   C0                 stb    0,u+                       EBB1 31   C4                 leay   0,u  EBB3 BD   ECDB               jsr    GCRSNM  EBB6 33   44                 leau   4,u                       EBB8 C6   3D                 ldb    #'=  EBBA E7   C0                 stb    0,u+                       EBBC BD   EE8B               jsr    GCRVERS  EBBF ED   C1                 std    0,u++                       EBC1 C6   23                 ldb    #'#  EBC3 E7   C4                 stb    0,u  EBC5 4F                      clra                       EBC6 39                      rts                                                               * X hold the task table                     * U holds the sock address  EBC7               skintrp  EBC7               skdisc  EBC7               sksmac  EBC7               skskep  EBC7 86   FF                 lda    #255  EBC9 A7   47                 sta    wzerr,u  EBCB C6   C0                 ldb    #E_SOCKET  EBCD 39                      rts                                    EBCE  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)FIO Simulation Structure             16:39:58  Feb 24, 2024   Page   75wzspi, basic spi routines                             0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       EBCE                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               EBCE  spinit    equ    *  EBCE 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  EBD0 B7   8080               sta    SPIBASE+spicmd  EBD3 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               EBD4  spistr2   equ    *  EBD4 CE   8080               ldu    #SPIBASE  SPI base TODO  EBD7                         trfr   F,B  EBD7 1F                      fcb    $1f  EBD8 F9                      fcb    F<<4|B                               endm  EBD9 5D                      tstb             register pointer  EBDA 27   09                 beq    01f       OK, valid  EBDC 34   04                 pshs   b  EBDE C4   03                 andb   #RSVREG   reserved loctation  EBE0 5D                      tstb             xxx10xxx  is invalid!  EBE1 35   04                 puls   b  EBE3 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  EBE5 4D            01        tsta             cmd flag  EBE6 27   04                 beq    04f  EBE8 1A   01                 sec              write   100  EBEA 20   02                 bra    05f  EBEC 1C   FE       04        clc              read    000                     *FIO Simulation Structure             16:39:58  Feb 24, 2024   Page   76wzspi, basic spi routines                             EBEE 59            05        rolb             set READ/WRITE bit  [2...0]  EBEF 58                      lslb             set variable length data [00]  EBF0 58                      lslb                     *                     * here the actual SPI action starts                     *  EBF1                         seti   disable   interrupts  EBF1 1A   50                 orcc   #FF|IF                               endm  EBF3 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  EBF4 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  EBF6 A7   C4                 sta    spicmd,u  EBF8 AF   44                 stx    hibyta,u  and shift out  EBFA E7   44                 stb    hibyta,u  and shift out  EBFC 1A   04                 sez  EBFE 39                      rts  EBFF 1C   FB       09        clz  EC01 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               EC02  byterd    equ    *  EC02 34   47                 pshs   cc,d,u  EC04 4F                      clra  EC05 8D   CD                 bsr    spistr2 >EC07 1026 007E               lbne   09f  EC0B E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EC0D E6   45                 ldb    lobyta,u  read byte  EC0F 4F                      clra  EC10 ED   61                 std    1,s  EC12 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               EC14  wordrd    equ    *  EC14 34   47                 pshs   cc,d,u  EC16 4F                      clra >EC17 BD   EBD4               jsr    spistr2  EC1A 26   6D                 bne    09f  EC1C E6   44                 ldb    hibyta,u  extra clocks for first data                     *  EC1E A6   45                 lda    lobyta,u  read byteFIO Simulation Structure             16:39:58  Feb 24, 2024   Page   77wzspi, basic spi routines                             EC20 E6   45                 ldb    lobyta,u  read byte  EC22 ED   61                 std    1,s  EC24 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               EC26  bmread    equ    *  EC26 34   77                 pshs   cc,d,x,y,u  EC28 4F                      clra  EC29 BD   F0C9               jsr    GSRRXRP  EC2C 1F   01                 tfr    d,x  EC2E CE   8080               ldu    #SPIBASE  EC31 34   40                 pshs   u  EC33 1A   50                 orcc   #$50  EC35 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EC37 A7   C4                 sta    spicmd,u  EC39 AF   44                 stx    hibyta,u  start address  EC3B BD   F173               jsr    tsk2rx  EC3E E7   44                 stb    hibyta,u  EC40 EC   63                 ldd    3,s       old D  EC42                         trfr   D,W       count  EC42 1F                      fcb    $1f  EC43 06                      fcb    D<<4|W                               endm  EC44 1F   12                 tfr    x,y       mem pointer  EC46 10AE 67                 ldy    7,s       old Y  EC49 E7   44                 stb    hibyta,u  shift out  EC4B 33   45                 leau   lobyta,u  EC4D                         tfm4   U,Y  EC4D 113B                    fdb    $113b  EC4F 32                      fcb    U<<4|Y                               endm  EC50 35   40                 puls   u         old U  EC52 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  EC54 A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  EC56 1F   10                 tfr    x,d  EC58 E3   61                 addd   1,s       move pointer  EC5A BD   F0D8               jsr    PSRRXRP   update pointer  EC5D 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EC5F  bytewr    equ    *  EC5F 34   47                 pshs   cc,d,uFIO Simulation Structure             16:39:59  Feb 24, 2024   Page   78wzspi, basic spi routines                             EC61 86   01                 lda    #1  EC63 BD   EBD4               jsr    spistr2  EC66 26   21                 bne    09f                     *  EC68 A6   62                 lda    2,s  EC6A A7   44                 sta    hibyta,u  EC6C 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EC6E  wordwr    equ    *  EC6E 34   47                 pshs   cc,d,u  EC70 86   01                 lda    #1  EC72 BD   EBD4               jsr    spistr2  EC75 26   12                 bne    09f                     *  EC77 EC   61                 ldd    1,s  EC79 A7   44                 sta    hibyta,u  EC7B E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EC7D 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EC7F A7   C4                 sta    spicmd,u  EC81 A6   E4                 lda    0,s       sez  EC83 8A   04                 ora    #4  EC85 A7   E4       02        sta    0,s  EC87 35   C7                 puls   cc,d,u,pc                     *  EC89 A6   E4       09        lda    0,s       clz  EC8B 84   FB                 anda   #255-4  EC8D 20   F6                 bra    02b                     FIO Simulation Structure             16:39:59  Feb 24, 2024   Page   79wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EC8F 34   56       GCRMR     pshs   d,x,u  EC91 5F                      clrb  EC92                         trfr   B,F  EC92 1F                      fcb    $1f  EC93 9F                      fcb    B<<4|FFIO Simulation Structure             16:39:59  Feb 24, 2024   Page   80wzspi, basic spi routines                                                          endm  EC94 8E   0000               ldx    #WZMR  EC97 BD   EC02               jsr    byterd  EC9A ED   E4                 std    0,s  EC9C 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EC9E 34   16       PCRMR     pshs   d,x  ECA0 5F                      clrb  ECA1                         trfr   B,F  ECA1 1F                      fcb    $1f  ECA2 9F                      fcb    B<<4|F                               endm  ECA3 8E   0000               ldx    #WZMR  ECA6 EC   E4                 ldd    0,s >ECA8 BD   EC5F               jsr    bytewr  ECAB 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  ECAD 34   16       GCRGA     pshs   d,x  ECAF 5F                      clrb  ECB0                         trfr   B,F  ECB0 1F                      fcb    $1f  ECB1 9F                      fcb    B<<4|F                               endm  ECB2 8E   0001               ldx    #WZGAR0  ECB5 BD   EC14               jsr    wordrd  ECB8 ED   A4                 std    0,y  ECBA 8E   0003               ldx    #WZGAR2  ECBD BD   EC14               jsr    wordrd  ECC0 ED   22                 std    2,y  ECC2 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  ECC4 34   16       PCRGA     pshs   d,x  ECC6 5F                      clrb  ECC7                         trfr   B,F  ECC7 1F                      fcb    $1f  ECC8 9F                      fcb    B<<4|F                               endm  ECC9 8E   0001               ldx    #WZGAR0  ECCC EC   A4                 ldd    0,y >ECCE BD   EC6E               jsr    wordwr  ECD1 8E   0003               ldx    #WZGAR2FIO Simulation Structure             16:40:00  Feb 24, 2024   Page   81wzspi, basic spi routines                             ECD4 EC   22                 ldd    2,y >ECD6 BD   EC6E               jsr    wordwr  ECD9 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  ECDB 34   16       GCRSNM    pshs   d,x  ECDD 5F                      clrb  ECDE                         trfr   B,F  ECDE 1F                      fcb    $1f  ECDF 9F                      fcb    B<<4|F                               endm  ECE0 8E   0005               ldx    #WZSUBR0  ECE3 BD   EC14               jsr    wordrd  ECE6 ED   A4                 std    0,y  ECE8 8E   0007               ldx    #WZSUBR2  ECEB BD   EC14               jsr    wordrd  ECEE ED   22                 std    2,y  ECF0 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  ECF2 34   16       PCRSNM    pshs   d,x  ECF4 5F                      clrb  ECF5                         trfr   B,F  ECF5 1F                      fcb    $1f  ECF6 9F                      fcb    B<<4|F                               endm  ECF7 8E   0005               ldx    #WZSUBR0  ECFA EC   A4                 ldd    0,y  ECFC BD   EC6E               jsr    wordwr  ECFF 8E   0007               ldx    #WZSUBR2  ED02 EC   22                 ldd    2,y  ED04 BD   EC6E               jsr    wordwr  ED07 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  ED09 34   16       GCRSHA    pshs   d,x  ED0B 5F                      clrb  ED0C                         trfr   B,F  ED0C 1F                      fcb    $1f  ED0D 9F                      fcb    B<<4|F                               endm  ED0E 8E   0009               ldx    #WZSHAR0  ED11 BD   EC14               jsr    wordrdFIO Simulation Structure             16:40:00  Feb 24, 2024   Page   82wzspi, basic spi routines                             ED14 ED   A4                 std    0,y  ED16 8E   000B               ldx    #WZSHAR2  ED19 BD   EC14               jsr    wordrd  ED1C ED   22                 std    2,y  ED1E 8E   000D               ldx    #WZSHAR4  ED21 BD   EC14               jsr    wordrd  ED24 ED   24                 std    4,y  ED26 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  ED28 34   16       PCRSHA    pshs   d,x  ED2A 5F                      clrb  ED2B                         trfr   B,F  ED2B 1F                      fcb    $1f  ED2C 9F                      fcb    B<<4|F                               endm  ED2D 8E   0009               ldx    #WZSHAR0  ED30 EC   A4                 ldd    0,y  ED32 BD   EC6E               jsr    wordwr  ED35 8E   000B               ldx    #WZSHAR2  ED38 EC   22                 ldd    2,y  ED3A BD   EC6E               jsr    wordwr  ED3D 8E   000D               ldx    #WZSHAR4  ED40 EC   24                 ldd    4,y  ED42 BD   EC6E               jsr    wordwr  ED45 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  ED47 34   16       GCRSIP    pshs   d,x  ED49 5F                      clrb  ED4A                         trfr   B,F  ED4A 1F                      fcb    $1f  ED4B 9F                      fcb    B<<4|F                               endm  ED4C 8E   000F               ldx    #WZSIPR0  ED4F BD   EC14               jsr    wordrd  ED52 ED   A4                 std    0,y  ED54 8E   0011               ldx    #WZSIPR2  ED57 BD   EC14               jsr    wordrd  ED5A ED   22                 std    2,y  ED5C 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             16:40:00  Feb 24, 2024   Page   83wzspi, basic spi routines                             ED5E 34   16       PCRSIP    pshs   d,x  ED60 5F                      clrb  ED61                         trfr   B,F  ED61 1F                      fcb    $1f  ED62 9F                      fcb    B<<4|F                               endm  ED63 8E   000F               ldx    #WZSIPR0  ED66 EC   A4                 ldd    0,y  ED68 BD   EC6E               jsr    wordwr  ED6B 8E   0011               ldx    #WZSIPR2  ED6E EC   22                 ldd    2,y  ED70 BD   EC6E               jsr    wordwr  ED73 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  ED75 34   16       GCRILLT   pshs   d,x  ED77 5F                      clrb  ED78                         trfr   B,F  ED78 1F                      fcb    $1f  ED79 9F                      fcb    B<<4|F                               endm  ED7A 8E   0013               ldx    #WZILLT0  ED7D BD   EC14               jsr    wordrd  ED80 ED   E4                 std    0,s  ED82 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  ED84 34   16       PCRILLT   pshs   d,x  ED86 5F                      clrb  ED87                         trfr   B,F  ED87 1F                      fcb    $1f  ED88 9F                      fcb    B<<4|F                               endm  ED89 8E   0013               ldx    #WZILLT0  ED8C EC   E4                 ldd    0,s  ED8E BD   EC6E               jsr    wordwr  ED91 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  ED93 34   16       GCRIR     pshs   d,x  ED95 5F                      clrb  ED96                         trfr   B,F  ED96 1F                      fcb    $1f  ED97 9F                      fcb    B<<4|FFIO Simulation Structure             16:40:01  Feb 24, 2024   Page   84wzspi, basic spi routines                                                          endm  ED98 8E   0015               ldx    #WZIR  ED9B BD   EC02               jsr    byterd  ED9E ED   E4                 std    0,s  EDA0 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  EDA2 34   16       PCRIR     pshs   d,x  EDA4 5F                      clrb  EDA5                         trfr   B,F  EDA5 1F                      fcb    $1f  EDA6 9F                      fcb    B<<4|F                               endm  EDA7 8E   0015               ldx    #WZIR  EDAA EC   E4                 ldd    0,s  EDAC BD   EC5F               jsr    bytewr  EDAF 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  EDB1 34   16       GCRIMR    pshs   d,x  EDB3 5F                      clrb  EDB4                         trfr   B,F  EDB4 1F                      fcb    $1f  EDB5 9F                      fcb    B<<4|F                               endm  EDB6 8E   0016               ldx    #WZIMR  EDB9 BD   EC02               jsr    byterd  EDBC ED   E4                 std    0,s  EDBE 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  EDC0 34   16       PCRIMR    pshs   d,x  EDC2 5F                      clrb  EDC3                         trfr   B,F  EDC3 1F                      fcb    $1f  EDC4 9F                      fcb    B<<4|F                               endm  EDC5 8E   0016               ldx    #WZIMR  EDC8 EC   E4                 ldd    0,s  EDCA BD   EC5F               jsr    bytewr  EDCD 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             16:40:01  Feb 24, 2024   Page   85wzspi, basic spi routines                                                *  EDCF 34   16       GCRSIR    pshs   d,x  EDD1 5F                      clrb  EDD2                         trfr   B,F  EDD2 1F                      fcb    $1f  EDD3 9F                      fcb    B<<4|F                               endm  EDD4 8E   0017               ldx    #WZSIR  EDD7 BD   EC02               jsr    byterd  EDDA ED   E4                 std    0,s  EDDC 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  EDDE 34   16       PCRSIR    pshs   d,x  EDE0 5F                      clrb  EDE1                         trfr   B,F  EDE1 1F                      fcb    $1f  EDE2 9F                      fcb    B<<4|F                               endm  EDE3 8E   0017               ldx    #WZSIR  EDE6 EC   E4                 ldd    0,s  EDE8 BD   EC5F               jsr    bytewr  EDEB 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  EDED 34   16       GCRSIMR   pshs   d,x  EDEF 5F                      clrb  EDF0                         trfr   B,F  EDF0 1F                      fcb    $1f  EDF1 9F                      fcb    B<<4|F                               endm  EDF2 8E   0018               ldx    #WZSIMR  EDF5 BD   EC02               jsr    byterd  EDF8 ED   E4                 std    0,s  EDFA 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  EDFC 34   16       PCRSIMR   pshs   d,x  EDFE 5F                      clrb  EDFF                         trfr   B,F  EDFF 1F                      fcb    $1f  EE00 9F                      fcb    B<<4|F                               endm  EE01 8E   0018               ldx    #WZSIMR  EE04 EC   E4                 ldd    0,sFIO Simulation Structure             16:40:01  Feb 24, 2024   Page   86wzspi, basic spi routines                             EE06 BD   EC5F               jsr    bytewr  EE09 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EE0B 34   16       GCRRTR    pshs   d,x  EE0D 5F                      clrb  EE0E                         trfr   B,F  EE0E 1F                      fcb    $1f  EE0F 9F                      fcb    B<<4|F                               endm  EE10 8E   0019               ldx    #WZRTR0  EE13 BD   EC14               jsr    wordrd  EE16 ED   E4                 std    0,s  EE18 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EE1A 34   16       PCRRTR    pshs   d,x  EE1C 5F                      clrb  EE1D                         trfr   B,F  EE1D 1F                      fcb    $1f  EE1E 9F                      fcb    B<<4|F                               endm  EE1F 8E   0019               ldx    #WZRTR0  EE22 EC   E4                 ldd    0,s  EE24 BD   EC6E               jsr    wordwr  EE27 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EE29 34   16       GCRRCR    pshs   d,x  EE2B 5F                      clrb  EE2C                         trfr   B,F  EE2C 1F                      fcb    $1f  EE2D 9F                      fcb    B<<4|F                               endm  EE2E 8E   001B               ldx    #WZRCR  EE31 BD   EC02               jsr    byterd  EE34 ED   E4                 std    0,s  EE36 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EE38 34   16       PCRRCR    pshs   d,x  EE3A 5F                      clrbFIO Simulation Structure             16:40:02  Feb 24, 2024   Page   87wzspi, basic spi routines                             EE3B                         trfr   B,F  EE3B 1F                      fcb    $1f  EE3C 9F                      fcb    B<<4|F                               endm  EE3D 8E   001B               ldx    #WZRCR  EE40 EC   E4                 ldd    0,s  EE42 BD   EC5F               jsr    bytewr  EE45 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EE47 34   16       GCRURP    pshs   d,x  EE49 5F                      clrb  EE4A                         trfr   B,F  EE4A 1F                      fcb    $1f  EE4B 9F                      fcb    B<<4|F                               endm  EE4C 8E   002C               ldx    #WZUPRT0  EE4F BD   EC14               jsr    wordrd  EE52 ED   E4                 std    0,s  EE54 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  EE56 34   16       GCRUIP    pshs   d,x  EE58 5F                      clrb  EE59                         trfr   B,F  EE59 1F                      fcb    $1f  EE5A 9F                      fcb    B<<4|F                               endm  EE5B 8E   0028               ldx    #WZUIPR0  EE5E BD   EC14               jsr    wordrd  EE61 ED   A4                 std    0,y  EE63 8E   002A               ldx    #WZUIPR2  EE66 BD   EC14               jsr    wordrd  EE69 ED   22                 std    2,y  EE6B 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  EE6D 34   56       GCRPHY    pshs   d,x,u  EE6F 8E   002E               ldx    #WZPHY  EE72 5F                      clrb  EE73                         trfr   B,F  EE73 1F                      fcb    $1f  EE74 9F                      fcb    B<<4|FFIO Simulation Structure             16:40:02  Feb 24, 2024   Page   88wzspi, basic spi routines                                                          endm  EE75 BD   EC02               jsr    byterd  EE78 ED   E4                 std    0,s  EE7A 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  EE7C 34   56       PCRPHY    pshs   d,x,u  EE7E 8E   002E               ldx    #WZPHY  EE81 5F                      clrb  EE82                         trfr   B,F  EE82 1F                      fcb    $1f  EE83 9F                      fcb    B<<4|F                               endm  EE84 EC   E4                 ldd    0,s  EE86 BD   EC5F               jsr    bytewr  EE89 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  EE8B 34   56       GCRVERS   pshs   d,x,u  EE8D 8E   0039               ldx    #WZVERS  EE90 5F                      clrb  EE91                         trfr   B,F  EE91 1F                      fcb    $1f  EE92 9F                      fcb    B<<4|F                               endm  EE93 BD   EC02               jsr    byterd  EE96 ED   E4                 std    0,s  EE98 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             16:40:02  Feb 24, 2024   Page   89wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  EE9A 34   16       GSRMR     psh    d,x  EE9C BD   F158               jsr    tsk2rg  EE9F 8E   0000               ldx    #SNMR  EEA2 BD   EC02               jsr    byterd  EEA5 ED   E4                 std    0,s  EEA7 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  EEA9 34   16       PSRMR     pshs   d,x  EEAB BD   F158               jsr    tsk2rgFIO Simulation Structure             16:40:03  Feb 24, 2024   Page   90wzspi, basic spi routines                             EEAE 8E   0000               ldx    #SNMR  EEB1 EC   E4                 ldd    0,s  EEB3 BD   EC5F               jsr    bytewr  EEB6 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  EEB8 34   16       GSRCR     pshs   d,x  EEBA BD   F158               jsr    tsk2rg  EEBD 8E   0001               ldx    #SNCR  EEC0 BD   EC02               jsr    byterd  EEC3 ED   E4                 std    0,s  EEC5 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  EEC7 34   16       PSRCR     pshs   d,x  EEC9 BD   F158               jsr    tsk2rg  EECC 8E   0001               ldx    #SNCR  EECF EC   E4                 ldd    0,s  EED1 BD   EC5F               jsr    bytewr  EED4 8D   E2       01        bsr    GSRCR  EED6 5D                      tstb  EED7 26   FB                 bne    01b       wait command to be consumed  EED9 E7   61                 stb    1,s       set return  EEDB 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  EEDD 34   16       GSRIR     pshs   d,x  EEDF BD   F158               jsr    tsk2rg  EEE2 8E   0002               ldx    #SNIR  EEE5 BD   EC02               jsr    byterd  EEE8 ED   E4                 std    0,s  EEEA 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  EEEC 34   16       PSRIR     pshs   d,x  EEEE BD   F158               jsr    tsk2rg  EEF1 8E   0002               ldx    #SNIR  EEF4 EC   E4                 ldd    0,sFIO Simulation Structure             16:40:03  Feb 24, 2024   Page   91wzspi, basic spi routines                             EEF6 BD   EC5F               jsr    bytewr  EEF9 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  EEFB 34   16       GSRSR     pshs   d,x  EEFD BD   F158               jsr    tsk2rg  EF00 8E   0003               ldx    #SNSR  EF03 BD   EC02               jsr    byterd  EF06 ED   E4                 std    0,s  EF08 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  EF0A 34   16       GSRPORT   pshs   d,x  EF0C BD   F158               jsr    tsk2rg  EF0F 8E   0004               ldx    #SNPORT0  EF12 BD   EC14               jsr    wordrd  EF15 ED   E4                 std    0,s  EF17 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  EF19 34   16       PSRPORT   pshs   d,x  EF1B BD   F158               jsr    tsk2rg  EF1E 8E   0004               ldx    #SNPORT0  EF21 EC   E4                 ldd    0,s  EF23 BD   EC6E               jsr    wordwr  EF26 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  EF28 34   16       GSRDHAR   pshs   d,x  EF2A BD   F158               jsr    tsk2rg  EF2D 8E   0006               ldx    #SNDHAR0  EF30 BD   EC14               jsr    wordrd  EF33 ED   A4                 std    0,y  EF35 8E   0008               ldx    #SNDHAR2  EF38 BD   EC14               jsr    wordrd  EF3B ED   22                 std    2,y  EF3D 8E   000A               ldx    #SNDHAR4  EF40 BD   EC14               jsr    wordrdFIO Simulation Structure             16:40:03  Feb 24, 2024   Page   92wzspi, basic spi routines                             EF43 ED   24                 std    4,y  EF45 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  EF47 34   16       PSRDHAR   pshs   d,x  EF49 BD   F158               jsr    tsk2rg  EF4C 8E   0006               ldx    #SNDHAR0  EF4F EC   A4                 ldd    0,y  EF51 BD   EC6E               jsr    wordwr  EF54 8E   0008               ldx    #SNDHAR2  EF57 EC   22                 ldd    2,y  EF59 BD   EC6E               jsr    wordwr  EF5C 8E   000A               ldx    #SNDHAR4  EF5F EC   24                 ldd    4,y  EF61 BD   EC6E               jsr    wordwr  EF64 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  EF66 34   16       GSRDIP    pshs   d,x  EF68 BD   F158               jsr    tsk2rg  EF6B 8E   000C               ldx    #SNDIPR0  EF6E BD   EC14               jsr    wordrd  EF71 ED   A4                 std    0,y  EF73 8E   000E               ldx    #SNDIPR2  EF76 BD   EC14               jsr    wordrd  EF79 ED   22                 std    2,y  EF7B 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  EF7D 34   16       PSRDIP    pshs   d,x  EF7F BD   F158               jsr    tsk2rg  EF82 8E   000C               ldx    #SNDIPR0  EF85 EC   A4                 ldd    0,y  EF87 BD   EC6E               jsr    wordwr  EF8A 8E   000E               ldx    #SNDIPR2  EF8D EC   22                 ldd    2,y  EF8F BD   EC6E               jsr    wordwr  EF92 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             16:40:04  Feb 24, 2024   Page   93wzspi, basic spi routines                                                *  EF94 34   16       GSRDPOR   pshs   d,x  EF96 BD   F158               jsr    tsk2rg  EF99 8E   0010               ldx    #SNDPOR0  EF9C BD   EC14               jsr    wordrd  EF9F ED   E4                 std    0,s  EFA1 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  EFA3 34   16       PSRDPOR   pshs   d,x  EFA5 BD   F158               jsr    tsk2rg  EFA8 8E   0010               ldx    #SNDPOR0  EFAB EC   E4                 ldd    0,s  EFAD BD   EC6E               jsr    wordwr  EFB0 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  EFB2 34   16       GSRMSS    pshs   d,x  EFB4 BD   F158               jsr    tsk2rg  EFB7 8E   0012               ldx    #SNMSSR0  EFBA BD   EC14               jsr    wordrd  EFBD ED   E4                 std    0,s  EFBF 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  EFC1 34   16       PSRMSS    pshs   d,x  EFC3 BD   F158               jsr    tsk2rg  EFC6 8E   0012               ldx    #SNMSSR0  EFC9 EC   E4                 ldd    0,s  EFCB BD   EC6E               jsr    wordwr  EFCE 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  EFD0 34   16       GSRPROT   pshs   d,x  EFD2 BD   F158               jsr    tsk2rg  EFD5 8E   0014               ldx    #SNPROTO  EFD8 BD   EC02               jsr    byterd  EFDB ED   E4                 std    0,sFIO Simulation Structure             16:40:04  Feb 24, 2024   Page   94wzspi, basic spi routines                             EFDD 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  EFDF 34   16       PSRPROT   pshs   d,x  EFE1 BD   F158               jsr    tsk2rg  EFE4 8E   0014               ldx    #SNPROTO  EFE7 EC   E4                 ldd    0,s  EFE9 BD   EC5F               jsr    bytewr  EFEC 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  EFEE 34   16       GSRTOS    pshs   d,x  EFF0 BD   F158               jsr    tsk2rg  EFF3 8E   0015               ldx    #SNTOS  EFF6 BD   EC02               jsr    byterd  EFF9 ED   E4                 std    0,s  EFFB 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  EFFD 34   16       PSRTOS    pshs   d,x  EFFF BD   F158               jsr    tsk2rg  F002 8E   0015               ldx    #SNTOS  F005 EC   E4                 ldd    0,s  F007 BD   EC5F               jsr    bytewr  F00A 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  F00C 34   16       GSRTTL    pshs   d,x  F00E BD   F158               jsr    tsk2rg  F011 8E   0016               ldx    #SNTTL  F014 BD   EC02               jsr    byterd  F017 ED   E4                 std    0,s  F019 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             16:40:04  Feb 24, 2024   Page   95wzspi, basic spi routines                             F01B 34   16       PSRTTL    pshs   d,x  F01D BD   F158               jsr    tsk2rg  F020 8E   0016               ldx    #SNTTL  F023 EC   E4                 ldd    0,s  F025 BD   EC5F               jsr    bytewr  F028 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  F02A 34   16       GSRRBFS   pshs   d,x  F02C BD   F158               jsr    tsk2rg  F02F 8E   001E               ldx    #SNRBFSZ  F032 BD   EC02               jsr    byterd  F035 ED   E4                 std    0,s  F037 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  F039 34   16       PSRRBFS   pshs   d,x  F03B BD   F158               jsr    tsk2rg  F03E 8E   001E               ldx    #SNRBFSZ  F041 EC   E4                 ldd    0,s  F043 BD   EC5F               jsr    bytewr  F046 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  F048 34   16       GSRTBFS   pshs   d,x  F04A BD   F158               jsr    tsk2rg  F04D 8E   001F               ldx    #SNTBFSZ  F050 BD   EC02               jsr    byterd  F053 ED   E4                 std    0,s  F055 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  F057 34   16       PSRTBFS   pshs   d,x  F059 BD   F158               jsr    tsk2rg  F05C 8E   001F               ldx    #SNTBFSZ  F05F EC   E4                 ldd    0,s  F061 BD   EC5F               jsr    bytewr  F064 35   96                 puls   d,x,pcFIO Simulation Structure             16:40:05  Feb 24, 2024   Page   96wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  F066 34   16       GSRTXFR   pshs   d,x  F068 BD   F158               jsr    tsk2rg  F06B 8E   0020               ldx    #SNTXFR0  [R]  F06E BD   EC14               jsr    wordrd  F071 ED   E4       01        std    0,s  F073 BD   EC14               jsr    wordrd  F076 10A3 E4                 cmpd   0,s       read more times and exit  F079 26   F6                 bne    01b       when 2 reads are equal  F07B 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F07D 34   16       GSRTXRP   pshs   d,x  F07F BD   F158               jsr    tsk2rg  F082 8E   0022               ldx    #SNTXRP0  [R]  F085 BD   EC14               jsr    wordrd  F088 ED   E4       01        std    0,s  F08A BD   EC14               jsr    wordrd  F08D 10A3 E4                 cmpd   0,s       read more times and exit  F090 26   F6                 bne    01b       when 2 reads are equal  F092 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F094 34   16       GSRTXWP   pshs   d,x  F096 BD   F158               jsr    tsk2rg  F099 8E   0024               ldx    #SNTXWP0  [RW]  F09C BD   EC14               jsr    wordrd  F09F ED   E4                 std    0,s  F0A1 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F0A3 34   16       PSRTXWP   pshs   d,x  F0A5 BD   F158               jsr    tsk2rg  F0A8 8E   0024               ldx    #SNTXWP0  F0AB EC   E4                 ldd    0,s  F0AD BD   EC6E               jsr    wordwrFIO Simulation Structure             16:40:05  Feb 24, 2024   Page   97wzspi, basic spi routines                             F0B0 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F0B2 34   16       GSRRXRS   pshs   d,x  F0B4 BD   F158               jsr    tsk2rg  F0B7 8E   0026               ldx    #SNRXRZ0  [R]  F0BA BD   EC14               jsr    wordrd  F0BD ED   E4       01        std    0,s  F0BF BD   EC14               jsr    wordrd  F0C2 10A3 E4                 cmpd   0,s       read more times and exit  F0C5 26   F6                 bne    01b       when 2 reads are equal  F0C7 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F0C9 34   16       GSRRXRP   pshs   d,x  F0CB BD   F158               jsr    tsk2rg  F0CE 8E   0028               ldx    #SNRXRP0  [RW]  F0D1 BD   EC14               jsr    wordrd  F0D4 ED   E4                 std    0,s  F0D6 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F0D8 34   16       PSRRXRP   pshs   d,x >F0DA BD   F158               jsr    tsk2rg  F0DD 8E   0028               ldx    #SNRXRP0  F0E0 EC   E4                 ldd    0,s  F0E2 BD   EC6E               jsr    wordwr  F0E5 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F0E7 34   16       GSRRXWP   pshs   d,x >F0E9 BD   F158               jsr    tsk2rg  F0EC 8E   002A               ldx    #SNRXWP0  [R]  F0EF BD   EC14               jsr    wordrd  F0F2 ED   E4       01        std    0,s  F0F4 BD   EC14               jsr    wordrd  F0F7 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             16:40:05  Feb 24, 2024   Page   98wzspi, basic spi routines                             F0FA 26   F6                 bne    01b       when 2 reads are equal  F0FC 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F0FE 34   16       GSRIMR    pshs   d,x >F100 BD   F158               jsr    tsk2rg  F103 8E   002C               ldx    #SNIMR  F106 BD   EC02               jsr    byterd  F109 ED   E4                 std    0,s  F10B 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F10D 34   16       PSRIMR    pshs   d,x >F10F BD   F158               jsr    tsk2rg  F112 8E   002C               ldx    #SNIMR  F115 EC   E4                 ldd    0,s  F117 BD   EC5F               jsr    bytewr  F11A 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F11C 34   16       GSRFRAG   pshs   d,x >F11E BD   F158               jsr    tsk2rg  F121 8E   002D               ldx    #SNFRAG0  F124 BD   EC14               jsr    wordrd  F127 ED   E4                 std    0,s  F129 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F12B 34   16       PSRFRAG   pshs   d,x >F12D BD   F158               jsr    tsk2rg  F130 8E   002D               ldx    #SNFRAG0  F133 EC   E4                 ldd    0,s  F135 BD   EC6E               jsr    wordwr  F138 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             16:40:06  Feb 24, 2024   Page   99wzspi, basic spi routines                                                * return byte in B                     *  F13A 34   16       GSKATM    pshs   d,x >F13C BD   F158               jsr    tsk2rg  F13F 8E   002F               ldx    #SNKATIM  F142 BD   EC02               jsr    byterd  F145 ED   E4                 std    0,s  F147 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F149 34   16       PSRKATM   pshs   d,x >F14B BD   F158               jsr    tsk2rg  F14E 8E   002F               ldx    #SNKATIM  F151 EC   E4                 ldd    0,s  F153 BD   EC5F               jsr    bytewr  F156 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F158  tsk2rg    equ    *  F158                         trfr   E,B  F158 1F                      fcb    $1f  F159 E9                      fcb    E<<4|B                               endm  F15A 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F15B 1C   FE                 clc              make reg bits + '01'  F15D 59                      rolb             socket register  F15E 1A   01                 sec  F160 59                      rolb             xxx 01 ...                     *  F161                         trfr   B,F  F161 1F                      fcb    $1f  F162 9F                      fcb    B<<4|F                               endm  F163 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F164  tsk2tx    equ    *  F164                         trfr   E,B  F164 1F                      fcb    $1f  F165 E9                      fcb    E<<4|BFIO Simulation Structure             16:40:06  Feb 24, 2024   Page  100wzspi, basic spi routines                                                          endm  F166 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F167 1A   01                 sec              make reg bits + '10'  F169 59                      rolb             sock TX buffer  F16A 1C   FE                 clc  F16C 59                      rolb                     *  F16D 1A   01                 sec  F16F 59                      rolb             write bit     '1'                     *  F170 58                      lslb             variable size '00'  F171 58                      lslb             xxx 10 100                     *  F172 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F173  tsk2rx    equ    *  F173                         trfr   E,B  F173 1F                      fcb    $1f  F174 E9                      fcb    E<<4|B                               endm  F175 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F176 1A   01                 sec              make reg bits + '11'  F178 59                      rolb             sock RX buffer  F179 1A   01                 sec              make reg bits + '11'  F17B 59                      rolb                     *  F17C 1C   FE                 clc  F17E 59                      rolb             read bit     '0'                     *  F17F 58                      lslb             variable size '00'  F180 58                      lslb             xxx 11 000  F181 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=sock, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F182 34   76       RDSK2FB   pshs   d,x,y,u                     *  F184 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F187 23   02                 bls    01f  F189 EC   4A                 ldd    wzrqln,u  mandatory size  F18B 1F   01       01        tfr    D,X       sizeFIO Simulation Structure             16:40:06  Feb 24, 2024   Page  101wzspi, basic spi routines                             F18D ED   E4                 std    0,s       save xfrerred old  D  F18F ED   48                 std    wzxfer,u  F191 27   3C                 beq    15f       no data                     *  F193 BD   F0C9               jsr    GSRRXRP  F196 34   06                 pshs   d         save socket read pointer  F198 1F   02                 tfr    D,Y                     *  F19A CE   8080               ldu    #SPIBASE  F19D 34   01                 pshs   cc  F19F                         pshsw  F19F 1038                    fdb    $1038                               endm  F1A1 34   40                 pshs   u  F1A3 1A   50                 orcc   #$50      disable interrupts  F1A5 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F1A7 A7   C4                 sta    spicmd,u  F1A9 10AF 44                 sty    hibyta,u  start address                      >F1AC BD   F173               jsr    tsk2rx    SOCK# to buffer address                       F1AF E7   44                 stb    hibyta,u  F1B1 108E 0020               ldy    #fifo  F1B5 E7   44                 stb    hibyta,u  shift out first data byte  F1B7 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F1B9                         trfr   X,W  F1B9 1F                      fcb    $1f  F1BA 16                      fcb    X<<4|W                               endm  F1BB                         tfm4   U,Y  F1BB 113B                    fdb    $113b  F1BD 32                      fcb    U<<4|Y                               endm  F1BE 35   40                 puls   u  F1C0 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F1C2 A7   C4                 sta    spicmd,u  F1C4                         pulsw  restore   E:F  F1C4 1039                    fdb    $1039                               endm  F1C6 35   01                 puls   cc                     *  F1C8 35   06                 puls   d         old read pointer  F1CA E3   E4                 addd   0,s       adjust transferred  F1CC BD   F0D8               jsr    PSRRXRP   update pointer                     *  F1CF 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=sock                     * E=socket#FIO Simulation Structure             16:40:07  Feb 24, 2024   Page  102wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F1D1 34   76       WRFB2SK   pshs   d,x,y,u  F1D3 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F1D6 23   02                 bls    01f  F1D8 EC   4A                 ldd    wzrqln,u  F1DA 1F   01       01        tfr    d,x  F1DC ED   E4                 std    0,s  F1DE ED   48                 std    wzxfer,u  report size  F1E0 27   53                 beq    15f                     *  F1E2 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F1E6 26   05                 bne    24f  F1E8 BD   F094               jsr    GSRTXWP   get write pointer  F1EB 20   02                 bra    25f  F1ED 1F   20       24        tfr    y,d                     *  F1EF 34   06       25        pshs   d  F1F1 1F   02                 tfr    D,Y                     *  F1F3 CE   8080               ldu    #SPIBASE  F1F6 34   01                 pshs   cc  F1F8                         pshsw  save      E:F  F1F8 1038                    fdb    $1038                               endm  F1FA 34   40                 pshs   u  F1FC 1A   50                 orcc   #$50  F1FE 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F200 A7   C4                 sta    spicmd,u  F202 10AF 44                 sty    hibyta,u  start address                       F205 BD   F164               jsr    tsk2tx                       F208 E7   44                 stb    hibyta,u  F20A 108E 0020               ldy    #fifo  F20E 33   44                 leau   hibyta,u  the first to shift out  F210                         trfr   X,W  F210 1F                      fcb    $1f  F211 16                      fcb    X<<4|W                               endm  F212                         tfm3   Y,U  F212 113A                    fdb    $113a  F214 23                      fcb    Y<<4|U                               endm  F215 35   40                 puls   u  F217 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F219 A7   C4                 sta    spicmd,u  F21B                         pulsw  restore   E:F!!  F21B 1039                    fdb    $1039                               endm  F21D 35   01                 puls   ccFIO Simulation Structure             16:40:07  Feb 24, 2024   Page  103wzspi, basic spi routines                                                *  F21F 35   06                 puls   d         old write pointer  F221 E3   E4                 addd   0,s  F223 EE   66                 ldu    6,s       restore U  F225 AE   C8 26              ldx    wztype,u  F228 8C   0002               cmpx   #SK_DGRM  F22B 27   05                 beq    10f  F22D BD   F0A3     11        jsr    PSRTXWP   update pointer  F230 20   03                 bra    15f                       F232 ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F235 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             16:40:07  Feb 24, 2024   Page  104Debug Interface Routines                                                   F237               DB_main  F237 8D   4F                 bsr    DB_test   see if debug routines present  F239 6E   9F C002            jmp    [DEBUGROM+2]  F23D               DB_pdata  F23D 8D   49                 bsr    DB_test   see if debug routines present  F23F 6E   9F C004            jmp    [DEBUGROM+4]  F243               DB_phex  F243 8D   43                 bsr    DB_test   see if debug routines present  F245 6E   9F C006            jmp    [DEBUGROM+6]  F249               DB_phex2  F249 8D   3D                 bsr    DB_test   see if debug routines present  F24B 6E   9F C008            jmp    [DEBUGROM+8]  F24F               DB_pcrlf  F24F 8D   37                 bsr    DB_test   see if debug routines present  F251 6E   9F C00A            jmp    [DEBUGROM+10]  F255               DB_check  F255 8D   31                 bsr    DB_test   see if debug routines present  F257 6E   9F C00C            jmp    [DEBUGROM+12]  F25B               DB_config  F25B 8D   2B                 bsr    DB_test   see if debug routines present  F25D 6E   9F C00E            jmp    [DEBUGROM+14]  F261 34   17       DB_msg    pshs   cc,d,x  F263 AE   65                 ldx    1+2+2,s   get return address  F265 EC   81                 ldd    ,x++      get mask word  F267 B4   0401               anda   DB_cntrl  F26A F4   0402               andb   DB_cntrl+1  F26D 34   04                 pshs   b  F26F AA   E0                 ora    ,s+  F271 27   04                 beq    10f       jump if flag not set  F273 30   02                 leax   2,x       skip over false address & fall through  F275 20   02                 bra    20f  F277 AE   84       10        ldx    ,x        get false branch label  F279 AF   65       20        stx    1+2+2,s   fix up return address  F27B 35   97                 puls   cc,d,x,pc return                     *  F27D               DB_pspace  F27D               DB_outsp  F27D 34   16                 pshs   d,x  F27F 8E   F286               ldx    #00f  F282 8D   B9                 bsr    DB_pdata  F284 35   96                 puls   d,x,pc  F286 20 00         00        fcc    ' ',0                       F288 34   07       DB_test   pshs   cc,d  F28A FC   C000               ldd    DEBUGROM  Debug rom present?  F28D 1083 1234               cmpd   #$1234    special marker  F291 27   05                 beq    99f       yes - exit  F293 35   07                 puls   cc,d      no - abort DB_xx function  F295 32   62                 leas   2,s  F297 39                      rts  F298 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             16:40:07  Feb 24, 2024   Page  105Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             16:40:08  Feb 24, 2024   Page  106Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E04F   CPUtraps FFF0   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F255   DB_cntrl 0401   DB_confi F25B   DB_iflg  0400   DB_main  F237   DB_msg   F261   DB_outsp F27D   DB_pcrlf F24F   DB_pdata F23D   DB_phex  F243   DB_phex2 F249   DB_pspac F27D   DB_test  F288   DBmsg00  E012   DBmsg01  E01B   DBmsg02  E03B   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E5DC   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    002E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   002A   D_inthan 0028   D_test   002C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2E8   FIFO_put E30D   FIFOgeta E2DF   FIFOputa E305   FIOPRI   FFCE   FIO_get  E2BD   FIO_lock 0446   FIO_rel  E2D2   GCRGA    ECAD   GCRILLT  ED75   GCRIMR   EDB1   GCRIR    ED93   GCRMR    EC8F   GCRPHY   EE6D   GCRRCR   EE29   GCRRTR   EE0B   GCRSHA   ED09   GCRSIMR  EDED   GCRSIP   ED47   GCRSIR   EDCF   GCRSNM   ECDB   GCRUIP   EE56   GCRURP   EE47   GCRVERS  EE8B   GSKATM   F13A   GSRCR    EEB8   GSRDHAR  EF28   GSRDIP   EF66   GSRDPOR  EF94   GSRFRAG  F11C   GSRIMR   F0FE   GSRIR    EEDD   GSRMR    EE9A   GSRMSS   EFB2   GSRPORT  EF0A   GSRPROT  EFD0   GSRRBFS  F02A   GSRRXRP  F0C9   GSRRXRS  F0B2   GSRRXWP  F0E7   GSRSR    EEFB   GSRTBFS  F048   GSRTOS   EFEE   GSRTTL   F00C   GSRTXFR  F066   GSRTXRP  F07D   GSRTXWP  F094   HANGS    0001   HRECSIZ  0004   H_cpu    E45B   H_fio    E47F   IF       0010   INTS     0002   IO_end   E386   IO_han   E328   IRQ_han  E3A4   IRQmsg10 E3B1   IS       0003   IU       0002   IX       0000   IY       0001   MAXHIST  0010   MAXTBL   0004   MAX_DEV  0001   MAX_S_NU 0015   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NET      0001   NUM_TSK  0459   O_CLOSE  0020   O_INTRPT 0038   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    ECC4   PCRILLT  ED84   PCRIMR   EDC0   PCRIR    EDA2   PCRMR    EC9E   PCRPHY   EE7C   PCRRCR   EE38   PCRRTR   EE1A   PCRSHA   ED28   PCRSIMR  EDFC   PCRSIP   ED5E   PCRSIR   EDDE   PCRSNM   ECF2   PF_INET  0002   PF_UNIX  0001   POLPRI   FFBA   PSRCR    EEC7   PSRDHAR  EF47   PSRDIP   EF7D   PSRDPOR  EFA3   PSRFRAG  F12B   PSRIMR   F10D   PSRIR    EEEC   PSRKATM  F149   PSRMR    EEA9   PSRMSS   EFC1   PSRPORT  EF19   PSRPROT  EFDF   PSRRBFS  F039   PSRRXRP  F0D8   PSRTBFS  F057   PSRTOS   EFFD   PSRTTL   F01B   PSRTXWP  F0A3   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F182   REJECT   0080   ROMLOorg E000   ROM_ERR  E0C4   ROM_VERS 0020   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOCK  000E   FIO Simulation Structure             16:40:08  Feb 24, 2024   Page  107Debug Interface Routines                            R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_PDATA  000B   R_RD1C   0009   R_RDFRM  0021   R_RDOK   0005   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_RQRD   0005   R_RQRDNB 0015   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E3F8   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_RAW   0003   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_READ   0030   S_RQRD   0028   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WRFB2SK  F1D1   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSLACK   001D   WSLIST   0014   WSRAW    0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1D0   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3A1   bittab   E74E   bmread   EC26   bt2num   E73D   byterd   EC02   bytewr   EC5F   change   E4A3   chproc   040C   clock_ti 0455   conlb1   E7F7   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E06E   fio_fsz  E06C   fio_irq  E21B   fio_msg  E285   fio_rese E1DB   fio_resp E2A1   fio_star E08C   fio_wait E1FE   fiointe  E284   functb   EB46   getjo1   E4EB   FIO Simulation Structure             16:40:09  Feb 24, 2024   Page  108Debug Interface Routines                            getjo2   E4FA   getjo4   E501   getjo6   E50A   getjo8   E50C   getjob   E4E5   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  E3C9   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   E564   makrdy   E54F   max_trn  E070   mod_name 0002   mod_tbl  E1CA   mod_type 0000   no_dev   E14B   num2bt   E733   nwp_strt 0000   oldorg   EBCE   polext   E811   putru1   E523   putru2   E52A   putru4   E538   putru5   E547   putru6   E54B   putrun   E516   rdrqer1  E92B   rom_bad  E0C2   rom_firq E095   rom_init E071   rom_int  E0B7   rom_nmi  E08F   rom_swi  E09C   rom_swi2 E0A2   rom_swi3 E0A9   rom_trap E0B0   rsche2   E4BA   rsche3   E4CE   rsched   E4A9   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig E67E   send_SI  E43A   set_tabl E103   showrg   EB78   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E8B1   skbind   E83A   skclin   E772   skclos   E757   skcner1  E830   skcner2  E81D   skcner3  E834   skcner4  E82C   skcner5  E828   skcner6  E821   skconn   E7A4   skcraw   E6B6   skctcp   E6A4   skcudp   E6AD   skdisc   EBC7   skdvini  E626   skfres   E69D   skinit   E60C   skinthan E67D   skintrp  EBC7   sklist   E87F   sknewp   E67F   skopen   E6BF   skoper1  E729   skoper2  E72D   skowfo   E711   skrecv   E930   skreqrd  E8E8   skreqwr  E952   sksend   E993   skskep   EBC7   sksmac   EBC7   skspcl   EB1F   sktest   E67A   skurrd   EA23   skurrdf  E9B5   skurwt   EA4D   skusnm   EA9C   skusnt   EAE9   skuwr2   EA9C   sleep    E589   sleep7   E5B1   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   EBCE   spista   0000   spistr2  EBD4   sprend   EC7D   stbinit  E0D1   sto_chk  E152   swtchu   E4DA   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1BE   timerchk E1C4   timerin  E1B8   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F158   tsk2rx   F173   tsk2tx   F164   tskend   049E   tskinit  E160   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   E570   wakeu3   E577   wakeu4   E57B   wakeu5   E57D   wakeup   E565   wlocip   0370   wordrd   EC14   wordwr   EC6E   wzanyp   0457   wzcmnd   0004   wzdctr   0001   wzdev    EB4E   wzdevt   E691   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzifga   E00E   wzifip   E006   wzifma   E000   wzifnm   E00A   wzipad   0014   wzmyip   0000   wzprot   0028   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0026   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzxfer   0008   xmtint   E5BE   